
STM32F103C8T6__RFID_BluetoothClassic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800671c  0800671c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800671c  0800671c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800671c  0800671c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  20000068  0800678c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  0800678c  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcc5  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000262a  00000000  00000000  0002dd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  000303c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4c  00000000  00000000  000313d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015fba  00000000  00000000  00032024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f71b  00000000  00000000  00047fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007686b  00000000  00000000  000576f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004da4  00000000  00000000  000cdf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d2d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08006218 	.word	0x08006218

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08006218 	.word	0x08006218

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Bw16_Response>:
#include <string.h>



BW16_StatusTypeDef Bw16_Response(uint8_t *recv_buf, uint8_t *content, uint16_t timeout)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	4613      	mov	r3, r2
 8000168:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		uint8_t *_pStr = (uint8_t*)strstr((char*)recv_buf, (char*)content);
 800016a:	68b9      	ldr	r1, [r7, #8]
 800016c:	68f8      	ldr	r0, [r7, #12]
 800016e:	f005 f8f5 	bl	800535c <strstr>
 8000172:	6178      	str	r0, [r7, #20]
		if(_pStr != 0) return BW16_OK;
 8000174:	697b      	ldr	r3, [r7, #20]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d001      	beq.n	800017e <Bw16_Response+0x22>
 800017a:	2301      	movs	r3, #1
 800017c:	e009      	b.n	8000192 <Bw16_Response+0x36>

		HAL_Delay(1);
 800017e:	2001      	movs	r0, #1
 8000180:	f002 f99a 	bl	80024b8 <HAL_Delay>
		timeout--;
 8000184:	88fb      	ldrh	r3, [r7, #6]
 8000186:	3b01      	subs	r3, #1
 8000188:	80fb      	strh	r3, [r7, #6]
		if(timeout == 0) return BW16_ERROR;
 800018a:	88fb      	ldrh	r3, [r7, #6]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1ec      	bne.n	800016a <Bw16_Response+0xe>
 8000190:	2300      	movs	r3, #0
	}
}
 8000192:	4618      	mov	r0, r3
 8000194:	3718      	adds	r7, #24
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
	...

0800019c <Bw16_Echo>:
void Bw16_Echo(UART_HandleTypeDef huart, FunctionalState ctrl)
{
 800019c:	b084      	sub	sp, #16
 800019e:	b580      	push	{r7, lr}
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	f107 0c08 	add.w	ip, r7, #8
 80001a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//ATE1 là bật chế độ echo. echo là chế độ phản hồi lại dữ liệu hoặc lệnh cho thiết bị gửi
	//ATE0 là tắt chế độ
	switch(ctrl)
 80001aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d00c      	beq.n	80001cc <Bw16_Echo+0x30>
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d115      	bne.n	80001e2 <Bw16_Echo+0x46>
	{
		case ENABLE:
			HAL_UART_Transmit(&huart, (uint8_t*)"ATE1\r\n", strlen("ATE1\r\n"), 100);
 80001b6:	2364      	movs	r3, #100	; 0x64
 80001b8:	2206      	movs	r2, #6
 80001ba:	490d      	ldr	r1, [pc, #52]	; (80001f0 <Bw16_Echo+0x54>)
 80001bc:	f107 0008 	add.w	r0, r7, #8
 80001c0:	f004 fa71 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 80001c4:	2064      	movs	r0, #100	; 0x64
 80001c6:	f002 f977 	bl	80024b8 <HAL_Delay>
			break;
 80001ca:	e00a      	b.n	80001e2 <Bw16_Echo+0x46>

		case DISABLE:
			HAL_UART_Transmit(&huart, (uint8_t*)"ATE0\r\n", strlen("ATE0\r\n"), 100);
 80001cc:	2364      	movs	r3, #100	; 0x64
 80001ce:	2206      	movs	r2, #6
 80001d0:	4908      	ldr	r1, [pc, #32]	; (80001f4 <Bw16_Echo+0x58>)
 80001d2:	f107 0008 	add.w	r0, r7, #8
 80001d6:	f004 fa66 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f002 f96c 	bl	80024b8 <HAL_Delay>
			break;
 80001e0:	bf00      	nop
	}
}
 80001e2:	bf00      	nop
 80001e4:	46bd      	mov	sp, r7
 80001e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001ea:	b004      	add	sp, #16
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	08006230 	.word	0x08006230
 80001f4:	08006238 	.word	0x08006238

080001f8 <Bw16_Configure_Mode>:

void Bw16_Configure_Mode(UART_HandleTypeDef huart, BW16_Mode_HandleTypeDef mode)
{
 80001f8:	b084      	sub	sp, #16
 80001fa:	b580      	push	{r7, lr}
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	f107 0c08 	add.w	ip, r7, #8
 8000202:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	3 (Station + SoftAP mode): Chế độ kết nối Wi-Fi dạng Client và Soft Access Point (AP) kết hợp, module có thể kết nối vào một AP và cũng tạo ra một AP.
	<flash> giá trị số nguyên để lưu bộ nhớ hay không.
	0 Không lưu
	1 Lưu
	*/
	switch(mode)
 8000206:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800020a:	2b07      	cmp	r3, #7
 800020c:	d86a      	bhi.n	80002e4 <Bw16_Configure_Mode+0xec>
 800020e:	a201      	add	r2, pc, #4	; (adr r2, 8000214 <Bw16_Configure_Mode+0x1c>)
 8000210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000214:	08000235 	.word	0x08000235
 8000218:	0800024b 	.word	0x0800024b
 800021c:	08000261 	.word	0x08000261
 8000220:	08000277 	.word	0x08000277
 8000224:	0800028d 	.word	0x0800028d
 8000228:	080002a3 	.word	0x080002a3
 800022c:	080002b9 	.word	0x080002b9
 8000230:	080002cf 	.word	0x080002cf
	{
		case No_Flash_NULL_Mode:
			HAL_UART_Transmit(&huart, (uint8_t*)"AT+WMODE=0,0\r\n", strlen("AT+WMODE=0,0\r\n"), 100);
 8000234:	2364      	movs	r3, #100	; 0x64
 8000236:	220e      	movs	r2, #14
 8000238:	492d      	ldr	r1, [pc, #180]	; (80002f0 <Bw16_Configure_Mode+0xf8>)
 800023a:	f107 0008 	add.w	r0, r7, #8
 800023e:	f004 fa32 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f002 f938 	bl	80024b8 <HAL_Delay>
			break;
 8000248:	e04c      	b.n	80002e4 <Bw16_Configure_Mode+0xec>

		case No_Flash_STA_Mode:
			HAL_UART_Transmit(&huart, (uint8_t*)"AT+WMODE=1,0\r\n", strlen("AT+WMODE=1,0\r\n"), 100);
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	220e      	movs	r2, #14
 800024e:	4929      	ldr	r1, [pc, #164]	; (80002f4 <Bw16_Configure_Mode+0xfc>)
 8000250:	f107 0008 	add.w	r0, r7, #8
 8000254:	f004 fa27 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000258:	2064      	movs	r0, #100	; 0x64
 800025a:	f002 f92d 	bl	80024b8 <HAL_Delay>
			break;
 800025e:	e041      	b.n	80002e4 <Bw16_Configure_Mode+0xec>

		case No_Flash_AP_Mode:
			HAL_UART_Transmit(&huart, (uint8_t*)"AT+WMODE=2,0\r\n", strlen("AT+WMODE=2,0\r\n"), 100);
 8000260:	2364      	movs	r3, #100	; 0x64
 8000262:	220e      	movs	r2, #14
 8000264:	4924      	ldr	r1, [pc, #144]	; (80002f8 <Bw16_Configure_Mode+0x100>)
 8000266:	f107 0008 	add.w	r0, r7, #8
 800026a:	f004 fa1c 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 800026e:	2064      	movs	r0, #100	; 0x64
 8000270:	f002 f922 	bl	80024b8 <HAL_Delay>
			break;
 8000274:	e036      	b.n	80002e4 <Bw16_Configure_Mode+0xec>

		case No_Flash_AP_and_STA_Mode:
			HAL_UART_Transmit(&huart, (uint8_t*)"AT+WMODE=3,0\r\n", strlen("AT+WMODE=3,0\r\n"), 100);
 8000276:	2364      	movs	r3, #100	; 0x64
 8000278:	220e      	movs	r2, #14
 800027a:	4920      	ldr	r1, [pc, #128]	; (80002fc <Bw16_Configure_Mode+0x104>)
 800027c:	f107 0008 	add.w	r0, r7, #8
 8000280:	f004 fa11 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000284:	2064      	movs	r0, #100	; 0x64
 8000286:	f002 f917 	bl	80024b8 <HAL_Delay>
			break;
 800028a:	e02b      	b.n	80002e4 <Bw16_Configure_Mode+0xec>

		case Flash_NULL_Mode:
			HAL_UART_Transmit(&huart, (uint8_t*)"AT+WMODE=0,1\r\n", strlen("AT+WMODE=0,1\r\n"), 100);
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	220e      	movs	r2, #14
 8000290:	491b      	ldr	r1, [pc, #108]	; (8000300 <Bw16_Configure_Mode+0x108>)
 8000292:	f107 0008 	add.w	r0, r7, #8
 8000296:	f004 fa06 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 800029a:	2064      	movs	r0, #100	; 0x64
 800029c:	f002 f90c 	bl	80024b8 <HAL_Delay>
			break;
 80002a0:	e020      	b.n	80002e4 <Bw16_Configure_Mode+0xec>

		case Flash_STA_Mode:
			HAL_UART_Transmit(&huart, (uint8_t*)"AT+WMODE=1,1\r\n", strlen("AT+WMODE=1,1\r\n"), 100);
 80002a2:	2364      	movs	r3, #100	; 0x64
 80002a4:	220e      	movs	r2, #14
 80002a6:	4917      	ldr	r1, [pc, #92]	; (8000304 <Bw16_Configure_Mode+0x10c>)
 80002a8:	f107 0008 	add.w	r0, r7, #8
 80002ac:	f004 f9fb 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 80002b0:	2064      	movs	r0, #100	; 0x64
 80002b2:	f002 f901 	bl	80024b8 <HAL_Delay>
			break;
 80002b6:	e015      	b.n	80002e4 <Bw16_Configure_Mode+0xec>

		case Flash_AP_Mode:
			HAL_UART_Transmit(&huart, (uint8_t*)"AT+WMODE=2,1\r\n", strlen("AT+WMODE=2,1\r\n"), 100);
 80002b8:	2364      	movs	r3, #100	; 0x64
 80002ba:	220e      	movs	r2, #14
 80002bc:	4912      	ldr	r1, [pc, #72]	; (8000308 <Bw16_Configure_Mode+0x110>)
 80002be:	f107 0008 	add.w	r0, r7, #8
 80002c2:	f004 f9f0 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f002 f8f6 	bl	80024b8 <HAL_Delay>
			break;
 80002cc:	e00a      	b.n	80002e4 <Bw16_Configure_Mode+0xec>

		case FLASH_AP_and_STA_Mode:
			HAL_UART_Transmit(&huart, (uint8_t*)"AT+WMODE=3,1\r\n", strlen("AT+WMODE=3,1\r\n"), 100);
 80002ce:	2364      	movs	r3, #100	; 0x64
 80002d0:	220e      	movs	r2, #14
 80002d2:	490e      	ldr	r1, [pc, #56]	; (800030c <Bw16_Configure_Mode+0x114>)
 80002d4:	f107 0008 	add.w	r0, r7, #8
 80002d8:	f004 f9e5 	bl	80046a6 <HAL_UART_Transmit>
			HAL_Delay(100);
 80002dc:	2064      	movs	r0, #100	; 0x64
 80002de:	f002 f8eb 	bl	80024b8 <HAL_Delay>
			break;
 80002e2:	bf00      	nop
	}
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr
 80002f0:	08006240 	.word	0x08006240
 80002f4:	08006250 	.word	0x08006250
 80002f8:	08006260 	.word	0x08006260
 80002fc:	08006270 	.word	0x08006270
 8000300:	08006280 	.word	0x08006280
 8000304:	08006290 	.word	0x08006290
 8000308:	080062a0 	.word	0x080062a0
 800030c:	080062b0 	.word	0x080062b0

08000310 <BW16_Start_SmartConfig>:
	}
}


void BW16_Start_SmartConfig(UART_HandleTypeDef huart, BW16_App_HandleTypeDef app)
{
 8000310:	b084      	sub	sp, #16
 8000312:	b580      	push	{r7, lr}
 8000314:	af00      	add	r7, sp, #0
 8000316:	f107 0c08 	add.w	ip, r7, #8
 800031a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/*
		AT+WCONFIG = 0 : tắt các chế độ config
		AT+WCONFIG = 1 : dùng app simple config để config wifi
		AT+WCONFIG = 2 : dùng app wifi config để config wifi
	*/
	switch (app)
 800031e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000322:	2b02      	cmp	r3, #2
 8000324:	d01c      	beq.n	8000360 <BW16_Start_SmartConfig+0x50>
 8000326:	2b02      	cmp	r3, #2
 8000328:	dc25      	bgt.n	8000376 <BW16_Start_SmartConfig+0x66>
 800032a:	2b00      	cmp	r3, #0
 800032c:	d002      	beq.n	8000334 <BW16_Start_SmartConfig+0x24>
 800032e:	2b01      	cmp	r3, #1
 8000330:	d00b      	beq.n	800034a <BW16_Start_SmartConfig+0x3a>
	case Wifi_Config:
		HAL_UART_Transmit(&huart,(uint8_t*)"AT+WCONFIG=2\r\n",strlen("AT+WCONFIG=2\r\n"),100);
		HAL_Delay(100);
		break;
	}
}
 8000332:	e020      	b.n	8000376 <BW16_Start_SmartConfig+0x66>
		HAL_UART_Transmit(&huart,(uint8_t*)"AT+WCONFIG=0\r\n",strlen("AT+WCONFIG=0\r\n"),100);
 8000334:	2364      	movs	r3, #100	; 0x64
 8000336:	220e      	movs	r2, #14
 8000338:	4912      	ldr	r1, [pc, #72]	; (8000384 <BW16_Start_SmartConfig+0x74>)
 800033a:	f107 0008 	add.w	r0, r7, #8
 800033e:	f004 f9b2 	bl	80046a6 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000342:	2064      	movs	r0, #100	; 0x64
 8000344:	f002 f8b8 	bl	80024b8 <HAL_Delay>
		break;
 8000348:	e015      	b.n	8000376 <BW16_Start_SmartConfig+0x66>
		HAL_UART_Transmit(&huart,(uint8_t*)"AT+WCONFIG=1\r\n",strlen("AT+WCONFIG=1\r\n"),100);
 800034a:	2364      	movs	r3, #100	; 0x64
 800034c:	220e      	movs	r2, #14
 800034e:	490e      	ldr	r1, [pc, #56]	; (8000388 <BW16_Start_SmartConfig+0x78>)
 8000350:	f107 0008 	add.w	r0, r7, #8
 8000354:	f004 f9a7 	bl	80046a6 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000358:	2064      	movs	r0, #100	; 0x64
 800035a:	f002 f8ad 	bl	80024b8 <HAL_Delay>
		break;
 800035e:	e00a      	b.n	8000376 <BW16_Start_SmartConfig+0x66>
		HAL_UART_Transmit(&huart,(uint8_t*)"AT+WCONFIG=2\r\n",strlen("AT+WCONFIG=2\r\n"),100);
 8000360:	2364      	movs	r3, #100	; 0x64
 8000362:	220e      	movs	r2, #14
 8000364:	4909      	ldr	r1, [pc, #36]	; (800038c <BW16_Start_SmartConfig+0x7c>)
 8000366:	f107 0008 	add.w	r0, r7, #8
 800036a:	f004 f99c 	bl	80046a6 <HAL_UART_Transmit>
		HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f002 f8a2 	bl	80024b8 <HAL_Delay>
		break;
 8000374:	bf00      	nop
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800037e:	b004      	add	sp, #16
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	08006340 	.word	0x08006340
 8000388:	08006350 	.word	0x08006350
 800038c:	08006360 	.word	0x08006360

08000390 <Bw16_Set_Info_MQTT>:
}

//...... MQTT BW16

void Bw16_Set_Info_MQTT(UART_HandleTypeDef huart,uint8_t *key, uint8_t *data)
{
 8000390:	b084      	sub	sp, #16
 8000392:	b580      	push	{r7, lr}
 8000394:	b09a      	sub	sp, #104	; 0x68
 8000396:	af00      	add	r7, sp, #0
 8000398:	f107 0c70 	add.w	ip, r7, #112	; 0x70
 800039c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
											 LWT_Retained: Trạng thái retained của thông điệp LWT.
											 LWTpayload: Nội dung của thông điệp LWT.

	*/
	uint8_t info[100];
	sprintf((char*)info, "AT+MQTT=%s,%s\r\n",key,data);
 80003a0:	1d38      	adds	r0, r7, #4
 80003a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80003a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80003aa:	490e      	ldr	r1, [pc, #56]	; (80003e4 <Bw16_Set_Info_MQTT+0x54>)
 80003ac:	f004 fed6 	bl	800515c <siprintf>
	HAL_Delay(100);
 80003b0:	2064      	movs	r0, #100	; 0x64
 80003b2:	f002 f881 	bl	80024b8 <HAL_Delay>
	HAL_UART_Transmit(&huart,info,strlen((char*)info),100);
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff fec7 	bl	800014c <strlen>
 80003be:	4603      	mov	r3, r0
 80003c0:	b29a      	uxth	r2, r3
 80003c2:	1d39      	adds	r1, r7, #4
 80003c4:	2364      	movs	r3, #100	; 0x64
 80003c6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80003ca:	f004 f96c 	bl	80046a6 <HAL_UART_Transmit>
	HAL_Delay(100);
 80003ce:	2064      	movs	r0, #100	; 0x64
 80003d0:	f002 f872 	bl	80024b8 <HAL_Delay>
}
 80003d4:	bf00      	nop
 80003d6:	3768      	adds	r7, #104	; 0x68
 80003d8:	46bd      	mov	sp, r7
 80003da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003de:	b004      	add	sp, #16
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	0800639c 	.word	0x0800639c

080003e8 <Bw16_Connect_MQTT>:

void Bw16_Connect_MQTT(UART_HandleTypeDef huart)
{
 80003e8:	b084      	sub	sp, #16
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	f107 0c08 	add.w	ip, r7, #8
 80003f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/*
		AT+MQTT dùng để connect mqtt
	*/
	HAL_UART_Transmit(&huart,(uint8_t*)"AT+MQTT\r\n",strlen("AT+MQTT\r\n"),100);
 80003f6:	2364      	movs	r3, #100	; 0x64
 80003f8:	2209      	movs	r2, #9
 80003fa:	4907      	ldr	r1, [pc, #28]	; (8000418 <Bw16_Connect_MQTT+0x30>)
 80003fc:	f107 0008 	add.w	r0, r7, #8
 8000400:	f004 f951 	bl	80046a6 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000404:	2064      	movs	r0, #100	; 0x64
 8000406:	f002 f857 	bl	80024b8 <HAL_Delay>
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000412:	b004      	add	sp, #16
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	080063ac 	.word	0x080063ac

0800041c <Bw16_MQTT_Publish>:
	HAL_UART_Transmit(&huart,(uint8_t*)"AT+MQTT?\r\n",strlen("AT+MQTT?\r\n"),100);
	HAL_Delay(100);
}

void Bw16_MQTT_Publish(UART_HandleTypeDef huart, uint8_t *topic,uint8_t *qos, uint8_t *retained, uint8_t *payload)
{
 800041c:	b084      	sub	sp, #16
 800041e:	b580      	push	{r7, lr}
 8000420:	b0b4      	sub	sp, #208	; 0xd0
 8000422:	af02      	add	r7, sp, #8
 8000424:	f107 0cd0 	add.w	ip, r7, #208	; 0xd0
 8000428:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			1: Tin nhắn được giữ lại

		<payload>: Nội dung dữ liệu (độ dài tối đa 1024 byte)
	*/
	uint8_t package[200];
	sprintf((char*)package, "AT+MQTTPUB=%s,%s,%s,%s\r\n",topic,qos,retained,payload);
 800042c:	4638      	mov	r0, r7
 800042e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800043e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000442:	490b      	ldr	r1, [pc, #44]	; (8000470 <Bw16_MQTT_Publish+0x54>)
 8000444:	f004 fe8a 	bl	800515c <siprintf>
	HAL_UART_Transmit(&huart,package,strlen((char*)package),100);
 8000448:	463b      	mov	r3, r7
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe7e 	bl	800014c <strlen>
 8000450:	4603      	mov	r3, r0
 8000452:	b29a      	uxth	r2, r3
 8000454:	4639      	mov	r1, r7
 8000456:	2364      	movs	r3, #100	; 0x64
 8000458:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800045c:	f004 f923 	bl	80046a6 <HAL_UART_Transmit>
}
 8000460:	bf00      	nop
 8000462:	37c8      	adds	r7, #200	; 0xc8
 8000464:	46bd      	mov	sp, r7
 8000466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800046a:	b004      	add	sp, #16
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	080063c4 	.word	0x080063c4

08000474 <Bw16_MQTT_Subscribe>:
	sprintf((char*)messages, "AT+MQTTPUBRAW=%s,%s,%s,%s\r\n",topic,qos,retained,length);
	HAL_UART_Transmit(&huart,messages,strlen((char*)messages),100);
}

void Bw16_MQTT_Subscribe(UART_HandleTypeDef huart, uint8_t *topic,uint8_t *qos)
{
 8000474:	b084      	sub	sp, #16
 8000476:	b580      	push	{r7, lr}
 8000478:	b0b2      	sub	sp, #200	; 0xc8
 800047a:	af00      	add	r7, sp, #0
 800047c:	f107 0cd0 	add.w	ip, r7, #208	; 0xd0
 8000480:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t package[200];
	sprintf((char*)package, "AT+MQTTSUB=%s,%s\r\n",topic,qos);
 8000484:	4638      	mov	r0, r7
 8000486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800048a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800048e:	490b      	ldr	r1, [pc, #44]	; (80004bc <Bw16_MQTT_Subscribe+0x48>)
 8000490:	f004 fe64 	bl	800515c <siprintf>
	HAL_UART_Transmit(&huart,package,strlen((char*)package),100);
 8000494:	463b      	mov	r3, r7
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff fe58 	bl	800014c <strlen>
 800049c:	4603      	mov	r3, r0
 800049e:	b29a      	uxth	r2, r3
 80004a0:	4639      	mov	r1, r7
 80004a2:	2364      	movs	r3, #100	; 0x64
 80004a4:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80004a8:	f004 f8fd 	bl	80046a6 <HAL_UART_Transmit>
}
 80004ac:	bf00      	nop
 80004ae:	37c8      	adds	r7, #200	; 0xc8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004b6:	b004      	add	sp, #16
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	080063fc 	.word	0x080063fc

080004c0 <_write>:
uint8_t statusWiFiCounter = 0;
uint8_t statusClose = 0;
uint8_t Flag_counter = 0;
//use for print debug log
int _write(int file, char *ptr, int len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	f04f 33ff 	mov.w	r3, #4294967295
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <_write+0x28>)
 80004d8:	f004 f8e5 	bl	80046a6 <HAL_UART_Transmit>
    return len;
 80004dc:	687b      	ldr	r3, [r7, #4]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000019c 	.word	0x2000019c

080004ec <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	UNUSED(huart);// tránh cảnh báo biến chưa được sử dụng từ trình biên dịc

	if(huart->Instance == USART1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <HAL_UART_RxCpltCallback+0x88>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d111      	bne.n	8000522 <HAL_UART_RxCpltCallback+0x36>
	{

		HAL_UART_Receive_IT(&huart1, &modbusDataChar, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	491d      	ldr	r1, [pc, #116]	; (8000578 <HAL_UART_RxCpltCallback+0x8c>)
 8000502:	481e      	ldr	r0, [pc, #120]	; (800057c <HAL_UART_RxCpltCallback+0x90>)
 8000504:	f004 f968 	bl	80047d8 <HAL_UART_Receive_IT>
		modbusData[modbusDataCount] = modbusDataChar;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <HAL_UART_RxCpltCallback+0x8c>)
 8000510:	7819      	ldrb	r1, [r3, #0]
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <HAL_UART_RxCpltCallback+0x98>)
 8000514:	5499      	strb	r1, [r3, r2]
		modbusDataCount++;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b29a      	uxth	r2, r3
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 8000520:	801a      	strh	r2, [r3, #0]
	}
	if(huart->Instance == USART2)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a18      	ldr	r2, [pc, #96]	; (8000588 <HAL_UART_RxCpltCallback+0x9c>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d11e      	bne.n	800056a <HAL_UART_RxCpltCallback+0x7e>
	{
//		if(buffUartWifi == 0){
//			buffUartWifi = 1;
//			HAL_TIM_Base_Start(&htim2);
//		}
		HAL_UART_Receive_IT(&huart2, &wirelessData, 1);
 800052c:	2201      	movs	r2, #1
 800052e:	4917      	ldr	r1, [pc, #92]	; (800058c <HAL_UART_RxCpltCallback+0xa0>)
 8000530:	4817      	ldr	r0, [pc, #92]	; (8000590 <HAL_UART_RxCpltCallback+0xa4>)
 8000532:	f004 f951 	bl	80047d8 <HAL_UART_Receive_IT>
		if(wirelessData == 0) wirelessData = 64;
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_UART_RxCpltCallback+0xa0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d102      	bne.n	8000544 <HAL_UART_RxCpltCallback+0x58>
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <HAL_UART_RxCpltCallback+0xa0>)
 8000540:	2240      	movs	r2, #64	; 0x40
 8000542:	701a      	strb	r2, [r3, #0]
		wirelessBuffer[wirelessCounter++] = wirelessData;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <HAL_UART_RxCpltCallback+0xa8>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	b291      	uxth	r1, r2
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <HAL_UART_RxCpltCallback+0xa8>)
 800054e:	8011      	strh	r1, [r2, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_UART_RxCpltCallback+0xa0>)
 8000554:	7819      	ldrb	r1, [r3, #0]
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <HAL_UART_RxCpltCallback+0xac>)
 8000558:	5499      	strb	r1, [r3, r2]
		if(wirelessCounter > WIRELESS_MAX_BYTES - 1) wirelessCounter = 0;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_UART_RxCpltCallback+0xa8>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000562:	d302      	bcc.n	800056a <HAL_UART_RxCpltCallback+0x7e>
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <HAL_UART_RxCpltCallback+0xa8>)
 8000566:	2200      	movs	r2, #0
 8000568:	801a      	strh	r2, [r3, #0]
//		__HAL_TIM_SET_COUNTER(&htim2, 0);
	}
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40013800 	.word	0x40013800
 8000578:	20000608 	.word	0x20000608
 800057c:	2000019c 	.word	0x2000019c
 8000580:	2000060a 	.word	0x2000060a
 8000584:	20000414 	.word	0x20000414
 8000588:	40004400 	.word	0x40004400
 800058c:	20000410 	.word	0x20000410
 8000590:	200001dc 	.word	0x200001dc
 8000594:	20000412 	.word	0x20000412
 8000598:	2000021c 	.word	0x2000021c

0800059c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  if(htim->Instance == TIM1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d148      	bne.n	8000640 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
	statusWiFiCounter++;
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005b8:	701a      	strb	r2, [r3, #0]
	if(maincheck == 0){
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d134      	bne.n	800062c <HAL_TIM_PeriodElapsedCallback+0x90>
		if(statusWiFiCounter == displayStatusWiFi)
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d138      	bne.n	8000640 <HAL_TIM_PeriodElapsedCallback+0xa4>
		{
			if(displayStatusWiFi != SMARTCONFIG_WIFI){
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d010      	beq.n	80005f8 <HAL_TIM_PeriodElapsedCallback+0x5c>
			  if(displayStatusWiFi == SUCCESSFULLY_CONNECTED_WIFIAP) HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_RESET);
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d106      	bne.n	80005ec <HAL_TIM_PeriodElapsedCallback+0x50>
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e4:	481c      	ldr	r0, [pc, #112]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005e6:	f002 faad 	bl	8002b44 <HAL_GPIO_WritePin>
 80005ea:	e01b      	b.n	8000624 <HAL_TIM_PeriodElapsedCallback+0x88>
			  else HAL_GPIO_TogglePin(GreenLed_GPIO_Port, GreenLed_Pin);
 80005ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f0:	4819      	ldr	r0, [pc, #100]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005f2:	f002 fabf 	bl	8002b74 <HAL_GPIO_TogglePin>
 80005f6:	e015      	b.n	8000624 <HAL_TIM_PeriodElapsedCallback+0x88>
			}
			else{
			  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	4816      	ldr	r0, [pc, #88]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000600:	f002 faa0 	bl	8002b44 <HAL_GPIO_WritePin>
			  if(displayStatusWiFi == SUCCESSFULLY_CONNECTED_WIFIAP) HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_RESET);
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d106      	bne.n	800061a <HAL_TIM_PeriodElapsedCallback+0x7e>
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000614:	f002 fa96 	bl	8002b44 <HAL_GPIO_WritePin>
 8000618:	e004      	b.n	8000624 <HAL_TIM_PeriodElapsedCallback+0x88>
			  else HAL_GPIO_TogglePin(RedLed_GPIO_Port, RedLed_Pin);
 800061a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000620:	f002 faa8 	bl	8002b74 <HAL_GPIO_TogglePin>
			}

		  statusWiFiCounter = 0;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
			statusWiFiCounter = 0;

		}
	}
  }
}
 800062a:	e009      	b.n	8000640 <HAL_TIM_PeriodElapsedCallback+0xa4>
		if(statusWiFiCounter == 120){
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b78      	cmp	r3, #120	; 0x78
 8000632:	d105      	bne.n	8000640 <HAL_TIM_PeriodElapsedCallback+0xa4>
			Flag_counter = 1;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
			statusWiFiCounter = 0;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40012c00 	.word	0x40012c00
 800064c:	200006bb 	.word	0x200006bb
 8000650:	200006ba 	.word	0x200006ba
 8000654:	2000060c 	.word	0x2000060c
 8000658:	40010c00 	.word	0x40010c00
 800065c:	200006bd 	.word	0x200006bd

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000664:	b0e1      	sub	sp, #388	; 0x184
 8000666:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f001 fec4 	bl	80023f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 fa2a 	bl	8000ac4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(2000);
 8000670:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000674:	f001 ff20 	bl	80024b8 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 fbfe 	bl	8000e78 <MX_GPIO_Init>
  MX_SPI1_Init();
 800067c:	f000 fa60 	bl	8000b40 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000680:	f000 fbd0 	bl	8000e24 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000684:	f000 fba4 	bl	8000dd0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000688:	f000 fa90 	bl	8000bac <MX_TIM1_Init>
  MX_TIM2_Init();
 800068c:	f000 fade 	bl	8000c4c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000690:	f000 fb28 	bl	8000ce4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &modbusDataChar, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	49b4      	ldr	r1, [pc, #720]	; (8000968 <main+0x308>)
 8000698:	48b4      	ldr	r0, [pc, #720]	; (800096c <main+0x30c>)
 800069a:	f004 f89d 	bl	80047d8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &wirelessData, 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	49b3      	ldr	r1, [pc, #716]	; (8000970 <main+0x310>)
 80006a2:	48b4      	ldr	r0, [pc, #720]	; (8000974 <main+0x314>)
 80006a4:	f004 f898 	bl	80047d8 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80006a8:	48b3      	ldr	r0, [pc, #716]	; (8000978 <main+0x318>)
 80006aa:	f003 f975 	bl	8003998 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80006ae:	210c      	movs	r1, #12
 80006b0:	48b2      	ldr	r0, [pc, #712]	; (800097c <main+0x31c>)
 80006b2:	f003 f9c9 	bl	8003a48 <HAL_TIM_PWM_Start>

  uint8_t buff[255];
  uint8_t uid[10];
  int32_t uid_len = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  printf("init systems\r\n");
 80006bc:	48b0      	ldr	r0, [pc, #704]	; (8000980 <main+0x320>)
 80006be:	f004 fd45 	bl	800514c <puts>
//		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,450);
//		HAL_Delay(1000);
//  }


  Bw16_WiFi_Init();
 80006c2:	f000 fca1 	bl	8001008 <Bw16_WiFi_Init>
  BW16_MQTT_Broker_Init();
 80006c6:	f000 fd79 	bl	80011bc <BW16_MQTT_Broker_Init>

//  HAL_TIM_Base_Stop(&htim1);
  maincheck = 1;
 80006ca:	4bae      	ldr	r3, [pc, #696]	; (8000984 <main+0x324>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d6:	48ac      	ldr	r0, [pc, #688]	; (8000988 <main+0x328>)
 80006d8:	f002 fa34 	bl	8002b44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin,RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e2:	48a9      	ldr	r0, [pc, #676]	; (8000988 <main+0x328>)
 80006e4:	f002 fa2e 	bl	8002b44 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,950);
 80006e8:	4ba4      	ldr	r3, [pc, #656]	; (800097c <main+0x31c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 80006f0:	641a      	str	r2, [r3, #64]	; 0x40

  PN532 pn532;
  PN532_SPI_Init(&pn532);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fbc2 	bl	8001e80 <PN532_SPI_Init>
  printf("init PN532\r\n");
 80006fc:	48a3      	ldr	r0, [pc, #652]	; (800098c <main+0x32c>)
 80006fe:	f004 fd25 	bl	800514c <puts>
  if (PN532_GetFirmwareVersion(&pn532, buff) != PN532_STATUS_OK)
 8000702:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f001 f9c9 	bl	8001aa4 <PN532_GetFirmwareVersion>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d017      	beq.n	8000748 <main+0xe8>
  {	  uint8_t timeout = 10;
 8000718:	230a      	movs	r3, #10
 800071a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	  while(timeout--){
 800071e:	e007      	b.n	8000730 <main+0xd0>
		  HAL_GPIO_TogglePin(RedLed_GPIO_Port, RedLed_Pin);
 8000720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000724:	4898      	ldr	r0, [pc, #608]	; (8000988 <main+0x328>)
 8000726:	f002 fa25 	bl	8002b74 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800072a:	20c8      	movs	r0, #200	; 0xc8
 800072c:	f001 fec4 	bl	80024b8 <HAL_Delay>
	  while(timeout--){
 8000730:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	f887 213f 	strb.w	r2, [r7, #319]	; 0x13f
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f0      	bne.n	8000720 <main+0xc0>
	  }HAL_TIM_Base_Stop(&htim2);
 800073e:	4894      	ldr	r0, [pc, #592]	; (8000990 <main+0x330>)
 8000740:	f003 f900 	bl	8003944 <HAL_TIM_Base_Stop>
	  HAL_NVIC_SystemReset();
 8000744:	f001 fff3 	bl	800272e <HAL_NVIC_SystemReset>
  }
  printf("PN532_GetFirmwareVersion success\r\n");
 8000748:	4892      	ldr	r0, [pc, #584]	; (8000994 <main+0x334>)
 800074a:	f004 fcff 	bl	800514c <puts>

  PN532_SamConfiguration(&pn532);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f9ca 	bl	8001aec <PN532_SamConfiguration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	memset(uid, 0, sizeof(uid));
 8000758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075c:	220a      	movs	r2, #10
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f004 fdf3 	bl	800534c <memset>

	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000766:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800076a:	f107 000c 	add.w	r0, r7, #12
 800076e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000772:	2200      	movs	r2, #0
 8000774:	f001 f9dc 	bl	8001b30 <PN532_ReadPassiveTarget>
 8000778:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	if (uid_len != PN532_STATUS_ERROR)
 800077c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000784:	f000 80b1 	beq.w	80008ea <main+0x28a>
	{
 8000788:	466b      	mov	r3, sp
 800078a:	607b      	str	r3, [r7, #4]
		char stringForHex[6 * uid_len + 6];
 800078c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4619      	mov	r1, r3
 800079c:	1e4b      	subs	r3, r1, #1
 800079e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80007a2:	460a      	mov	r2, r1
 80007a4:	2300      	movs	r3, #0
 80007a6:	4690      	mov	r8, r2
 80007a8:	4699      	mov	r9, r3
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007be:	460a      	mov	r2, r1
 80007c0:	2300      	movs	r3, #0
 80007c2:	4692      	mov	sl, r2
 80007c4:	469b      	mov	fp, r3
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	f04f 0300 	mov.w	r3, #0
 80007ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80007d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80007d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80007da:	460b      	mov	r3, r1
 80007dc:	3307      	adds	r3, #7
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	ebad 0d03 	sub.w	sp, sp, r3
 80007e6:	ab10      	add	r3, sp, #64	; 0x40
 80007e8:	3300      	adds	r3, #0
 80007ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		memset(stringForHex, 0, sizeof(stringForHex));
 80007ee:	460b      	mov	r3, r1
 80007f0:	461a      	mov	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80007f8:	f004 fda8 	bl	800534c <memset>
		strcat(stringForHex, "CODE:");
 80007fc:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000800:	f7ff fca4 	bl	800014c <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800080c:	4413      	add	r3, r2
 800080e:	4a62      	ldr	r2, [pc, #392]	; (8000998 <main+0x338>)
 8000810:	6810      	ldr	r0, [r2, #0]
 8000812:	6018      	str	r0, [r3, #0]
 8000814:	8892      	ldrh	r2, [r2, #4]
 8000816:	809a      	strh	r2, [r3, #4]
		for(uint8_t i=0; i<uid_len; i++)
 8000818:	2300      	movs	r3, #0
 800081a:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 800081e:	e017      	b.n	8000850 <main+0x1f0>
		{
//			printf("%02X\r\n",uid[i]);
			sprintf(stringForHex + strlen(stringForHex), " 0x%02X", uid[i]);
 8000820:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000824:	f7ff fc92 	bl	800014c <strlen>
 8000828:	4602      	mov	r2, r0
 800082a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800082e:	1898      	adds	r0, r3, r2
 8000830:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8000834:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000838:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	461a      	mov	r2, r3
 8000840:	4956      	ldr	r1, [pc, #344]	; (800099c <main+0x33c>)
 8000842:	f004 fc8b 	bl	800515c <siprintf>
		for(uint8_t i=0; i<uid_len; i++)
 8000846:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 800084a:	3301      	adds	r3, #1
 800084c:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8000850:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8000854:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000858:	429a      	cmp	r2, r3
 800085a:	dce1      	bgt.n	8000820 <main+0x1c0>
		}

		printf("%s\r\n",stringForHex);
 800085c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000860:	484f      	ldr	r0, [pc, #316]	; (80009a0 <main+0x340>)
 8000862:	f004 fc0d 	bl	8005080 <iprintf>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2104      	movs	r1, #4
 800086a:	4847      	ldr	r0, [pc, #284]	; (8000988 <main+0x328>)
 800086c:	f002 f96a 	bl	8002b44 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f001 fe21 	bl	80024b8 <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2104      	movs	r1, #4
 800087a:	4843      	ldr	r0, [pc, #268]	; (8000988 <main+0x328>)
 800087c:	f002 f962 	bl	8002b44 <HAL_GPIO_WritePin>
		Bw16_MQTT_Publish(huart2,broker.topic.pub,(uint8_t*)"0",(uint8_t*)"0",(uint8_t*)stringForHex);
 8000880:	4e3c      	ldr	r6, [pc, #240]	; (8000974 <main+0x314>)
 8000882:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000886:	930f      	str	r3, [sp, #60]	; 0x3c
 8000888:	4b46      	ldr	r3, [pc, #280]	; (80009a4 <main+0x344>)
 800088a:	930e      	str	r3, [sp, #56]	; 0x38
 800088c:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <main+0x344>)
 800088e:	930d      	str	r3, [sp, #52]	; 0x34
 8000890:	4b45      	ldr	r3, [pc, #276]	; (80009a8 <main+0x348>)
 8000892:	930c      	str	r3, [sp, #48]	; 0x30
 8000894:	466d      	mov	r5, sp
 8000896:	f106 0410 	add.w	r4, r6, #16
 800089a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800089c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800089e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008ae:	f7ff fdb5 	bl	800041c <Bw16_MQTT_Publish>
		Stm32_Clearing_Buffer(wirelessBuffer, WIRELESS_MAX_BYTES);
 80008b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008b6:	483d      	ldr	r0, [pc, #244]	; (80009ac <main+0x34c>)
 80008b8:	f000 fb80 	bl	8000fbc <Stm32_Clearing_Buffer>
		HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c2:	4831      	ldr	r0, [pc, #196]	; (8000988 <main+0x328>)
 80008c4:	f002 f93e 	bl	8002b44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin,RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ce:	482e      	ldr	r0, [pc, #184]	; (8000988 <main+0x328>)
 80008d0:	f002 f938 	bl	8002b44 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,950);
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <main+0x31c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80008dc:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(400);
 80008de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008e2:	f001 fde9 	bl	80024b8 <HAL_Delay>
 80008e6:	f8d7 d004 	ldr.w	sp, [r7, #4]
	}
	for (uint8_t i = 0; i < 50;i++){
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
 80008f0:	e0a7      	b.n	8000a42 <main+0x3e2>
		if(wirelessBuffer[i] == 'O' && wirelessBuffer[i+1] == 'P' && wirelessBuffer[i+2] == 'E' &&
 80008f2:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80008f6:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <main+0x34c>)
 80008f8:	5cd3      	ldrb	r3, [r2, r3]
 80008fa:	2b4f      	cmp	r3, #79	; 0x4f
 80008fc:	d15e      	bne.n	80009bc <main+0x35c>
 80008fe:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 8000902:	3301      	adds	r3, #1
 8000904:	4a29      	ldr	r2, [pc, #164]	; (80009ac <main+0x34c>)
 8000906:	5cd3      	ldrb	r3, [r2, r3]
 8000908:	2b50      	cmp	r3, #80	; 0x50
 800090a:	d157      	bne.n	80009bc <main+0x35c>
 800090c:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 8000910:	3302      	adds	r3, #2
 8000912:	4a26      	ldr	r2, [pc, #152]	; (80009ac <main+0x34c>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	2b45      	cmp	r3, #69	; 0x45
 8000918:	d150      	bne.n	80009bc <main+0x35c>
		   wirelessBuffer[i+3] == 'N'){
 800091a:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 800091e:	3303      	adds	r3, #3
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <main+0x34c>)
 8000922:	5cd3      	ldrb	r3, [r2, r3]
		if(wirelessBuffer[i] == 'O' && wirelessBuffer[i+1] == 'P' && wirelessBuffer[i+2] == 'E' &&
 8000924:	2b4e      	cmp	r3, #78	; 0x4e
 8000926:	d149      	bne.n	80009bc <main+0x35c>
				HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin,SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	4816      	ldr	r0, [pc, #88]	; (8000988 <main+0x328>)
 8000930:	f002 f908 	bl	8002b44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin,RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <main+0x328>)
 800093c:	f002 f902 	bl	8002b44 <HAL_GPIO_WritePin>
				Stm32_Clearing_Buffer(wirelessBuffer, WIRELESS_MAX_BYTES);
 8000940:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000944:	4819      	ldr	r0, [pc, #100]	; (80009ac <main+0x34c>)
 8000946:	f000 fb39 	bl	8000fbc <Stm32_Clearing_Buffer>
				statusWiFiCounter = 0;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <main+0x350>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
				statusClose = 1;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <main+0x354>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,450);
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <main+0x31c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800095e:	641a      	str	r2, [r3, #64]	; 0x40
			printf("Open\r\n");
 8000960:	4815      	ldr	r0, [pc, #84]	; (80009b8 <main+0x358>)
 8000962:	f004 fbf3 	bl	800514c <puts>
 8000966:	e067      	b.n	8000a38 <main+0x3d8>
 8000968:	20000608 	.word	0x20000608
 800096c:	2000019c 	.word	0x2000019c
 8000970:	20000410 	.word	0x20000410
 8000974:	200001dc 	.word	0x200001dc
 8000978:	200000dc 	.word	0x200000dc
 800097c:	2000015c 	.word	0x2000015c
 8000980:	08006420 	.word	0x08006420
 8000984:	200006ba 	.word	0x200006ba
 8000988:	40010c00 	.word	0x40010c00
 800098c:	08006430 	.word	0x08006430
 8000990:	2000011c 	.word	0x2000011c
 8000994:	0800643c 	.word	0x0800643c
 8000998:	08006460 	.word	0x08006460
 800099c:	08006468 	.word	0x08006468
 80009a0:	08006470 	.word	0x08006470
 80009a4:	08006478 	.word	0x08006478
 80009a8:	2000069c 	.word	0x2000069c
 80009ac:	2000021c 	.word	0x2000021c
 80009b0:	200006bb 	.word	0x200006bb
 80009b4:	200006bc 	.word	0x200006bc
 80009b8:	0800647c 	.word	0x0800647c
		}
		else if(wirelessBuffer[i] == 'C' && wirelessBuffer[i+1] == 'L' && wirelessBuffer[i+2] == 'O' &&
 80009bc:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80009c0:	4a39      	ldr	r2, [pc, #228]	; (8000aa8 <main+0x448>)
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	2b43      	cmp	r3, #67	; 0x43
 80009c6:	d137      	bne.n	8000a38 <main+0x3d8>
 80009c8:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80009cc:	3301      	adds	r3, #1
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <main+0x448>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	2b4c      	cmp	r3, #76	; 0x4c
 80009d4:	d130      	bne.n	8000a38 <main+0x3d8>
 80009d6:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80009da:	3302      	adds	r3, #2
 80009dc:	4a32      	ldr	r2, [pc, #200]	; (8000aa8 <main+0x448>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	2b4f      	cmp	r3, #79	; 0x4f
 80009e2:	d129      	bne.n	8000a38 <main+0x3d8>
		   wirelessBuffer[i+3] == 'S' && wirelessBuffer[i+4] == 'E'){
 80009e4:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80009e8:	3303      	adds	r3, #3
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <main+0x448>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
		else if(wirelessBuffer[i] == 'C' && wirelessBuffer[i+1] == 'L' && wirelessBuffer[i+2] == 'O' &&
 80009ee:	2b53      	cmp	r3, #83	; 0x53
 80009f0:	d122      	bne.n	8000a38 <main+0x3d8>
		   wirelessBuffer[i+3] == 'S' && wirelessBuffer[i+4] == 'E'){
 80009f2:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80009f6:	3304      	adds	r3, #4
 80009f8:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <main+0x448>)
 80009fa:	5cd3      	ldrb	r3, [r2, r3]
 80009fc:	2b45      	cmp	r3, #69	; 0x45
 80009fe:	d11b      	bne.n	8000a38 <main+0x3d8>
				HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin,RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	4829      	ldr	r0, [pc, #164]	; (8000aac <main+0x44c>)
 8000a08:	f002 f89c 	bl	8002b44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin,SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a12:	4826      	ldr	r0, [pc, #152]	; (8000aac <main+0x44c>)
 8000a14:	f002 f896 	bl	8002b44 <HAL_GPIO_WritePin>
				Stm32_Clearing_Buffer(wirelessBuffer, WIRELESS_MAX_BYTES);
 8000a18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <main+0x448>)
 8000a1e:	f000 facd 	bl	8000fbc <Stm32_Clearing_Buffer>
				statusWiFiCounter = 0;
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <main+0x450>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,950);
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <main+0x454>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000a30:	641a      	str	r2, [r3, #64]	; 0x40
				printf("Close\r\n");
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <main+0x458>)
 8000a34:	f004 fb8a 	bl	800514c <puts>
	for (uint8_t i = 0; i < 50;i++){
 8000a38:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
 8000a42:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 8000a46:	2b31      	cmp	r3, #49	; 0x31
 8000a48:	f67f af53 	bls.w	80008f2 <main+0x292>
		}
	}
	if(statusClose == 1 && Flag_counter == 1){
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <main+0x45c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d11b      	bne.n	8000a8c <main+0x42c>
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <main+0x460>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d117      	bne.n	8000a8c <main+0x42c>
		statusClose = 0;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <main+0x45c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
		Flag_counter = 0;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <main+0x460>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <main+0x44c>)
 8000a70:	f002 f868 	bl	8002b44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <main+0x44c>)
 8000a7c:	f002 f862 	bl	8002b44 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,950);
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <main+0x454>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000a88:	641a      	str	r2, [r3, #64]	; 0x40
 8000a8a:	e00c      	b.n	8000aa6 <main+0x446>
	}
	else if(statusClose == 0 && Flag_counter == 1){
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <main+0x45c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f47f ae61 	bne.w	8000758 <main+0xf8>
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <main+0x460>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	f47f ae5c 	bne.w	8000758 <main+0xf8>
		Flag_counter = 0;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <main+0x460>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
	memset(uid, 0, sizeof(uid));
 8000aa6:	e657      	b.n	8000758 <main+0xf8>
 8000aa8:	2000021c 	.word	0x2000021c
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	200006bb 	.word	0x200006bb
 8000ab4:	2000015c 	.word	0x2000015c
 8000ab8:	08006484 	.word	0x08006484
 8000abc:	200006bc 	.word	0x200006bc
 8000ac0:	200006bd 	.word	0x200006bd

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	; 0x40
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2228      	movs	r2, #40	; 0x28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fc3a 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	2310      	movs	r3, #16
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f852 	bl	8002ba4 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b06:	f000 fccf 	bl	80014a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fabe 	bl	80030a8 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b32:	f000 fcb9 	bl	80014a8 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3740      	adds	r7, #64	; 0x40
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <MX_SPI1_Init+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b74:	2220      	movs	r2, #32
 8000b76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_SPI1_Init+0x64>)
 8000b92:	f002 fc21 	bl	80033d8 <HAL_SPI_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b9c:	f000 fc84 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000084 	.word	0x20000084
 8000ba8:	40013000 	.word	0x40013000

08000bac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <MX_TIM1_Init+0x9c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000bd0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000bde:	22c8      	movs	r2, #200	; 0xc8
 8000be0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000bf6:	f002 fe7a 	bl	80038ee <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 fc52 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000c12:	f003 f919 	bl	8003e48 <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c1c:	f000 fc44 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_TIM1_Init+0x98>)
 8000c2e:	f003 fc97 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c38:	f000 fc36 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000dc 	.word	0x200000dc
 8000c48:	40012c00 	.word	0x40012c00

08000c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8799;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c72:	f242 225f 	movw	r2, #8799	; 0x225f
 8000c76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c80:	2206      	movs	r2, #6
 8000c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c90:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000c92:	f002 fe2c 	bl	80038ee <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c9c:	f000 fc04 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000cae:	f003 f8cb 	bl	8003e48 <HAL_TIM_ConfigClockSource>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cb8:	f000 fbf6 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_TIM2_Init+0x94>)
 8000cca:	f003 fc49 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 fbe8 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000011c 	.word	0x2000011c

08000ce4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <MX_TIM4_Init+0xe8>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d28:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d3a:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d3c:	f002 fdd7 	bl	80038ee <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d46:	f000 fbaf 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d54:	4619      	mov	r1, r3
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d58:	f003 f876 	bl	8003e48 <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d62:	f000 fba1 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d66:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d68:	f002 fe39 	bl	80039de <HAL_TIM_PWM_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d72:	f000 fb99 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000d86:	f003 fbeb 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d90:	f000 fb8a 	bl	80014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d94:	2360      	movs	r3, #96	; 0x60
 8000d96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	220c      	movs	r2, #12
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000dac:	f002 ff86 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000db6:	f000 fb77 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM4_Init+0xe4>)
 8000dbc:	f001 f952 	bl	8002064 <HAL_TIM_MspPostInit>

}
 8000dc0:	bf00      	nop
 8000dc2:	3738      	adds	r7, #56	; 0x38
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000015c 	.word	0x2000015c
 8000dcc:	40000800 	.word	0x40000800

08000dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <MX_USART1_UART_Init+0x50>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000ddc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USART1_UART_Init+0x4c>)
 8000e08:	f003 fc00 	bl	800460c <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e12:	f000 fb49 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000019c 	.word	0x2000019c
 8000e20:	40013800 	.word	0x40013800

08000e24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <MX_USART2_UART_Init+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	f003 fbd6 	bl	800460c <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e66:	f000 fb1f 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200001dc 	.word	0x200001dc
 8000e74:	40004400 	.word	0x40004400

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a47      	ldr	r2, [pc, #284]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000e92:	f043 0320 	orr.w	r3, r3, #32
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b42      	ldr	r3, [pc, #264]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a41      	ldr	r2, [pc, #260]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a3b      	ldr	r2, [pc, #236]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_BW16_GPIO_Port, RST_BW16_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4836      	ldr	r0, [pc, #216]	; (8000fb4 <MX_GPIO_Init+0x13c>)
 8000eda:	f001 fe33 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	4834      	ldr	r0, [pc, #208]	; (8000fb4 <MX_GPIO_Init+0x13c>)
 8000ee4:	f001 fe2e 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFID_Reset_Pin|GreenLed_Pin|RedLed_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f640 4101 	movw	r1, #3073	; 0xc01
 8000eee:	4832      	ldr	r0, [pc, #200]	; (8000fb8 <MX_GPIO_Init+0x140>)
 8000ef0:	f001 fe28 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	482f      	ldr	r0, [pc, #188]	; (8000fb8 <MX_GPIO_Init+0x140>)
 8000efa:	f001 fe23 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_BW16_Pin */
  GPIO_InitStruct.Pin = RST_BW16_Pin;
 8000efe:	2302      	movs	r3, #2
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_BW16_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	4827      	ldr	r0, [pc, #156]	; (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f16:	f001 fc91 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_SS_Pin */
  GPIO_InitStruct.Pin = RFID_SS_Pin;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RFID_SS_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f32:	f001 fc83 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_Reset_Pin */
  GPIO_InitStruct.Pin = RFID_Reset_Pin;
 8000f36:	2301      	movs	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RFID_Reset_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <MX_GPIO_Init+0x140>)
 8000f4e:	f001 fc75 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_IRQ_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 8000f52:	2302      	movs	r3, #2
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_GPIO_Init+0x140>)
 8000f66:	f001 fc69 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin GreenLed_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|GreenLed_Pin;
 8000f6a:	f240 4304 	movw	r3, #1028	; 0x404
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_GPIO_Init+0x140>)
 8000f84:	f001 fc5a 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : RedLed_Pin */
  GPIO_InitStruct.Pin = RedLed_Pin;
 8000f88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RedLed_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_GPIO_Init+0x140>)
 8000fa2:	f001 fc4b 	bl	800283c <HAL_GPIO_Init>

}
 8000fa6:	bf00      	nop
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <Stm32_Clearing_Buffer>:

/* USER CODE BEGIN 4 */
void Stm32_Clearing_Buffer(uint8_t *ptrBuffer, uint16_t sizeBuffer)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
  if(ptrBuffer == &wirelessBuffer[0]) wirelessCounter = 0;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <Stm32_Clearing_Buffer+0x44>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d102      	bne.n	8000fd6 <Stm32_Clearing_Buffer+0x1a>
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <Stm32_Clearing_Buffer+0x48>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	801a      	strh	r2, [r3, #0]

	for(uint16_t i = 0; i < sizeBuffer; i++) ptrBuffer[i] = '\0';
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	81fb      	strh	r3, [r7, #14]
 8000fda:	e007      	b.n	8000fec <Stm32_Clearing_Buffer+0x30>
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	81fb      	strh	r3, [r7, #14]
 8000fec:	89fa      	ldrh	r2, [r7, #14]
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3f3      	bcc.n	8000fdc <Stm32_Clearing_Buffer+0x20>
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	2000021c 	.word	0x2000021c
 8001004:	20000412 	.word	0x20000412

08001008 <Bw16_WiFi_Init>:
void Bw16_WiFi_Init(void){
 8001008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100a:	b08f      	sub	sp, #60	; 0x3c
 800100c:	af0e      	add	r7, sp, #56	; 0x38
	displayStatusWiFi = CHECK_CONNECTING_WIFIAP;
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <Bw16_WiFi_Init+0xbc>)
 8001010:	2204      	movs	r2, #4
 8001012:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RST_BW16_GPIO_Port, RST_BW16_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2102      	movs	r1, #2
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <Bw16_WiFi_Init+0xc0>)
 800101a:	f001 fd93 	bl	8002b44 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800101e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001022:	f001 fa49 	bl	80024b8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_BW16_GPIO_Port, RST_BW16_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2102      	movs	r1, #2
 800102a:	4827      	ldr	r0, [pc, #156]	; (80010c8 <Bw16_WiFi_Init+0xc0>)
 800102c:	f001 fd8a 	bl	8002b44 <HAL_GPIO_WritePin>
//	HAL_Delay(10000);
//	Bw16_Setup_Default(huart2);
//	HAL_Delay(5000);
    if(Bw16_Response(wirelessBuffer, (uint8_t*)"WIFI_GOT_IP", 10000)) Stm32_Clearing_Buffer(wirelessBuffer, WIRELESS_MAX_BYTES);
 8001030:	f242 7210 	movw	r2, #10000	; 0x2710
 8001034:	4925      	ldr	r1, [pc, #148]	; (80010cc <Bw16_WiFi_Init+0xc4>)
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <Bw16_WiFi_Init+0xc8>)
 8001038:	f7ff f890 	bl	800015c <Bw16_Response>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d005      	beq.n	800104e <Bw16_WiFi_Init+0x46>
 8001042:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001046:	4822      	ldr	r0, [pc, #136]	; (80010d0 <Bw16_WiFi_Init+0xc8>)
 8001048:	f7ff ffb8 	bl	8000fbc <Stm32_Clearing_Buffer>
 800104c:	e001      	b.n	8001052 <Bw16_WiFi_Init+0x4a>
    else SmartConfigWifi();
 800104e:	f000 f85f 	bl	8001110 <SmartConfigWifi>
    HAL_Delay(200);
 8001052:	20c8      	movs	r0, #200	; 0xc8
 8001054:	f001 fa30 	bl	80024b8 <HAL_Delay>
	Bw16_Echo(huart2, DISABLE);
 8001058:	4e1e      	ldr	r6, [pc, #120]	; (80010d4 <Bw16_WiFi_Init+0xcc>)
 800105a:	2300      	movs	r3, #0
 800105c:	930c      	str	r3, [sp, #48]	; 0x30
 800105e:	466d      	mov	r5, sp
 8001060:	f106 0410 	add.w	r4, r6, #16
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001070:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001074:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001078:	f7ff f890 	bl	800019c <Bw16_Echo>
	Stm32_Check_BW16_Response(wirelessBuffer, (uint8_t*)"OK");
 800107c:	4916      	ldr	r1, [pc, #88]	; (80010d8 <Bw16_WiFi_Init+0xd0>)
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <Bw16_WiFi_Init+0xc8>)
 8001080:	f000 f82c 	bl	80010dc <Stm32_Check_BW16_Response>
    HAL_Delay(200);
 8001084:	20c8      	movs	r0, #200	; 0xc8
 8001086:	f001 fa17 	bl	80024b8 <HAL_Delay>
	Bw16_Configure_Mode(huart2, Flash_STA_Mode);
 800108a:	4e12      	ldr	r6, [pc, #72]	; (80010d4 <Bw16_WiFi_Init+0xcc>)
 800108c:	2305      	movs	r3, #5
 800108e:	930c      	str	r3, [sp, #48]	; 0x30
 8001090:	466d      	mov	r5, sp
 8001092:	f106 0410 	add.w	r4, r6, #16
 8001096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010aa:	f7ff f8a5 	bl	80001f8 <Bw16_Configure_Mode>
	Stm32_Check_BW16_Response(wirelessBuffer, (uint8_t*)"OK");
 80010ae:	490a      	ldr	r1, [pc, #40]	; (80010d8 <Bw16_WiFi_Init+0xd0>)
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <Bw16_WiFi_Init+0xc8>)
 80010b2:	f000 f813 	bl	80010dc <Stm32_Check_BW16_Response>
    HAL_Delay(200);
 80010b6:	20c8      	movs	r0, #200	; 0xc8
 80010b8:	f001 f9fe 	bl	80024b8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	3704      	adds	r7, #4
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c4:	2000060c 	.word	0x2000060c
 80010c8:	40010800 	.word	0x40010800
 80010cc:	0800648c 	.word	0x0800648c
 80010d0:	2000021c 	.word	0x2000021c
 80010d4:	200001dc 	.word	0x200001dc
 80010d8:	08006498 	.word	0x08006498

080010dc <Stm32_Check_BW16_Response>:
void Stm32_Check_BW16_Response(uint8_t *ptrBuffer, uint8_t *ptrContent)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	if(!Bw16_Response(ptrBuffer, ptrContent, 10000)) HAL_NVIC_SystemReset();
 80010e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f835 	bl	800015c <Bw16_Response>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <Stm32_Check_BW16_Response+0x22>
 80010f8:	f001 fb19 	bl	800272e <HAL_NVIC_SystemReset>
	else Stm32_Clearing_Buffer(ptrBuffer, WIRELESS_MAX_BYTES);
}
 80010fc:	e004      	b.n	8001108 <Stm32_Check_BW16_Response+0x2c>
	else Stm32_Clearing_Buffer(ptrBuffer, WIRELESS_MAX_BYTES);
 80010fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff5a 	bl	8000fbc <Stm32_Clearing_Buffer>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <SmartConfigWifi>:
void SmartConfigWifi(void)
{
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b08f      	sub	sp, #60	; 0x3c
 8001114:	af0e      	add	r7, sp, #56	; 0x38
	displayStatusWiFi = SMARTCONFIG_WIFI;
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <SmartConfigWifi+0x98>)
 8001118:	2202      	movs	r2, #2
 800111a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800111c:	2064      	movs	r0, #100	; 0x64
 800111e:	f001 f9cb 	bl	80024b8 <HAL_Delay>
	BW16_Start_SmartConfig(huart2,Wifi_Config);
 8001122:	4e22      	ldr	r6, [pc, #136]	; (80011ac <SmartConfigWifi+0x9c>)
 8001124:	2302      	movs	r3, #2
 8001126:	930c      	str	r3, [sp, #48]	; 0x30
 8001128:	466d      	mov	r5, sp
 800112a:	f106 0410 	add.w	r4, r6, #16
 800112e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001136:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800113a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800113e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001142:	f7ff f8e5 	bl	8000310 <BW16_Start_SmartConfig>
	HAL_Delay(100);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f001 f9b6 	bl	80024b8 <HAL_Delay>
	if(Bw16_Response(wirelessBuffer, (uint8_t*)"WIFI_GOT_IP", 60000)) Stm32_Clearing_Buffer(wirelessBuffer, WIRELESS_MAX_BYTES);
 800114c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001150:	4917      	ldr	r1, [pc, #92]	; (80011b0 <SmartConfigWifi+0xa0>)
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <SmartConfigWifi+0xa4>)
 8001154:	f7ff f802 	bl	800015c <Bw16_Response>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <SmartConfigWifi+0x5a>
 800115e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <SmartConfigWifi+0xa4>)
 8001164:	f7ff ff2a 	bl	8000fbc <Stm32_Clearing_Buffer>
 8001168:	e001      	b.n	800116e <SmartConfigWifi+0x5e>
	else HAL_NVIC_SystemReset();
 800116a:	f001 fae0 	bl	800272e <HAL_NVIC_SystemReset>

	BW16_Start_SmartConfig(huart2,OFF);
 800116e:	4e0f      	ldr	r6, [pc, #60]	; (80011ac <SmartConfigWifi+0x9c>)
 8001170:	2300      	movs	r3, #0
 8001172:	930c      	str	r3, [sp, #48]	; 0x30
 8001174:	466d      	mov	r5, sp
 8001176:	f106 0410 	add.w	r4, r6, #16
 800117a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001182:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001186:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800118a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800118e:	f7ff f8bf 	bl	8000310 <BW16_Start_SmartConfig>
	HAL_Delay(100);
 8001192:	2064      	movs	r0, #100	; 0x64
 8001194:	f001 f990 	bl	80024b8 <HAL_Delay>
	Stm32_Check_BW16_Response(wirelessBuffer, (uint8_t*)"OK");
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <SmartConfigWifi+0xa8>)
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <SmartConfigWifi+0xa4>)
 800119c:	f7ff ff9e 	bl	80010dc <Stm32_Check_BW16_Response>
}
 80011a0:	bf00      	nop
 80011a2:	3704      	adds	r7, #4
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a8:	2000060c 	.word	0x2000060c
 80011ac:	200001dc 	.word	0x200001dc
 80011b0:	0800648c 	.word	0x0800648c
 80011b4:	2000021c 	.word	0x2000021c
 80011b8:	08006498 	.word	0x08006498

080011bc <BW16_MQTT_Broker_Init>:
void BW16_MQTT_Broker_Init()
{
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	b091      	sub	sp, #68	; 0x44
 80011c0:	af10      	add	r7, sp, #64	; 0x40
	strcpy((char*)broker.host, "103.151.238.68");
 80011c2:	4a9d      	ldr	r2, [pc, #628]	; (8001438 <BW16_MQTT_Broker_Init+0x27c>)
 80011c4:	4b9d      	ldr	r3, [pc, #628]	; (800143c <BW16_MQTT_Broker_Init+0x280>)
 80011c6:	4614      	mov	r4, r2
 80011c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ca:	c407      	stmia	r4!, {r0, r1, r2}
 80011cc:	8023      	strh	r3, [r4, #0]
 80011ce:	3402      	adds	r4, #2
 80011d0:	0c1b      	lsrs	r3, r3, #16
 80011d2:	7023      	strb	r3, [r4, #0]
	strcpy((char*)broker.port, "1887");
 80011d4:	4b98      	ldr	r3, [pc, #608]	; (8001438 <BW16_MQTT_Broker_Init+0x27c>)
 80011d6:	4a9a      	ldr	r2, [pc, #616]	; (8001440 <BW16_MQTT_Broker_Init+0x284>)
 80011d8:	331e      	adds	r3, #30
 80011da:	6810      	ldr	r0, [r2, #0]
 80011dc:	6018      	str	r0, [r3, #0]
 80011de:	7912      	ldrb	r2, [r2, #4]
 80011e0:	711a      	strb	r2, [r3, #4]
	strcpy((char*)broker.user, "guest");
 80011e2:	4b98      	ldr	r3, [pc, #608]	; (8001444 <BW16_MQTT_Broker_Init+0x288>)
 80011e4:	4a98      	ldr	r2, [pc, #608]	; (8001448 <BW16_MQTT_Broker_Init+0x28c>)
 80011e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ea:	6018      	str	r0, [r3, #0]
 80011ec:	3304      	adds	r3, #4
 80011ee:	8019      	strh	r1, [r3, #0]
	strcpy((char*)broker.password, "123456a@");
 80011f0:	4a96      	ldr	r2, [pc, #600]	; (800144c <BW16_MQTT_Broker_Init+0x290>)
 80011f2:	4b97      	ldr	r3, [pc, #604]	; (8001450 <BW16_MQTT_Broker_Init+0x294>)
 80011f4:	cb03      	ldmia	r3!, {r0, r1}
 80011f6:	6010      	str	r0, [r2, #0]
 80011f8:	6051      	str	r1, [r2, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	7213      	strb	r3, [r2, #8]
	strcpy((char*)broker.id, DeviceID);
 80011fe:	4b95      	ldr	r3, [pc, #596]	; (8001454 <BW16_MQTT_Broker_Init+0x298>)
 8001200:	4a95      	ldr	r2, [pc, #596]	; (8001458 <BW16_MQTT_Broker_Init+0x29c>)
 8001202:	6810      	ldr	r0, [r2, #0]
 8001204:	6018      	str	r0, [r3, #0]
 8001206:	8892      	ldrh	r2, [r2, #4]
 8001208:	809a      	strh	r2, [r3, #4]
	strcpy((char*)broker.topic.sub, "device/NFC");
 800120a:	4a94      	ldr	r2, [pc, #592]	; (800145c <BW16_MQTT_Broker_Init+0x2a0>)
 800120c:	4b94      	ldr	r3, [pc, #592]	; (8001460 <BW16_MQTT_Broker_Init+0x2a4>)
 800120e:	cb03      	ldmia	r3!, {r0, r1}
 8001210:	6010      	str	r0, [r2, #0]
 8001212:	6051      	str	r1, [r2, #4]
 8001214:	8819      	ldrh	r1, [r3, #0]
 8001216:	789b      	ldrb	r3, [r3, #2]
 8001218:	8111      	strh	r1, [r2, #8]
 800121a:	7293      	strb	r3, [r2, #10]
	strcpy((char*)broker.topic.pub, "server/NFC");
 800121c:	4b91      	ldr	r3, [pc, #580]	; (8001464 <BW16_MQTT_Broker_Init+0x2a8>)
 800121e:	4a92      	ldr	r2, [pc, #584]	; (8001468 <BW16_MQTT_Broker_Init+0x2ac>)
 8001220:	ca07      	ldmia	r2, {r0, r1, r2}
 8001222:	c303      	stmia	r3!, {r0, r1}
 8001224:	801a      	strh	r2, [r3, #0]
 8001226:	3302      	adds	r3, #2
 8001228:	0c12      	lsrs	r2, r2, #16
 800122a:	701a      	strb	r2, [r3, #0]
	displayStatusWiFi = SUCCESSFULLY_CONNECTED_WIFIAP;
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <BW16_MQTT_Broker_Init+0x2b0>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
	Bw16_Set_Info_MQTT(huart2, (uint8_t *)"1", broker.host);
 8001232:	4e8f      	ldr	r6, [pc, #572]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 8001234:	4b80      	ldr	r3, [pc, #512]	; (8001438 <BW16_MQTT_Broker_Init+0x27c>)
 8001236:	930d      	str	r3, [sp, #52]	; 0x34
 8001238:	4b8e      	ldr	r3, [pc, #568]	; (8001474 <BW16_MQTT_Broker_Init+0x2b8>)
 800123a:	930c      	str	r3, [sp, #48]	; 0x30
 800123c:	466d      	mov	r5, sp
 800123e:	f106 0410 	add.w	r4, r6, #16
 8001242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800124e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001252:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001256:	f7ff f89b 	bl	8000390 <Bw16_Set_Info_MQTT>

	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 800125a:	4987      	ldr	r1, [pc, #540]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 800125c:	4887      	ldr	r0, [pc, #540]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 800125e:	f7ff ff3d 	bl	80010dc <Stm32_Check_BW16_Response>

	Bw16_Set_Info_MQTT(huart2,(uint8_t *)"2",broker.port);
 8001262:	4e83      	ldr	r6, [pc, #524]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 8001264:	4b86      	ldr	r3, [pc, #536]	; (8001480 <BW16_MQTT_Broker_Init+0x2c4>)
 8001266:	930d      	str	r3, [sp, #52]	; 0x34
 8001268:	4b86      	ldr	r3, [pc, #536]	; (8001484 <BW16_MQTT_Broker_Init+0x2c8>)
 800126a:	930c      	str	r3, [sp, #48]	; 0x30
 800126c:	466d      	mov	r5, sp
 800126e:	f106 0410 	add.w	r4, r6, #16
 8001272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800127e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001282:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001286:	f7ff f883 	bl	8000390 <Bw16_Set_Info_MQTT>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 800128a:	497b      	ldr	r1, [pc, #492]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 800128c:	487b      	ldr	r0, [pc, #492]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 800128e:	f7ff ff25 	bl	80010dc <Stm32_Check_BW16_Response>

	Bw16_Set_Info_MQTT(huart2,(uint8_t *)"3",(uint8_t *)"1");
 8001292:	4e77      	ldr	r6, [pc, #476]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 8001294:	4b77      	ldr	r3, [pc, #476]	; (8001474 <BW16_MQTT_Broker_Init+0x2b8>)
 8001296:	930d      	str	r3, [sp, #52]	; 0x34
 8001298:	4b7b      	ldr	r3, [pc, #492]	; (8001488 <BW16_MQTT_Broker_Init+0x2cc>)
 800129a:	930c      	str	r3, [sp, #48]	; 0x30
 800129c:	466d      	mov	r5, sp
 800129e:	f106 0410 	add.w	r4, r6, #16
 80012a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80012b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012b6:	f7ff f86b 	bl	8000390 <Bw16_Set_Info_MQTT>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 80012ba:	496f      	ldr	r1, [pc, #444]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 80012bc:	486f      	ldr	r0, [pc, #444]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 80012be:	f7ff ff0d 	bl	80010dc <Stm32_Check_BW16_Response>

	Bw16_Set_Info_MQTT(huart2,(uint8_t *)"4",(uint8_t *) DeviceID);
 80012c2:	4e6b      	ldr	r6, [pc, #428]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 80012c4:	4b64      	ldr	r3, [pc, #400]	; (8001458 <BW16_MQTT_Broker_Init+0x29c>)
 80012c6:	930d      	str	r3, [sp, #52]	; 0x34
 80012c8:	4b70      	ldr	r3, [pc, #448]	; (800148c <BW16_MQTT_Broker_Init+0x2d0>)
 80012ca:	930c      	str	r3, [sp, #48]	; 0x30
 80012cc:	466d      	mov	r5, sp
 80012ce:	f106 0410 	add.w	r4, r6, #16
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80012e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012e6:	f7ff f853 	bl	8000390 <Bw16_Set_Info_MQTT>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 80012ea:	4963      	ldr	r1, [pc, #396]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 80012ec:	4863      	ldr	r0, [pc, #396]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 80012ee:	f7ff fef5 	bl	80010dc <Stm32_Check_BW16_Response>

	Bw16_Set_Info_MQTT(huart2,(uint8_t *)"5",broker.user);
 80012f2:	4e5f      	ldr	r6, [pc, #380]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 80012f4:	4b53      	ldr	r3, [pc, #332]	; (8001444 <BW16_MQTT_Broker_Init+0x288>)
 80012f6:	930d      	str	r3, [sp, #52]	; 0x34
 80012f8:	4b65      	ldr	r3, [pc, #404]	; (8001490 <BW16_MQTT_Broker_Init+0x2d4>)
 80012fa:	930c      	str	r3, [sp, #48]	; 0x30
 80012fc:	466d      	mov	r5, sp
 80012fe:	f106 0410 	add.w	r4, r6, #16
 8001302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800130e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001312:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001316:	f7ff f83b 	bl	8000390 <Bw16_Set_Info_MQTT>
	HAL_Delay(100);
 800131a:	2064      	movs	r0, #100	; 0x64
 800131c:	f001 f8cc 	bl	80024b8 <HAL_Delay>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 8001320:	4955      	ldr	r1, [pc, #340]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 8001322:	4856      	ldr	r0, [pc, #344]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 8001324:	f7ff feda 	bl	80010dc <Stm32_Check_BW16_Response>

	Bw16_Set_Info_MQTT(huart2,(uint8_t *)"6",broker.password);
 8001328:	4e51      	ldr	r6, [pc, #324]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 800132a:	4b48      	ldr	r3, [pc, #288]	; (800144c <BW16_MQTT_Broker_Init+0x290>)
 800132c:	930d      	str	r3, [sp, #52]	; 0x34
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <BW16_MQTT_Broker_Init+0x2d8>)
 8001330:	930c      	str	r3, [sp, #48]	; 0x30
 8001332:	466d      	mov	r5, sp
 8001334:	f106 0410 	add.w	r4, r6, #16
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001344:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001348:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800134c:	f7ff f820 	bl	8000390 <Bw16_Set_Info_MQTT>
	HAL_Delay(100);
 8001350:	2064      	movs	r0, #100	; 0x64
 8001352:	f001 f8b1 	bl	80024b8 <HAL_Delay>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 8001356:	4948      	ldr	r1, [pc, #288]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 8001358:	4848      	ldr	r0, [pc, #288]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 800135a:	f7ff febf 	bl	80010dc <Stm32_Check_BW16_Response>

	Bw16_Set_Info_MQTT(huart2,(uint8_t *)"7",(uint8_t *)"\"\",0,0,\"\"");
 800135e:	4e44      	ldr	r6, [pc, #272]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <BW16_MQTT_Broker_Init+0x2dc>)
 8001362:	930d      	str	r3, [sp, #52]	; 0x34
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <BW16_MQTT_Broker_Init+0x2e0>)
 8001366:	930c      	str	r3, [sp, #48]	; 0x30
 8001368:	466d      	mov	r5, sp
 800136a:	f106 0410 	add.w	r4, r6, #16
 800136e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001376:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800137a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800137e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001382:	f7ff f805 	bl	8000390 <Bw16_Set_Info_MQTT>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 8001386:	493c      	ldr	r1, [pc, #240]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 8001388:	483c      	ldr	r0, [pc, #240]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 800138a:	f7ff fea7 	bl	80010dc <Stm32_Check_BW16_Response>

	Bw16_Connect_MQTT(huart2);
 800138e:	4e38      	ldr	r6, [pc, #224]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 8001390:	466d      	mov	r5, sp
 8001392:	f106 0410 	add.w	r4, r6, #16
 8001396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013aa:	f7ff f81d 	bl	80003e8 <Bw16_Connect_MQTT>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 80013ae:	4932      	ldr	r1, [pc, #200]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 80013b0:	4832      	ldr	r0, [pc, #200]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 80013b2:	f7ff fe93 	bl	80010dc <Stm32_Check_BW16_Response>
	HAL_Delay(500);
 80013b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ba:	f001 f87d 	bl	80024b8 <HAL_Delay>
	Bw16_MQTT_Publish(huart2,broker.topic.pub,(uint8_t*)"0",(uint8_t*)"0",(uint8_t*)"<!> Successfully connected");
 80013be:	4e2c      	ldr	r6, [pc, #176]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <BW16_MQTT_Broker_Init+0x2e4>)
 80013c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <BW16_MQTT_Broker_Init+0x2e8>)
 80013c6:	930e      	str	r3, [sp, #56]	; 0x38
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <BW16_MQTT_Broker_Init+0x2e8>)
 80013ca:	930d      	str	r3, [sp, #52]	; 0x34
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <BW16_MQTT_Broker_Init+0x2a8>)
 80013ce:	930c      	str	r3, [sp, #48]	; 0x30
 80013d0:	466d      	mov	r5, sp
 80013d2:	f106 0410 	add.w	r4, r6, #16
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013ea:	f7ff f817 	bl	800041c <Bw16_MQTT_Publish>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 80013ee:	4922      	ldr	r1, [pc, #136]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 80013f0:	4822      	ldr	r0, [pc, #136]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 80013f2:	f7ff fe73 	bl	80010dc <Stm32_Check_BW16_Response>
	HAL_Delay(500);
 80013f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013fa:	f001 f85d 	bl	80024b8 <HAL_Delay>
	Bw16_MQTT_Subscribe(huart2,broker.topic.sub,(uint8_t*)"0");
 80013fe:	4e1c      	ldr	r6, [pc, #112]	; (8001470 <BW16_MQTT_Broker_Init+0x2b4>)
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <BW16_MQTT_Broker_Init+0x2e8>)
 8001402:	930d      	str	r3, [sp, #52]	; 0x34
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <BW16_MQTT_Broker_Init+0x2a0>)
 8001406:	930c      	str	r3, [sp, #48]	; 0x30
 8001408:	466d      	mov	r5, sp
 800140a:	f106 0410 	add.w	r4, r6, #16
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800141a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800141e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001422:	f7ff f827 	bl	8000474 <Bw16_MQTT_Subscribe>
	Stm32_Check_BW16_Response(wirelessBuffer,(uint8_t*)"OK");
 8001426:	4914      	ldr	r1, [pc, #80]	; (8001478 <BW16_MQTT_Broker_Init+0x2bc>)
 8001428:	4814      	ldr	r0, [pc, #80]	; (800147c <BW16_MQTT_Broker_Init+0x2c0>)
 800142a:	f7ff fe57 	bl	80010dc <Stm32_Check_BW16_Response>
}
 800142e:	bf00      	nop
 8001430:	3704      	adds	r7, #4
 8001432:	46bd      	mov	sp, r7
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001436:	bf00      	nop
 8001438:	20000610 	.word	0x20000610
 800143c:	0800649c 	.word	0x0800649c
 8001440:	080064ac 	.word	0x080064ac
 8001444:	2000064c 	.word	0x2000064c
 8001448:	080064b4 	.word	0x080064b4
 800144c:	20000665 	.word	0x20000665
 8001450:	080064bc 	.word	0x080064bc
 8001454:	20000633 	.word	0x20000633
 8001458:	080064c8 	.word	0x080064c8
 800145c:	2000067e 	.word	0x2000067e
 8001460:	080064d0 	.word	0x080064d0
 8001464:	2000069c 	.word	0x2000069c
 8001468:	080064dc 	.word	0x080064dc
 800146c:	2000060c 	.word	0x2000060c
 8001470:	200001dc 	.word	0x200001dc
 8001474:	080064e8 	.word	0x080064e8
 8001478:	08006498 	.word	0x08006498
 800147c:	2000021c 	.word	0x2000021c
 8001480:	2000062e 	.word	0x2000062e
 8001484:	080064ec 	.word	0x080064ec
 8001488:	080064f0 	.word	0x080064f0
 800148c:	080064f4 	.word	0x080064f4
 8001490:	080064f8 	.word	0x080064f8
 8001494:	080064fc 	.word	0x080064fc
 8001498:	08006500 	.word	0x08006500
 800149c:	0800650c 	.word	0x0800650c
 80014a0:	08006510 	.word	0x08006510
 80014a4:	08006478 	.word	0x08006478

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0c8      	sub	sp, #288	; 0x120
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014c2:	6018      	str	r0, [r3, #0]
 80014c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014cc:	6019      	str	r1, [r3, #0]
 80014ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014d2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80014d6:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 80014d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014dc:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	2bff      	cmp	r3, #255	; 0xff
 80014e4:	d806      	bhi.n	80014f4 <PN532_WriteFrame+0x40>
 80014e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014ea:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	e0aa      	b.n	8001650 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8001500:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001504:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 800150c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001510:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001514:	2200      	movs	r2, #0
 8001516:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8001518:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800151c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8001524:	2300      	movs	r3, #0
 8001526:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800152a:	e010      	b.n	800154e <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 800152c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001530:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001534:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001538:	5cd2      	ldrb	r2, [r2, r3]
 800153a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800153e:	4413      	add	r3, r2
 8001540:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8001544:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001548:	3301      	adds	r3, #1
 800154a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800154e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001552:	2b02      	cmp	r3, #2
 8001554:	d9ea      	bls.n	800152c <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8001556:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800155a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001566:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800156a:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 800156c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001570:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	425b      	negs	r3, r3
 800157a:	b2da      	uxtb	r2, r3
 800157c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001580:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001584:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8001586:	2300      	movs	r3, #0
 8001588:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800158c:	e023      	b.n	80015d6 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 800158e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001592:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001596:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	441a      	add	r2, r3
 800159e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80015a2:	3305      	adds	r3, #5
 80015a4:	7811      	ldrb	r1, [r2, #0]
 80015a6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80015aa:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80015ae:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 80015b0:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80015b4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80015b8:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80015c6:	4413      	add	r3, r2
 80015c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 80015cc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80015d0:	3301      	adds	r3, #1
 80015d2:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80015d6:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80015e0:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80015e4:	8812      	ldrh	r2, [r2, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d8d1      	bhi.n	800158e <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 80015ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015ee:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	3305      	adds	r3, #5
 80015f6:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80015fa:	43d2      	mvns	r2, r2
 80015fc:	b2d1      	uxtb	r1, r2
 80015fe:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001602:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001606:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8001608:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800160c:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	3306      	adds	r3, #6
 8001614:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001618:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800161c:	2100      	movs	r1, #0
 800161e:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8001620:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001624:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001630:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	3207      	adds	r2, #7
 8001638:	b291      	uxth	r1, r2
 800163a:	f107 0214 	add.w	r2, r7, #20
 800163e:	4610      	mov	r0, r2
 8001640:	4798      	blx	r3
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	e000      	b.n	8001650 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b0c8      	sub	sp, #288	; 0x120
 8001660:	af00      	add	r7, sp, #0
 8001662:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001666:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800166a:	6018      	str	r0, [r3, #0]
 800166c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001670:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001674:	6019      	str	r1, [r3, #0]
 8001676:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800167a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800167e:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8001686:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800168a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001696:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800169a:	8812      	ldrh	r2, [r2, #0]
 800169c:	3207      	adds	r2, #7
 800169e:	b291      	uxth	r1, r2
 80016a0:	f107 0214 	add.w	r2, r7, #20
 80016a4:	4610      	mov	r0, r2
 80016a6:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 80016ae:	e019      	b.n	80016e4 <PN532_ReadFrame+0x88>
        offset += 1;
 80016b0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80016b4:	3301      	adds	r3, #1
 80016b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 80016ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016be:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	1dda      	adds	r2, r3, #7
 80016c6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80016ca:	429a      	cmp	r2, r3
 80016cc:	da0a      	bge.n	80016e4 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 80016ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	485b      	ldr	r0, [pc, #364]	; (8001848 <PN532_ReadFrame+0x1ec>)
 80016dc:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	e0ab      	b.n	800183c <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 80016e4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80016e8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80016ec:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0dc      	beq.n	80016b0 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 80016f6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80016fa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80016fe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	2bff      	cmp	r3, #255	; 0xff
 8001706:	d00a      	beq.n	800171e <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8001708:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800170c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	484c      	ldr	r0, [pc, #304]	; (8001848 <PN532_ReadFrame+0x1ec>)
 8001716:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	e08e      	b.n	800183c <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 800171e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001722:	3301      	adds	r3, #1
 8001724:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8001728:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800172c:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	1dda      	adds	r2, r3, #7
 8001734:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001738:	429a      	cmp	r2, r3
 800173a:	da0a      	bge.n	8001752 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 800173c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001740:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	4840      	ldr	r0, [pc, #256]	; (800184c <PN532_ReadFrame+0x1f0>)
 800174a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	e074      	b.n	800183c <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8001752:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001756:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800175a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800175e:	5cd3      	ldrb	r3, [r2, r3]
 8001760:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8001764:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001768:	3301      	adds	r3, #1
 800176a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800176e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001772:	5cd2      	ldrb	r2, [r2, r3]
 8001774:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001778:	4413      	add	r3, r2
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8001780:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001784:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	4830      	ldr	r0, [pc, #192]	; (8001850 <PN532_ReadFrame+0x1f4>)
 800178e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	e052      	b.n	800183c <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800179c:	e014      	b.n	80017c8 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 800179e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80017a2:	1c9a      	adds	r2, r3, #2
 80017a4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80017a8:	4413      	add	r3, r2
 80017aa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80017ae:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80017b2:	5cd2      	ldrb	r2, [r2, r3]
 80017b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80017b8:	4413      	add	r3, r2
 80017ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80017be:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80017c2:	3301      	adds	r3, #1
 80017c4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80017c8:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 80017cc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d2e4      	bcs.n	800179e <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 80017d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00a      	beq.n	80017f2 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 80017dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80017e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	481a      	ldr	r0, [pc, #104]	; (8001854 <PN532_ReadFrame+0x1f8>)
 80017ea:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	e024      	b.n	800183c <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80017f8:	e018      	b.n	800182c <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 80017fa:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80017fe:	1c9a      	adds	r2, r3, #2
 8001800:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8001804:	441a      	add	r2, r3
 8001806:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800180a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800180e:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8001812:	6809      	ldr	r1, [r1, #0]
 8001814:	440b      	add	r3, r1
 8001816:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800181a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800181e:	5c8a      	ldrb	r2, [r1, r2]
 8001820:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8001822:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8001826:	3301      	adds	r3, #1
 8001828:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 800182c:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8001830:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001834:	429a      	cmp	r2, r3
 8001836:	d3e0      	bcc.n	80017fa <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8001838:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 800183c:	4618      	mov	r0, r3
 800183e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	0800652c 	.word	0x0800652c
 800184c:	08006560 	.word	0x08006560
 8001850:	0800657c 	.word	0x0800657c
 8001854:	080065ac 	.word	0x080065ac

08001858 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b0c7      	sub	sp, #284	; 0x11c
 800185c:	af00      	add	r7, sp, #0
 800185e:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001862:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001866:	6020      	str	r0, [r4, #0]
 8001868:	4608      	mov	r0, r1
 800186a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800186e:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8001872:	600a      	str	r2, [r1, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800187a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800187e:	4602      	mov	r2, r0
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001886:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800188a:	460a      	mov	r2, r1
 800188c:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 800188e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001896:	22d4      	movs	r2, #212	; 0xd4
 8001898:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 800189a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800189e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018a2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80018a6:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80018b4:	e012      	b.n	80018dc <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 80018b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80018ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80018be:	441a      	add	r2, r3
 80018c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80018c4:	3302      	adds	r3, #2
 80018c6:	7811      	ldrb	r1, [r2, #0]
 80018c8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80018cc:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80018d0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 80018d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80018d6:	3301      	adds	r3, #1
 80018d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80018dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d8e5      	bhi.n	80018b6 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80018ea:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80018ee:	3302      	adds	r3, #2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f107 0110 	add.w	r1, r7, #16
 80018f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	f7ff fdd8 	bl	80014b4 <PN532_WriteFrame>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d011      	beq.n	800192e <PN532_CallFunction+0xd6>
        pn532->wakeup();
 800190a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800190e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8001918:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800191c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	485b      	ldr	r0, [pc, #364]	; (8001a94 <PN532_CallFunction+0x23c>)
 8001926:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	e0ac      	b.n	8001a88 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 800192e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001932:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800193e:	4798      	blx	r3
 8001940:	4603      	mov	r3, r0
 8001942:	f083 0301 	eor.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	e09a      	b.n	8001a88 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8001952:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f107 0210 	add.w	r2, r7, #16
 8001962:	2106      	movs	r1, #6
 8001964:	4610      	mov	r0, r2
 8001966:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800196e:	e01c      	b.n	80019aa <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8001970:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001974:	4a48      	ldr	r2, [pc, #288]	; (8001a98 <PN532_CallFunction+0x240>)
 8001976:	5cd2      	ldrb	r2, [r2, r3]
 8001978:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800197c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001980:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	429a      	cmp	r2, r3
 8001988:	d00a      	beq.n	80019a0 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 800198a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800198e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4841      	ldr	r0, [pc, #260]	; (8001a9c <PN532_CallFunction+0x244>)
 8001998:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e073      	b.n	8001a88 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80019a0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80019a4:	3301      	adds	r3, #1
 80019a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80019aa:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d9de      	bls.n	8001970 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 80019b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80019c2:	4798      	blx	r3
 80019c4:	4603      	mov	r3, r0
 80019c6:	f083 0301 	eor.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	e058      	b.n	8001a88 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 80019d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	3302      	adds	r3, #2
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	f107 0110 	add.w	r1, r7, #16
 80019e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	f7ff fe33 	bl	800165c <PN532_ReadFrame>
 80019f6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 80019fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2bd5      	cmp	r3, #213	; 0xd5
 8001a06:	d10d      	bne.n	8001a24 <PN532_CallFunction+0x1cc>
 8001a08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a18:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d00a      	beq.n	8001a3a <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8001a24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	481b      	ldr	r0, [pc, #108]	; (8001aa0 <PN532_CallFunction+0x248>)
 8001a32:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	e026      	b.n	8001a88 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8001a40:	e015      	b.n	8001a6e <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8001a42:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001a46:	1c9a      	adds	r2, r3, #2
 8001a48:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001a4c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001a50:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8001a54:	6809      	ldr	r1, [r1, #0]
 8001a56:	440b      	add	r3, r1
 8001a58:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001a5c:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8001a60:	5c8a      	ldrb	r2, [r1, r2]
 8001a62:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8001a64:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8001a6e:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001a78:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d8df      	bhi.n	8001a42 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8001a82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a86:	3b02      	subs	r3, #2
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	080065e0 	.word	0x080065e0
 8001a98:	080066c8 	.word	0x080066c8
 8001a9c:	080065f4 	.word	0x080065f4
 8001aa0:	08006620 	.word	0x08006620

08001aa4 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af04      	add	r7, sp, #16
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8001aae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2304      	movs	r3, #4
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fec8 	bl	8001858 <PN532_CallFunction>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ace:	d106      	bne.n	8001ade <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <PN532_GetFirmwareVersion+0x44>)
 8001ad6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	e000      	b.n	8001ae0 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	08006648 	.word	0x08006648

08001aec <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af04      	add	r7, sp, #16
 8001af2:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <PN532_SamConfiguration+0x40>)
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	4611      	mov	r1, r2
 8001afe:	8019      	strh	r1, [r3, #0]
 8001b00:	3302      	adds	r3, #2
 8001b02:	0c12      	lsrs	r2, r2, #16
 8001b04:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2114      	movs	r1, #20
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fe9b 	bl	8001858 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	08006664 	.word	0x08006664

08001b30 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b090      	sub	sp, #64	; 0x40
 8001b34:	af04      	add	r7, sp, #16
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8001b4c:	f107 0210 	add.w	r2, r7, #16
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	9302      	str	r3, [sp, #8]
 8001b54:	2302      	movs	r3, #2
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2313      	movs	r3, #19
 8001b60:	214a      	movs	r1, #74	; 0x4a
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7ff fe78 	bl	8001858 <PN532_CallFunction>
 8001b68:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	da02      	bge.n	8001b76 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	e02e      	b.n	8001bd4 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8001b76:	7c3b      	ldrb	r3, [r7, #16]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d006      	beq.n	8001b8a <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	4816      	ldr	r0, [pc, #88]	; (8001bdc <PN532_ReadPassiveTarget+0xac>)
 8001b82:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	e024      	b.n	8001bd4 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8001b8a:	7d7b      	ldrb	r3, [r7, #21]
 8001b8c:	2b07      	cmp	r3, #7
 8001b8e:	d906      	bls.n	8001b9e <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	4812      	ldr	r0, [pc, #72]	; (8001be0 <PN532_ReadPassiveTarget+0xb0>)
 8001b96:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	e01a      	b.n	8001bd4 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ba4:	e010      	b.n	8001bc8 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8001ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001baa:	1d9a      	adds	r2, r3, #6
 8001bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3230      	adds	r2, #48	; 0x30
 8001bb6:	443a      	add	r2, r7
 8001bb8:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001bbc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8001bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001bc8:	7d7b      	ldrb	r3, [r7, #21]
 8001bca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3e9      	bcc.n	8001ba6 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8001bd2:	7d7b      	ldrb	r3, [r7, #21]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3730      	adds	r7, #48	; 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	08006668 	.word	0x08006668
 8001be0:	08006688 	.word	0x08006688

08001be4 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2101      	movs	r1, #1
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <PN532_Reset+0x3c>)
 8001bee:	f000 ffa9 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001bf2:	2064      	movs	r0, #100	; 0x64
 8001bf4:	f000 fc60 	bl	80024b8 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4808      	ldr	r0, [pc, #32]	; (8001c20 <PN532_Reset+0x3c>)
 8001bfe:	f000 ffa1 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001c02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c06:	f000 fc57 	bl	80024b8 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4804      	ldr	r0, [pc, #16]	; (8001c20 <PN532_Reset+0x3c>)
 8001c10:	f000 ff98 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f000 fc4f 	bl	80024b8 <HAL_Delay>
    return PN532_STATUS_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40010c00 	.word	0x40010c00

08001c24 <PN532_Log>:

void PN532_Log(const char* log) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4803      	ldr	r0, [pc, #12]	; (8001c3c <PN532_Log+0x18>)
 8001c30:	f003 fa26 	bl	8005080 <iprintf>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	080066b0 	.word	0x080066b0

08001c40 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2110      	movs	r1, #16
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <spi_rw+0x48>)
 8001c52:	f000 ff77 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f000 fc2e 	bl	80024b8 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	220a      	movs	r2, #10
 8001c62:	9200      	str	r2, [sp, #0]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4808      	ldr	r0, [pc, #32]	; (8001c8c <spi_rw+0x4c>)
 8001c6a:	f001 fc16 	bl	800349a <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f000 fc22 	bl	80024b8 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2110      	movs	r1, #16
 8001c78:	4803      	ldr	r0, [pc, #12]	; (8001c88 <spi_rw+0x48>)
 8001c7a:	f000 ff63 	bl	8002b44 <HAL_GPIO_WritePin>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	20000084 	.word	0x20000084

08001c90 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8001c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c94:	b087      	sub	sp, #28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	807b      	strh	r3, [r7, #2]
 8001c9e:	466b      	mov	r3, sp
 8001ca0:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	1c59      	adds	r1, r3, #1
 8001ca6:	1e4b      	subs	r3, r1, #1
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	460a      	mov	r2, r1
 8001cac:	2300      	movs	r3, #0
 8001cae:	4690      	mov	r8, r2
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	2300      	movs	r3, #0
 8001cca:	4614      	mov	r4, r2
 8001ccc:	461d      	mov	r5, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	00eb      	lsls	r3, r5, #3
 8001cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cdc:	00e2      	lsls	r2, r4, #3
 8001cde:	460b      	mov	r3, r1
 8001ce0:	3307      	adds	r3, #7
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	ebad 0d03 	sub.w	sp, sp, r3
 8001cea:	466b      	mov	r3, sp
 8001cec:	3300      	adds	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8001cf6:	2005      	movs	r0, #5
 8001cf8:	f000 fbde 	bl	80024b8 <HAL_Delay>
    spi_rw(frame, count + 1);
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7ff ff9a 	bl	8001c40 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	75fb      	strb	r3, [r7, #23]
 8001d10:	e00a      	b.n	8001d28 <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	440b      	add	r3, r1
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	5c8a      	ldrb	r2, [r1, r2]
 8001d20:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	3301      	adds	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	887a      	ldrh	r2, [r7, #2]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d8ef      	bhi.n	8001d12 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	46b5      	mov	sp, r6
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001d40 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8001d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d44:	b087      	sub	sp, #28
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	807b      	strh	r3, [r7, #2]
 8001d4e:	466b      	mov	r3, sp
 8001d50:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	1c59      	adds	r1, r3, #1
 8001d56:	1e4b      	subs	r3, r1, #1
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4690      	mov	r8, r2
 8001d60:	4699      	mov	r9, r3
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d76:	460a      	mov	r2, r1
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4614      	mov	r4, r2
 8001d7c:	461d      	mov	r5, r3
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	00eb      	lsls	r3, r5, #3
 8001d88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8c:	00e2      	lsls	r2, r4, #3
 8001d8e:	460b      	mov	r3, r1
 8001d90:	3307      	adds	r3, #7
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	ebad 0d03 	sub.w	sp, sp, r3
 8001d9a:	466b      	mov	r3, sp
 8001d9c:	3300      	adds	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
 8001daa:	e00a      	b.n	8001dc2 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	441a      	add	r2, r3
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	3301      	adds	r3, #1
 8001db6:	7811      	ldrb	r1, [r2, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d8ef      	bhi.n	8001dac <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff ff32 	bl	8001c40 <spi_rw>
    return PN532_STATUS_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	46b5      	mov	sp, r6
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001dea <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8001df2:	2302      	movs	r3, #2
 8001df4:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8001df6:	f000 fb55 	bl	80024a4 <HAL_GetTick>
 8001dfa:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001dfc:	e010      	b.n	8001e20 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f000 fb5a 	bl	80024b8 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	2102      	movs	r1, #2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff18 	bl	8001c40 <spi_rw>
        if (status[1] == _SPI_READY) {
 8001e10:	7a7b      	ldrb	r3, [r7, #9]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <PN532_SPI_WaitReady+0x30>
            return true;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00b      	b.n	8001e32 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 8001e1a:	2005      	movs	r0, #5
 8001e1c:	f000 fb4c 	bl	80024b8 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8001e20:	f000 fb40 	bl	80024a4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8e6      	bhi.n	8001dfe <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8001e42:	2300      	movs	r3, #0
 8001e44:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8001e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4a:	f000 fb35 	bl	80024b8 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2110      	movs	r1, #16
 8001e52:	480a      	ldr	r0, [pc, #40]	; (8001e7c <PN532_SPI_Wakeup+0x40>)
 8001e54:	f000 fe76 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f000 fb2d 	bl	80024b8 <HAL_Delay>
    spi_rw(data, 1);
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff feec 	bl	8001c40 <spi_rw>
    HAL_Delay(1000);
 8001e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e6c:	f000 fb24 	bl	80024b8 <HAL_Delay>
    return PN532_STATUS_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40010800 	.word	0x40010800

08001e80 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <PN532_SPI_Init+0x3c>)
 8001e8c:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <PN532_SPI_Init+0x40>)
 8001e92:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <PN532_SPI_Init+0x44>)
 8001e98:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <PN532_SPI_Init+0x48>)
 8001e9e:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <PN532_SPI_Init+0x4c>)
 8001ea4:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <PN532_SPI_Init+0x50>)
 8001eaa:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	4798      	blx	r3
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	08001be5 	.word	0x08001be5
 8001ec0:	08001c91 	.word	0x08001c91
 8001ec4:	08001d41 	.word	0x08001d41
 8001ec8:	08001deb 	.word	0x08001deb
 8001ecc:	08001e3d 	.word	0x08001e3d
 8001ed0:	08001c25 	.word	0x08001c25

08001ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_MspInit+0x5c>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6193      	str	r3, [r2, #24]
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_MspInit+0x60>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_MspInit+0x60>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000

08001f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d12f      	bne.n	8001fb8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001f5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f88:	23a0      	movs	r3, #160	; 0xa0
 8001f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <HAL_SPI_MspInit+0x90>)
 8001f9c:	f000 fc4e 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fa0:	2340      	movs	r3, #64	; 0x40
 8001fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <HAL_SPI_MspInit+0x90>)
 8001fb4:	f000 fc42 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40013000 	.word	0x40013000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010800 	.word	0x40010800

08001fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_TIM_Base_MspInit+0x8c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d114      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 8001fe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe8:	6193      	str	r3, [r2, #24]
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2019      	movs	r0, #25
 8001ffc:	f000 fb6d 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002000:	2019      	movs	r0, #25
 8002002:	f000 fb86 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002006:	e022      	b.n	800204e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d10c      	bne.n	800202c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a11      	ldr	r2, [pc, #68]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	61d3      	str	r3, [r2, #28]
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
}
 800202a:	e010      	b.n	800204e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_TIM_Base_MspInit+0x94>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10b      	bne.n	800204e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	61d3      	str	r3, [r2, #28]
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_TIM_Base_MspInit+0x90>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
}
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40000800 	.word	0x40000800

08002064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_TIM_MspPostInit+0x5c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d118      	bne.n	80020b6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_TIM_MspPostInit+0x60>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_TIM_MspPostInit+0x60>)
 800208a:	f043 0308 	orr.w	r3, r3, #8
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_TIM_MspPostInit+0x60>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <HAL_TIM_MspPostInit+0x64>)
 80020b2:	f000 fbc3 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40000800 	.word	0x40000800
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010c00 	.word	0x40010c00

080020cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08c      	sub	sp, #48	; 0x30
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a45      	ldr	r2, [pc, #276]	; (80021fc <HAL_UART_MspInit+0x130>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d146      	bne.n	800217a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ec:	4b44      	ldr	r3, [pc, #272]	; (8002200 <HAL_UART_MspInit+0x134>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a43      	ldr	r2, [pc, #268]	; (8002200 <HAL_UART_MspInit+0x134>)
 80020f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_UART_MspInit+0x134>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <HAL_UART_MspInit+0x134>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800211c:	2340      	movs	r3, #64	; 0x40
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4835      	ldr	r0, [pc, #212]	; (8002204 <HAL_UART_MspInit+0x138>)
 8002130:	f000 fb84 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	482f      	ldr	r0, [pc, #188]	; (8002204 <HAL_UART_MspInit+0x138>)
 8002148:	f000 fb78 	bl	800283c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_UART_MspInit+0x13c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002162:	4a29      	ldr	r2, [pc, #164]	; (8002208 <HAL_UART_MspInit+0x13c>)
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002166:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2025      	movs	r0, #37	; 0x25
 800216e:	f000 fab4 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002172:	2025      	movs	r0, #37	; 0x25
 8002174:	f000 facd 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002178:	e03c      	b.n	80021f4 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a23      	ldr	r2, [pc, #140]	; (800220c <HAL_UART_MspInit+0x140>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d137      	bne.n	80021f4 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_UART_MspInit+0x134>)
 800218a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218e:	61d3      	str	r3, [r2, #28]
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_UART_MspInit+0x134>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a17      	ldr	r2, [pc, #92]	; (8002200 <HAL_UART_MspInit+0x134>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_UART_MspInit+0x134>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b4:	2304      	movs	r3, #4
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	4812      	ldr	r0, [pc, #72]	; (8002210 <HAL_UART_MspInit+0x144>)
 80021c8:	f000 fb38 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021cc:	2308      	movs	r3, #8
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	480c      	ldr	r0, [pc, #48]	; (8002210 <HAL_UART_MspInit+0x144>)
 80021e0:	f000 fb2c 	bl	800283c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2100      	movs	r1, #0
 80021e8:	2026      	movs	r0, #38	; 0x26
 80021ea:	f000 fa76 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ee:	2026      	movs	r0, #38	; 0x26
 80021f0:	f000 fa8f 	bl	8002712 <HAL_NVIC_EnableIRQ>
}
 80021f4:	bf00      	nop
 80021f6:	3730      	adds	r7, #48	; 0x30
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40013800 	.word	0x40013800
 8002200:	40021000 	.word	0x40021000
 8002204:	40010c00 	.word	0x40010c00
 8002208:	40010000 	.word	0x40010000
 800220c:	40004400 	.word	0x40004400
 8002210:	40010800 	.word	0x40010800

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <HardFault_Handler+0x4>

08002226 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <MemManage_Handler+0x4>

0800222c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <BusFault_Handler+0x4>

08002232 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <UsageFault_Handler+0x4>

08002238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002260:	f000 f90e 	bl	8002480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <TIM1_UP_IRQHandler+0x10>)
 800226e:	f001 fc1d 	bl	8003aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200000dc 	.word	0x200000dc

0800227c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <USART1_IRQHandler+0x10>)
 8002282:	f002 fafd 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000019c 	.word	0x2000019c

08002290 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <USART2_IRQHandler+0x10>)
 8002296:	f002 faf3 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200001dc 	.word	0x200001dc

080022a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e00a      	b.n	80022cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022b6:	f3af 8000 	nop.w
 80022ba:	4601      	mov	r1, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf0      	blt.n	80022b6 <_read+0x12>
	}

return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_close>:
	}
	return len;
}

int _close(int file)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	return -1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002304:	605a      	str	r2, [r3, #4]
	return 0;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <_isatty>:

int _isatty(int file)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	return 1;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
	return 0;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
	...

08002340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <SystemInit+0x5c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <SystemInit+0x5c>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <SystemInit+0x5c>)
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	4911      	ldr	r1, [pc, #68]	; (800239c <SystemInit+0x5c>)
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <SystemInit+0x60>)
 8002358:	4013      	ands	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <SystemInit+0x5c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <SystemInit+0x5c>)
 8002362:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <SystemInit+0x5c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <SystemInit+0x5c>)
 8002372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002376:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <SystemInit+0x5c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <SystemInit+0x5c>)
 800237e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002382:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SystemInit+0x5c>)
 8002386:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800238a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SystemInit+0x64>)
 800238e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002392:	609a      	str	r2, [r3, #8]
#endif 
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40021000 	.word	0x40021000
 80023a0:	f8ff0000 	.word	0xf8ff0000
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023aa:	e003      	b.n	80023b4 <LoopCopyDataInit>

080023ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023b2:	3104      	adds	r1, #4

080023b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023b4:	480a      	ldr	r0, [pc, #40]	; (80023e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023bc:	d3f6      	bcc.n	80023ac <CopyDataInit>
  ldr r2, =_sbss
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023c0:	e002      	b.n	80023c8 <LoopFillZerobss>

080023c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023c4:	f842 3b04 	str.w	r3, [r2], #4

080023c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023cc:	d3f9      	bcc.n	80023c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ce:	f7ff ffb7 	bl	8002340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d2:	f003 f81f 	bl	8005414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023d6:	f7fe f943 	bl	8000660 <main>
  bx lr
 80023da:	4770      	bx	lr
  ldr r3, =_sidata
 80023dc:	08006724 	.word	0x08006724
  ldr r0, =_sdata
 80023e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023e4:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80023e8:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80023ec:	20000814 	.word	0x20000814

080023f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023f0:	e7fe      	b.n	80023f0 <ADC1_2_IRQHandler>
	...

080023f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_Init+0x28>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_Init+0x28>)
 80023fe:	f043 0310 	orr.w	r3, r3, #16
 8002402:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002404:	2003      	movs	r0, #3
 8002406:	f000 f95d 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240a:	2000      	movs	r0, #0
 800240c:	f000 f808 	bl	8002420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002410:	f7ff fd60 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40022000 	.word	0x40022000

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x54>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_InitTick+0x58>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002436:	fbb3 f3f1 	udiv	r3, r3, r1
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f979 	bl	8002736 <HAL_SYSTICK_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00e      	b.n	800246c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d80a      	bhi.n	800246a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002454:	2200      	movs	r2, #0
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	f000 f93d 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002460:	4a06      	ldr	r2, [pc, #24]	; (800247c <HAL_InitTick+0x5c>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000000 	.word	0x20000000
 8002478:	20000008 	.word	0x20000008
 800247c:	20000004 	.word	0x20000004

08002480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_IncTick+0x1c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_IncTick+0x20>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a03      	ldr	r2, [pc, #12]	; (80024a0 <HAL_IncTick+0x20>)
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	20000008 	.word	0x20000008
 80024a0:	200006c0 	.word	0x200006c0

080024a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <HAL_GetTick+0x10>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	200006c0 	.word	0x200006c0

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffe0 	bl	80024a4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008

08002500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800252c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4906      	ldr	r1, [pc, #24]	; (8002598 <__NVIC_EnableIRQ+0x34>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	; (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	; (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002658:	f3bf 8f4f 	dsb	sy
}
 800265c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <__NVIC_SystemReset+0x24>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002666:	4904      	ldr	r1, [pc, #16]	; (8002678 <__NVIC_SystemReset+0x24>)
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_SystemReset+0x28>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800266e:	f3bf 8f4f 	dsb	sy
}
 8002672:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <__NVIC_SystemReset+0x20>
 8002678:	e000ed00 	.word	0xe000ed00
 800267c:	05fa0004 	.word	0x05fa0004

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff7a 	bl	800259c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff17 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff2c 	bl	8002548 <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff7a 	bl	80025f0 <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff49 	bl	800259c <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff1f 	bl	8002564 <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002732:	f7ff ff8f 	bl	8002654 <__NVIC_SystemReset>

08002736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff9e 	bl	8002680 <SysTick_Config>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002762:	2b02      	cmp	r3, #2
 8002764:	d005      	beq.n	8002772 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2204      	movs	r2, #4
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e051      	b.n	8002816 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 020e 	bic.w	r2, r2, #14
 8002780:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a22      	ldr	r2, [pc, #136]	; (8002820 <HAL_DMA_Abort_IT+0xd0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d029      	beq.n	80027f0 <HAL_DMA_Abort_IT+0xa0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a20      	ldr	r2, [pc, #128]	; (8002824 <HAL_DMA_Abort_IT+0xd4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d022      	beq.n	80027ec <HAL_DMA_Abort_IT+0x9c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <HAL_DMA_Abort_IT+0xd8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d01a      	beq.n	80027e6 <HAL_DMA_Abort_IT+0x96>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_DMA_Abort_IT+0xdc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d012      	beq.n	80027e0 <HAL_DMA_Abort_IT+0x90>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <HAL_DMA_Abort_IT+0xe0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00a      	beq.n	80027da <HAL_DMA_Abort_IT+0x8a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <HAL_DMA_Abort_IT+0xe4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d102      	bne.n	80027d4 <HAL_DMA_Abort_IT+0x84>
 80027ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027d2:	e00e      	b.n	80027f2 <HAL_DMA_Abort_IT+0xa2>
 80027d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d8:	e00b      	b.n	80027f2 <HAL_DMA_Abort_IT+0xa2>
 80027da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027de:	e008      	b.n	80027f2 <HAL_DMA_Abort_IT+0xa2>
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e4:	e005      	b.n	80027f2 <HAL_DMA_Abort_IT+0xa2>
 80027e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ea:	e002      	b.n	80027f2 <HAL_DMA_Abort_IT+0xa2>
 80027ec:	2310      	movs	r3, #16
 80027ee:	e000      	b.n	80027f2 <HAL_DMA_Abort_IT+0xa2>
 80027f0:	2301      	movs	r3, #1
 80027f2:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_DMA_Abort_IT+0xe8>)
 80027f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    } 
  }
  return status;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40020008 	.word	0x40020008
 8002824:	4002001c 	.word	0x4002001c
 8002828:	40020030 	.word	0x40020030
 800282c:	40020044 	.word	0x40020044
 8002830:	40020058 	.word	0x40020058
 8002834:	4002006c 	.word	0x4002006c
 8002838:	40020000 	.word	0x40020000

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b08b      	sub	sp, #44	; 0x2c
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284e:	e169      	b.n	8002b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002850:	2201      	movs	r2, #1
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	429a      	cmp	r2, r3
 800286a:	f040 8158 	bne.w	8002b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a9a      	ldr	r2, [pc, #616]	; (8002adc <HAL_GPIO_Init+0x2a0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d05e      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 8002878:	4a98      	ldr	r2, [pc, #608]	; (8002adc <HAL_GPIO_Init+0x2a0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d875      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 800287e:	4a98      	ldr	r2, [pc, #608]	; (8002ae0 <HAL_GPIO_Init+0x2a4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d058      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 8002884:	4a96      	ldr	r2, [pc, #600]	; (8002ae0 <HAL_GPIO_Init+0x2a4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d86f      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 800288a:	4a96      	ldr	r2, [pc, #600]	; (8002ae4 <HAL_GPIO_Init+0x2a8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d052      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 8002890:	4a94      	ldr	r2, [pc, #592]	; (8002ae4 <HAL_GPIO_Init+0x2a8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d869      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 8002896:	4a94      	ldr	r2, [pc, #592]	; (8002ae8 <HAL_GPIO_Init+0x2ac>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d04c      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 800289c:	4a92      	ldr	r2, [pc, #584]	; (8002ae8 <HAL_GPIO_Init+0x2ac>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d863      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 80028a2:	4a92      	ldr	r2, [pc, #584]	; (8002aec <HAL_GPIO_Init+0x2b0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d046      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
 80028a8:	4a90      	ldr	r2, [pc, #576]	; (8002aec <HAL_GPIO_Init+0x2b0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d85d      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 80028ae:	2b12      	cmp	r3, #18
 80028b0:	d82a      	bhi.n	8002908 <HAL_GPIO_Init+0xcc>
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d859      	bhi.n	800296a <HAL_GPIO_Init+0x12e>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_GPIO_Init+0x80>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	08002937 	.word	0x08002937
 80028c0:	08002911 	.word	0x08002911
 80028c4:	08002923 	.word	0x08002923
 80028c8:	08002965 	.word	0x08002965
 80028cc:	0800296b 	.word	0x0800296b
 80028d0:	0800296b 	.word	0x0800296b
 80028d4:	0800296b 	.word	0x0800296b
 80028d8:	0800296b 	.word	0x0800296b
 80028dc:	0800296b 	.word	0x0800296b
 80028e0:	0800296b 	.word	0x0800296b
 80028e4:	0800296b 	.word	0x0800296b
 80028e8:	0800296b 	.word	0x0800296b
 80028ec:	0800296b 	.word	0x0800296b
 80028f0:	0800296b 	.word	0x0800296b
 80028f4:	0800296b 	.word	0x0800296b
 80028f8:	0800296b 	.word	0x0800296b
 80028fc:	0800296b 	.word	0x0800296b
 8002900:	08002919 	.word	0x08002919
 8002904:	0800292d 	.word	0x0800292d
 8002908:	4a79      	ldr	r2, [pc, #484]	; (8002af0 <HAL_GPIO_Init+0x2b4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800290e:	e02c      	b.n	800296a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	623b      	str	r3, [r7, #32]
          break;
 8002916:	e029      	b.n	800296c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	3304      	adds	r3, #4
 800291e:	623b      	str	r3, [r7, #32]
          break;
 8002920:	e024      	b.n	800296c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	3308      	adds	r3, #8
 8002928:	623b      	str	r3, [r7, #32]
          break;
 800292a:	e01f      	b.n	800296c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	330c      	adds	r3, #12
 8002932:	623b      	str	r3, [r7, #32]
          break;
 8002934:	e01a      	b.n	800296c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800293e:	2304      	movs	r3, #4
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e013      	b.n	800296c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800294c:	2308      	movs	r3, #8
 800294e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	611a      	str	r2, [r3, #16]
          break;
 8002956:	e009      	b.n	800296c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002958:	2308      	movs	r3, #8
 800295a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	615a      	str	r2, [r3, #20]
          break;
 8002962:	e003      	b.n	800296c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x130>
          break;
 800296a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2bff      	cmp	r3, #255	; 0xff
 8002970:	d801      	bhi.n	8002976 <HAL_GPIO_Init+0x13a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	e001      	b.n	800297a <HAL_GPIO_Init+0x13e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2bff      	cmp	r3, #255	; 0xff
 8002980:	d802      	bhi.n	8002988 <HAL_GPIO_Init+0x14c>
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	e002      	b.n	800298e <HAL_GPIO_Init+0x152>
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	3b08      	subs	r3, #8
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	210f      	movs	r1, #15
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	6a39      	ldr	r1, [r7, #32]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	431a      	orrs	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80b1 	beq.w	8002b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029bc:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <HAL_GPIO_Init+0x2b8>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <HAL_GPIO_Init+0x2b8>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <HAL_GPIO_Init+0x2b8>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029d4:	4a48      	ldr	r2, [pc, #288]	; (8002af8 <HAL_GPIO_Init+0x2bc>)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	220f      	movs	r2, #15
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a40      	ldr	r2, [pc, #256]	; (8002afc <HAL_GPIO_Init+0x2c0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_GPIO_Init+0x1ec>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3f      	ldr	r2, [pc, #252]	; (8002b00 <HAL_GPIO_Init+0x2c4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00d      	beq.n	8002a24 <HAL_GPIO_Init+0x1e8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3e      	ldr	r2, [pc, #248]	; (8002b04 <HAL_GPIO_Init+0x2c8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d007      	beq.n	8002a20 <HAL_GPIO_Init+0x1e4>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3d      	ldr	r2, [pc, #244]	; (8002b08 <HAL_GPIO_Init+0x2cc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_GPIO_Init+0x1e0>
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e006      	b.n	8002a2a <HAL_GPIO_Init+0x1ee>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e004      	b.n	8002a2a <HAL_GPIO_Init+0x1ee>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e002      	b.n	8002a2a <HAL_GPIO_Init+0x1ee>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_GPIO_Init+0x1ee>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	f002 0203 	and.w	r2, r2, #3
 8002a30:	0092      	lsls	r2, r2, #2
 8002a32:	4093      	lsls	r3, r2
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a3a:	492f      	ldr	r1, [pc, #188]	; (8002af8 <HAL_GPIO_Init+0x2bc>)
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	492c      	ldr	r1, [pc, #176]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a62:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	4928      	ldr	r1, [pc, #160]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d006      	beq.n	8002a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4922      	ldr	r1, [pc, #136]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	491e      	ldr	r1, [pc, #120]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	4918      	ldr	r1, [pc, #96]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	4914      	ldr	r1, [pc, #80]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d021      	beq.n	8002b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	490e      	ldr	r1, [pc, #56]	; (8002b0c <HAL_GPIO_Init+0x2d0>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60cb      	str	r3, [r1, #12]
 8002ad8:	e021      	b.n	8002b1e <HAL_GPIO_Init+0x2e2>
 8002ada:	bf00      	nop
 8002adc:	10320000 	.word	0x10320000
 8002ae0:	10310000 	.word	0x10310000
 8002ae4:	10220000 	.word	0x10220000
 8002ae8:	10210000 	.word	0x10210000
 8002aec:	10120000 	.word	0x10120000
 8002af0:	10110000 	.word	0x10110000
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40010800 	.word	0x40010800
 8002b00:	40010c00 	.word	0x40010c00
 8002b04:	40011000 	.word	0x40011000
 8002b08:	40011400 	.word	0x40011400
 8002b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	4909      	ldr	r1, [pc, #36]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	3301      	adds	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f47f ae8e 	bne.w	8002850 <HAL_GPIO_Init+0x14>
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	372c      	adds	r7, #44	; 0x2c
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b60:	e003      	b.n	8002b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	041a      	lsls	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	611a      	str	r2, [r3, #16]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002b92:	e002      	b.n	8002b9a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b94:	887a      	ldrh	r2, [r7, #2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e272      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8087 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d00c      	beq.n	8002bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d112      	bne.n	8002c02 <HAL_RCC_OscConfig+0x5e>
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d10b      	bne.n	8002c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bea:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d06c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x12c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d168      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e24c      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x76>
 8002c0c:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7f      	ldr	r2, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e02e      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x98>
 8002c22:	4b7b      	ldr	r3, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a7a      	ldr	r2, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b78      	ldr	r3, [pc, #480]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a77      	ldr	r2, [pc, #476]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0xbc>
 8002c46:	4b72      	ldr	r3, [pc, #456]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a71      	ldr	r2, [pc, #452]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6e      	ldr	r2, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c60:	4b6b      	ldr	r3, [pc, #428]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6a      	ldr	r2, [pc, #424]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a67      	ldr	r2, [pc, #412]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff fc10 	bl	80024a4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff fc0c 	bl	80024a4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e200      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xe4>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fbfc 	bl	80024a4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff fbf8 	bl	80024a4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1ec      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x10c>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cde:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x18c>
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x176>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1c0      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4939      	ldr	r1, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7ff fbb1 	bl	80024a4 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7ff fbad 	bl	80024a4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1a1      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4927      	ldr	r1, [pc, #156]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff fb90 	bl	80024a4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7ff fb8c 	bl	80024a4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e180      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03a      	beq.n	8002e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d019      	beq.n	8002dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc0:	f7ff fb70 	bl	80024a4 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7ff fb6c 	bl	80024a4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e160      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f000 fad8 	bl	800339c <RCC_Delay>
 8002dec:	e01c      	b.n	8002e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_OscConfig+0x274>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df4:	f7ff fb56 	bl	80024a4 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfa:	e00f      	b.n	8002e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7ff fb52 	bl	80024a4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d908      	bls.n	8002e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e146      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	42420000 	.word	0x42420000
 8002e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b92      	ldr	r3, [pc, #584]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e9      	bne.n	8002dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80a6 	beq.w	8002f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b8b      	ldr	r3, [pc, #556]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4a87      	ldr	r2, [pc, #540]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	61d3      	str	r3, [r2, #28]
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	4b82      	ldr	r3, [pc, #520]	; (800306c <HAL_RCC_OscConfig+0x4c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x4c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7e      	ldr	r2, [pc, #504]	; (800306c <HAL_RCC_OscConfig+0x4c8>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7ff fb13 	bl	80024a4 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7ff fb0f 	bl	80024a4 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e103      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	4b75      	ldr	r3, [pc, #468]	; (800306c <HAL_RCC_OscConfig+0x4c8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x312>
 8002ea8:	4b6f      	ldr	r3, [pc, #444]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4a6e      	ldr	r2, [pc, #440]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	e02d      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x334>
 8002ebe:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a69      	ldr	r2, [pc, #420]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4a66      	ldr	r2, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	e01c      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x356>
 8002ee0:	4b61      	ldr	r3, [pc, #388]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a60      	ldr	r2, [pc, #384]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	4b5e      	ldr	r3, [pc, #376]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6213      	str	r3, [r2, #32]
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a5a      	ldr	r2, [pc, #360]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4b58      	ldr	r3, [pc, #352]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a57      	ldr	r2, [pc, #348]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d015      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7ff fac3 	bl	80024a4 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7ff fabf 	bl	80024a4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0b1      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCC_OscConfig+0x37e>
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7ff faad 	bl	80024a4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7ff faa9 	bl	80024a4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e09b      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	4b40      	ldr	r3, [pc, #256]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a3b      	ldr	r2, [pc, #236]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8087 	beq.w	800309a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d061      	beq.n	800305c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d146      	bne.n	800302e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <HAL_RCC_OscConfig+0x4cc>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7ff fa7d 	bl	80024a4 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fae:	f7ff fa79 	bl	80024a4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e06d      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4921      	ldr	r1, [pc, #132]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a19      	ldr	r1, [r3, #32]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	491b      	ldr	r1, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x4cc>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7ff fa4d 	bl	80024a4 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300e:	f7ff fa49 	bl	80024a4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e03d      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x46a>
 800302c:	e035      	b.n	800309a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_RCC_OscConfig+0x4cc>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7ff fa36 	bl	80024a4 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7ff fa32 	bl	80024a4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e026      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x498>
 800305a:	e01e      	b.n	800309a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e019      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
 8003068:	40021000 	.word	0x40021000
 800306c:	40007000 	.word	0x40007000
 8003070:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_OscConfig+0x500>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	429a      	cmp	r2, r3
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000

080030a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0d0      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d910      	bls.n	80030ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b67      	ldr	r3, [pc, #412]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 0207 	bic.w	r2, r3, #7
 80030d2:	4965      	ldr	r1, [pc, #404]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0b8      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003104:	4b59      	ldr	r3, [pc, #356]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800310e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b50      	ldr	r3, [pc, #320]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	494d      	ldr	r1, [pc, #308]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d040      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d115      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e07f      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e073      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06b      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f023 0203 	bic.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4936      	ldr	r1, [pc, #216]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003198:	f7ff f984 	bl	80024a4 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7ff f980 	bl	80024a4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e053      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 020c 	and.w	r2, r3, #12
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d1eb      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d210      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4922      	ldr	r1, [pc, #136]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e032      	b.n	800325e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4916      	ldr	r1, [pc, #88]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	490e      	ldr	r1, [pc, #56]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003236:	f000 f821 	bl	800327c <HAL_RCC_GetSysClockFreq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	490a      	ldr	r1, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	4a09      	ldr	r2, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1cc>)
 8003250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1d0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f8e2 	bl	8002420 <HAL_InitTick>

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40022000 	.word	0x40022000
 800326c:	40021000 	.word	0x40021000
 8003270:	080066d0 	.word	0x080066d0
 8003274:	20000000 	.word	0x20000000
 8003278:	20000004 	.word	0x20000004

0800327c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800327c:	b490      	push	{r4, r7}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_GetSysClockFreq+0xac>)
 8003284:	1d3c      	adds	r4, r7, #4
 8003286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800328c:	f240 2301 	movw	r3, #513	; 0x201
 8003290:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a6:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_RCC_GetSysClockFreq+0xb0>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x40>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x46>
 80032ba:	e02b      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032be:	623b      	str	r3, [r7, #32]
      break;
 80032c0:	e02b      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	3328      	adds	r3, #40	; 0x28
 80032cc:	443b      	add	r3, r7
 80032ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d012      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0c5b      	lsrs	r3, r3, #17
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	3328      	adds	r3, #40	; 0x28
 80032ea:	443b      	add	r3, r7
 80032ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032f6:	fb03 f202 	mul.w	r2, r3, r2
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	e004      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	623b      	str	r3, [r7, #32]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003316:	623b      	str	r3, [r7, #32]
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	6a3b      	ldr	r3, [r7, #32]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bc90      	pop	{r4, r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	080066b8 	.word	0x080066b8
 800332c:	40021000 	.word	0x40021000
 8003330:	007a1200 	.word	0x007a1200
 8003334:	003d0900 	.word	0x003d0900

08003338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <HAL_RCC_GetHCLKFreq+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	20000000 	.word	0x20000000

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003350:	f7ff fff2 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4903      	ldr	r1, [pc, #12]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	080066e0 	.word	0x080066e0

08003374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003378:	f7ff ffde 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	0adb      	lsrs	r3, r3, #11
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4903      	ldr	r1, [pc, #12]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	080066e0 	.word	0x080066e0

0800339c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <RCC_Delay+0x34>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <RCC_Delay+0x38>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0a5b      	lsrs	r3, r3, #9
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b8:	bf00      	nop
  }
  while (Delay --);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <RCC_Delay+0x1c>
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	20000000 	.word	0x20000000
 80033d4:	10624dd3 	.word	0x10624dd3

080033d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e053      	b.n	8003492 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fe fd97 	bl	8001f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003420:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	ea42 0103 	orr.w	r1, r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	0c1a      	lsrs	r2, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f002 0204 	and.w	r2, r2, #4
 8003470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08c      	sub	sp, #48	; 0x30
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_SPI_TransmitReceive+0x26>
 80034bc:	2302      	movs	r3, #2
 80034be:	e18a      	b.n	80037d6 <HAL_SPI_TransmitReceive+0x33c>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034c8:	f7fe ffec 	bl	80024a4 <HAL_GetTick>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d00f      	beq.n	800350a <HAL_SPI_TransmitReceive+0x70>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f0:	d107      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x68>
 80034fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d003      	beq.n	800350a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003502:	2302      	movs	r3, #2
 8003504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003508:	e15b      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_SPI_TransmitReceive+0x82>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <HAL_SPI_TransmitReceive+0x82>
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003522:	e14e      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b04      	cmp	r3, #4
 800352e:	d003      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2205      	movs	r2, #5
 8003534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	887a      	ldrh	r2, [r7, #2]
 800354e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	887a      	ldrh	r2, [r7, #2]
 800355a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d007      	beq.n	800358c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800358a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003594:	d178      	bne.n	8003688 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x10a>
 800359e:	8b7b      	ldrh	r3, [r7, #26]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d166      	bne.n	8003672 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c8:	e053      	b.n	8003672 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d11b      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x176>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x176>
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d113      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d119      	bne.n	8003652 <HAL_SPI_TransmitReceive+0x1b8>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d014      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	b292      	uxth	r2, r2
 8003634:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	1c9a      	adds	r2, r3, #2
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800364e:	2301      	movs	r3, #1
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003652:	f7fe ff27 	bl	80024a4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800365e:	429a      	cmp	r2, r3
 8003660:	d807      	bhi.n	8003672 <HAL_SPI_TransmitReceive+0x1d8>
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d003      	beq.n	8003672 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003670:	e0a7      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1a6      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x130>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1a1      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x130>
 8003686:	e07c      	b.n	8003782 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_SPI_TransmitReceive+0x1fc>
 8003690:	8b7b      	ldrh	r3, [r7, #26]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d16b      	bne.n	800376e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036bc:	e057      	b.n	800376e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d11c      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x26c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d017      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x26c>
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d114      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	7812      	ldrb	r2, [r2, #0]
 80036e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d119      	bne.n	8003748 <HAL_SPI_TransmitReceive+0x2ae>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d014      	beq.n	8003748 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003744:	2301      	movs	r3, #1
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003748:	f7fe feac 	bl	80024a4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003754:	429a      	cmp	r2, r3
 8003756:	d803      	bhi.n	8003760 <HAL_SPI_TransmitReceive+0x2c6>
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d102      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x2cc>
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800376c:	e029      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1a2      	bne.n	80036be <HAL_SPI_TransmitReceive+0x224>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d19d      	bne.n	80036be <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f893 	bl	80038b2 <SPI_EndRxTxTransaction>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800379e:	e010      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	e000      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3730      	adds	r7, #48	; 0x30
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ee:	e04c      	b.n	800388a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d048      	beq.n	800388a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80037f8:	f7fe fe54 	bl	80024a4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d902      	bls.n	800380e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d13d      	bne.n	800388a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800381c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003826:	d111      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003830:	d004      	beq.n	800383c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d107      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d10f      	bne.n	8003876 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003874:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e00f      	b.n	80038aa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4013      	ands	r3, r2
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	bf0c      	ite	eq
 800389a:	2301      	moveq	r3, #1
 800389c:	2300      	movne	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1a3      	bne.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af02      	add	r7, sp, #8
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff ff88 	bl	80037de <SPI_WaitFlagStateUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e000      	b.n	80038e6 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e01d      	b.n	800393c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fe fb59 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 fb73 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	f241 1311 	movw	r3, #4369	; 0x1111
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10f      	bne.n	8003984 <HAL_TIM_Base_Stop+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	f240 4344 	movw	r3, #1092	; 0x444
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_TIM_Base_Stop+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d007      	beq.n	80039d2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e01d      	b.n	8003a2c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f815 	bl	8003a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f000 fafb 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2201      	movs	r2, #1
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fd5c 	bl	8004518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <HAL_TIM_PWM_Start+0x60>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d107      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	d007      	beq.n	8003a9c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40012c00 	.word	0x40012c00

08003aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0202 	mvn.w	r2, #2
 8003ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa77 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa6a 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa79 	bl	8003ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0204 	mvn.w	r2, #4
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa4d 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa40 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fa4f 	bl	8003ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa23 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa16 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa25 	bl	8003ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0210 	mvn.w	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9f9 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9ec 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9fb 	bl	8003ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0201 	mvn.w	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fc fcb6 	bl	800059c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fccf 	bl	80045fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9bf 	bl	8004006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0220 	mvn.w	r2, #32
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fc9a 	bl	80045e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0b4      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	f200 809f 	bhi.w	8003e2c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003e2d 	.word	0x08003e2d
 8003cfc:	08003e2d 	.word	0x08003e2d
 8003d00:	08003e2d 	.word	0x08003e2d
 8003d04:	08003d69 	.word	0x08003d69
 8003d08:	08003e2d 	.word	0x08003e2d
 8003d0c:	08003e2d 	.word	0x08003e2d
 8003d10:	08003e2d 	.word	0x08003e2d
 8003d14:	08003dab 	.word	0x08003dab
 8003d18:	08003e2d 	.word	0x08003e2d
 8003d1c:	08003e2d 	.word	0x08003e2d
 8003d20:	08003e2d 	.word	0x08003e2d
 8003d24:	08003deb 	.word	0x08003deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f9d4 	bl	80040dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6999      	ldr	r1, [r3, #24]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	619a      	str	r2, [r3, #24]
      break;
 8003d66:	e062      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fa1a 	bl	80041a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6999      	ldr	r1, [r3, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
      break;
 8003da8:	e041      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fa63 	bl	800427c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0208 	orr.w	r2, r2, #8
 8003dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0204 	bic.w	r2, r2, #4
 8003dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	61da      	str	r2, [r3, #28]
      break;
 8003de8:	e021      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 faad 	bl	8004350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69d9      	ldr	r1, [r3, #28]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	021a      	lsls	r2, r3, #8
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	61da      	str	r2, [r3, #28]
      break;
 8003e2a:	e000      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_ConfigClockSource+0x18>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0b3      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x180>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e98:	d03e      	beq.n	8003f18 <HAL_TIM_ConfigClockSource+0xd0>
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9e:	f200 8087 	bhi.w	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	f000 8085 	beq.w	8003fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d87f      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d01a      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0xa2>
 8003eb4:	2b70      	cmp	r3, #112	; 0x70
 8003eb6:	d87b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d050      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x116>
 8003ebc:	2b60      	cmp	r3, #96	; 0x60
 8003ebe:	d877      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d03c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xf6>
 8003ec4:	2b50      	cmp	r3, #80	; 0x50
 8003ec6:	d873      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d058      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x136>
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d86f      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d064      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x156>
 8003ed4:	2b30      	cmp	r3, #48	; 0x30
 8003ed6:	d86b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d060      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x156>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d867      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d05c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x156>
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d05a      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ee8:	e062      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f000 faee 	bl	80044da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	609a      	str	r2, [r3, #8]
      break;
 8003f16:	e04e      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6899      	ldr	r1, [r3, #8]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f000 fad7 	bl	80044da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f3a:	609a      	str	r2, [r3, #8]
      break;
 8003f3c:	e03b      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 fa4e 	bl	80043ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2150      	movs	r1, #80	; 0x50
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 faa5 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e02b      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 fa6c 	bl	8004448 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2160      	movs	r1, #96	; 0x60
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fa95 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e01b      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 fa2e 	bl	80043ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2140      	movs	r1, #64	; 0x40
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fa85 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e00b      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f000 fa7c 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <TIM_Base_SetConfig+0xb8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00b      	beq.n	8004048 <TIM_Base_SetConfig+0x30>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d007      	beq.n	8004048 <TIM_Base_SetConfig+0x30>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <TIM_Base_SetConfig+0xbc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_Base_SetConfig+0x30>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <TIM_Base_SetConfig+0xc0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d108      	bne.n	800405a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <TIM_Base_SetConfig+0xb8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0x62>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0x62>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <TIM_Base_SetConfig+0xbc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0x62>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <TIM_Base_SetConfig+0xc0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <TIM_Base_SetConfig+0xb8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d103      	bne.n	80040c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	615a      	str	r2, [r3, #20]
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800

080040dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f023 0201 	bic.w	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f023 0302 	bic.w	r3, r3, #2
 8004124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <TIM_OC1_SetConfig+0xc8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10c      	bne.n	8004152 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0308 	bic.w	r3, r3, #8
 800413e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 0304 	bic.w	r3, r3, #4
 8004150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <TIM_OC1_SetConfig+0xc8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d111      	bne.n	800417e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00

080041a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f023 0210 	bic.w	r2, r3, #16
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 0320 	bic.w	r3, r3, #32
 80041f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <TIM_OC2_SetConfig+0xd0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d10d      	bne.n	8004224 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800420e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a14      	ldr	r2, [pc, #80]	; (8004278 <TIM_OC2_SetConfig+0xd0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d113      	bne.n	8004254 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800423a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	40012c00 	.word	0x40012c00

0800427c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <TIM_OC3_SetConfig+0xd0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10d      	bne.n	80042f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <TIM_OC3_SetConfig+0xd0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d113      	bne.n	8004326 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800430c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	621a      	str	r2, [r3, #32]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40012c00 	.word	0x40012c00

08004350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800439a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	031b      	lsls	r3, r3, #12
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <TIM_OC4_SetConfig+0x98>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d109      	bne.n	80043c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	40012c00 	.word	0x40012c00

080043ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f023 0201 	bic.w	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f023 030a 	bic.w	r3, r3, #10
 8004428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f023 0210 	bic.w	r2, r3, #16
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004472:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	031b      	lsls	r3, r3, #12
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004484:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f043 0307 	orr.w	r3, r3, #7
 80044c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044da:	b480      	push	{r7}
 80044dc:	b087      	sub	sp, #28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	021a      	lsls	r2, r3, #8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4313      	orrs	r3, r2
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	609a      	str	r2, [r3, #8]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2201      	movs	r2, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	43db      	mvns	r3, r3
 800453a:	401a      	ands	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004574:	2302      	movs	r3, #2
 8004576:	e032      	b.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e03f      	b.n	800469e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fd fd4a 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	; 0x24
 800463c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb8b 	bl	8004d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b088      	sub	sp, #32
 80046aa:	af02      	add	r7, sp, #8
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	f040 8083 	bne.w	80047ce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Transmit+0x2e>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e07b      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Transmit+0x40>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e074      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2221      	movs	r2, #33	; 0x21
 80046f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046fc:	f7fd fed2 	bl	80024a4 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800470e:	e042      	b.n	8004796 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d122      	bne.n	800476e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f9b0 	bl	8004a98 <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e046      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004754:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	3302      	adds	r3, #2
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	e017      	b.n	8004796 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3301      	adds	r3, #1
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	e013      	b.n	8004796 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	2180      	movs	r1, #128	; 0x80
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f98d 	bl	8004a98 <UART_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e023      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	60ba      	str	r2, [r7, #8]
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1b7      	bne.n	8004710 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2200      	movs	r2, #0
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f974 	bl	8004a98 <UART_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00a      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d140      	bne.n	8004874 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_UART_Receive_IT+0x26>
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e039      	b.n	8004876 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_UART_Receive_IT+0x38>
 800480c:	2302      	movs	r3, #2
 800480e:	e032      	b.n	8004876 <HAL_UART_Receive_IT+0x9e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2222      	movs	r2, #34	; 0x22
 8004834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0220 	orr.w	r2, r2, #32
 800486e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10d      	bne.n	80048d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_UART_IRQHandler+0x52>
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9cc 	bl	8004c68 <UART_Receive_IT>
      return;
 80048d0:	e0cb      	b.n	8004a6a <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80ab 	beq.w	8004a30 <HAL_UART_IRQHandler+0x1b0>
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <HAL_UART_IRQHandler+0x70>
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80a0 	beq.w	8004a30 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_UART_IRQHandler+0x90>
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	f043 0201 	orr.w	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_UART_IRQHandler+0xb0>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	f043 0202 	orr.w	r2, r3, #2
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_UART_IRQHandler+0xd0>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	f043 0204 	orr.w	r2, r3, #4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_UART_IRQHandler+0xf0>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	f043 0208 	orr.w	r2, r3, #8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d077      	beq.n	8004a68 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_UART_IRQHandler+0x112>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f96b 	bl	8004c68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <HAL_UART_IRQHandler+0x13a>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d031      	beq.n	8004a1e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8b6 	bl	8004b2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d023      	beq.n	8004a16 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d013      	beq.n	8004a0e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ea:	4a21      	ldr	r2, [pc, #132]	; (8004a70 <HAL_UART_IRQHandler+0x1f0>)
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd feac 	bl	8002750 <HAL_DMA_Abort_IT>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e00e      	b.n	8004a2c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f839 	bl	8004a86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e00a      	b.n	8004a2c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f835 	bl	8004a86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	e006      	b.n	8004a2c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f831 	bl	8004a86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a2a:	e01d      	b.n	8004a68 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	bf00      	nop
    return;
 8004a2e:	e01b      	b.n	8004a68 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_UART_IRQHandler+0x1cc>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f8a2 	bl	8004b8e <UART_Transmit_IT>
    return;
 8004a4a:	e00e      	b.n	8004a6a <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1ea>
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f8e9 	bl	8004c38 <UART_EndTransmit_IT>
    return;
 8004a66:	e000      	b.n	8004a6a <HAL_UART_IRQHandler+0x1ea>
    return;
 8004a68:	bf00      	nop
  }
}
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	08004b67 	.word	0x08004b67

08004a74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa8:	e02c      	b.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d028      	beq.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab8:	f7fd fcf4 	bl	80024a4 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d21d      	bcs.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ad6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e00f      	b.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d0c3      	beq.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695a      	ldr	r2, [r3, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff ff80 	bl	8004a86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b21      	cmp	r3, #33	; 0x21
 8004ba0:	d144      	bne.n	8004c2c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	d11a      	bne.n	8004be2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d105      	bne.n	8004bd6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	1c9a      	adds	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	621a      	str	r2, [r3, #32]
 8004bd4:	e00e      	b.n	8004bf4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	621a      	str	r2, [r3, #32]
 8004be0:	e008      	b.n	8004bf4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6211      	str	r1, [r2, #32]
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4619      	mov	r1, r3
 8004c02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10f      	bne.n	8004c28 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e000      	b.n	8004c2e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ff0b 	bl	8004a74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b22      	cmp	r3, #34	; 0x22
 8004c7a:	d171      	bne.n	8004d60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c84:	d123      	bne.n	8004cce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10e      	bne.n	8004cb2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb0:	e029      	b.n	8004d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
 8004ccc:	e01b      	b.n	8004d06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6858      	ldr	r0, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	1c59      	adds	r1, r3, #1
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6291      	str	r1, [r2, #40]	; 0x28
 8004ce6:	b2c2      	uxtb	r2, r0
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	e00c      	b.n	8004d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	1c58      	adds	r0, r3, #1
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	6288      	str	r0, [r1, #40]	; 0x28
 8004cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4619      	mov	r1, r3
 8004d14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d120      	bne.n	8004d5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0220 	bic.w	r2, r2, #32
 8004d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fb fbca 	bl	80004ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e002      	b.n	8004d62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004da6:	f023 030c 	bic.w	r3, r3, #12
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a52      	ldr	r2, [pc, #328]	; (8004f18 <UART_SetConfig+0x1ac>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d14e      	bne.n	8004e72 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004dd4:	f7fe face 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8004dd8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009a      	lsls	r2, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	4a4a      	ldr	r2, [pc, #296]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	0119      	lsls	r1, r3, #4
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e10:	4b42      	ldr	r3, [pc, #264]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004e12:	fba3 0302 	umull	r0, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2064      	movs	r0, #100	; 0x64
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	3332      	adds	r3, #50	; 0x32
 8004e24:	4a3d      	ldr	r2, [pc, #244]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e30:	4419      	add	r1, r3
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e48:	4b34      	ldr	r3, [pc, #208]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2064      	movs	r0, #100	; 0x64
 8004e52:	fb00 f303 	mul.w	r3, r0, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004e70:	e04d      	b.n	8004f0e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e72:	f7fe fa6b 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8004e76:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009a      	lsls	r2, r3, #2
 8004e82:	441a      	add	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	0119      	lsls	r1, r3, #4
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009a      	lsls	r2, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eae:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004eb0:	fba3 0302 	umull	r0, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2064      	movs	r0, #100	; 0x64
 8004eb8:	fb00 f303 	mul.w	r3, r0, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ece:	4419      	add	r1, r3
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009a      	lsls	r2, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004ee8:	fba3 0302 	umull	r0, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2064      	movs	r0, #100	; 0x64
 8004ef0:	fb00 f303 	mul.w	r3, r0, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	3332      	adds	r3, #50	; 0x32
 8004efa:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <UART_SetConfig+0x1b0>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f003 020f 	and.w	r2, r3, #15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40013800 	.word	0x40013800
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <std>:
 8004f20:	2300      	movs	r3, #0
 8004f22:	b510      	push	{r4, lr}
 8004f24:	4604      	mov	r4, r0
 8004f26:	e9c0 3300 	strd	r3, r3, [r0]
 8004f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f2e:	6083      	str	r3, [r0, #8]
 8004f30:	8181      	strh	r1, [r0, #12]
 8004f32:	6643      	str	r3, [r0, #100]	; 0x64
 8004f34:	81c2      	strh	r2, [r0, #14]
 8004f36:	6183      	str	r3, [r0, #24]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	305c      	adds	r0, #92	; 0x5c
 8004f3e:	f000 fa05 	bl	800534c <memset>
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <std+0x38>)
 8004f44:	6224      	str	r4, [r4, #32]
 8004f46:	6263      	str	r3, [r4, #36]	; 0x24
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <std+0x3c>)
 8004f4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <std+0x40>)
 8004f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <std+0x44>)
 8004f52:	6323      	str	r3, [r4, #48]	; 0x30
 8004f54:	bd10      	pop	{r4, pc}
 8004f56:	bf00      	nop
 8004f58:	0800519d 	.word	0x0800519d
 8004f5c:	080051bf 	.word	0x080051bf
 8004f60:	080051f7 	.word	0x080051f7
 8004f64:	0800521b 	.word	0x0800521b

08004f68 <stdio_exit_handler>:
 8004f68:	4a02      	ldr	r2, [pc, #8]	; (8004f74 <stdio_exit_handler+0xc>)
 8004f6a:	4903      	ldr	r1, [pc, #12]	; (8004f78 <stdio_exit_handler+0x10>)
 8004f6c:	4803      	ldr	r0, [pc, #12]	; (8004f7c <stdio_exit_handler+0x14>)
 8004f6e:	f000 b869 	b.w	8005044 <_fwalk_sglue>
 8004f72:	bf00      	nop
 8004f74:	2000000c 	.word	0x2000000c
 8004f78:	08005fa9 	.word	0x08005fa9
 8004f7c:	20000018 	.word	0x20000018

08004f80 <cleanup_stdio>:
 8004f80:	6841      	ldr	r1, [r0, #4]
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <cleanup_stdio+0x34>)
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4299      	cmp	r1, r3
 8004f88:	4604      	mov	r4, r0
 8004f8a:	d001      	beq.n	8004f90 <cleanup_stdio+0x10>
 8004f8c:	f001 f80c 	bl	8005fa8 <_fflush_r>
 8004f90:	68a1      	ldr	r1, [r4, #8]
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <cleanup_stdio+0x38>)
 8004f94:	4299      	cmp	r1, r3
 8004f96:	d002      	beq.n	8004f9e <cleanup_stdio+0x1e>
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f001 f805 	bl	8005fa8 <_fflush_r>
 8004f9e:	68e1      	ldr	r1, [r4, #12]
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <cleanup_stdio+0x3c>)
 8004fa2:	4299      	cmp	r1, r3
 8004fa4:	d004      	beq.n	8004fb0 <cleanup_stdio+0x30>
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fac:	f000 bffc 	b.w	8005fa8 <_fflush_r>
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200006c4 	.word	0x200006c4
 8004fb8:	2000072c 	.word	0x2000072c
 8004fbc:	20000794 	.word	0x20000794

08004fc0 <global_stdio_init.part.0>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <global_stdio_init.part.0+0x30>)
 8004fc4:	4c0b      	ldr	r4, [pc, #44]	; (8004ff4 <global_stdio_init.part.0+0x34>)
 8004fc6:	4a0c      	ldr	r2, [pc, #48]	; (8004ff8 <global_stdio_init.part.0+0x38>)
 8004fc8:	4620      	mov	r0, r4
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	2104      	movs	r1, #4
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f7ff ffa6 	bl	8004f20 <std>
 8004fd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004fd8:	2201      	movs	r2, #1
 8004fda:	2109      	movs	r1, #9
 8004fdc:	f7ff ffa0 	bl	8004f20 <std>
 8004fe0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fea:	2112      	movs	r1, #18
 8004fec:	f7ff bf98 	b.w	8004f20 <std>
 8004ff0:	200007fc 	.word	0x200007fc
 8004ff4:	200006c4 	.word	0x200006c4
 8004ff8:	08004f69 	.word	0x08004f69

08004ffc <__sfp_lock_acquire>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	; (8005004 <__sfp_lock_acquire+0x8>)
 8004ffe:	f000 ba2d 	b.w	800545c <__retarget_lock_acquire_recursive>
 8005002:	bf00      	nop
 8005004:	20000805 	.word	0x20000805

08005008 <__sfp_lock_release>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__sfp_lock_release+0x8>)
 800500a:	f000 ba28 	b.w	800545e <__retarget_lock_release_recursive>
 800500e:	bf00      	nop
 8005010:	20000805 	.word	0x20000805

08005014 <__sinit>:
 8005014:	b510      	push	{r4, lr}
 8005016:	4604      	mov	r4, r0
 8005018:	f7ff fff0 	bl	8004ffc <__sfp_lock_acquire>
 800501c:	6a23      	ldr	r3, [r4, #32]
 800501e:	b11b      	cbz	r3, 8005028 <__sinit+0x14>
 8005020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005024:	f7ff bff0 	b.w	8005008 <__sfp_lock_release>
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <__sinit+0x28>)
 800502a:	6223      	str	r3, [r4, #32]
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <__sinit+0x2c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f5      	bne.n	8005020 <__sinit+0xc>
 8005034:	f7ff ffc4 	bl	8004fc0 <global_stdio_init.part.0>
 8005038:	e7f2      	b.n	8005020 <__sinit+0xc>
 800503a:	bf00      	nop
 800503c:	08004f81 	.word	0x08004f81
 8005040:	200007fc 	.word	0x200007fc

08005044 <_fwalk_sglue>:
 8005044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005048:	4607      	mov	r7, r0
 800504a:	4688      	mov	r8, r1
 800504c:	4614      	mov	r4, r2
 800504e:	2600      	movs	r6, #0
 8005050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005054:	f1b9 0901 	subs.w	r9, r9, #1
 8005058:	d505      	bpl.n	8005066 <_fwalk_sglue+0x22>
 800505a:	6824      	ldr	r4, [r4, #0]
 800505c:	2c00      	cmp	r4, #0
 800505e:	d1f7      	bne.n	8005050 <_fwalk_sglue+0xc>
 8005060:	4630      	mov	r0, r6
 8005062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005066:	89ab      	ldrh	r3, [r5, #12]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d907      	bls.n	800507c <_fwalk_sglue+0x38>
 800506c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005070:	3301      	adds	r3, #1
 8005072:	d003      	beq.n	800507c <_fwalk_sglue+0x38>
 8005074:	4629      	mov	r1, r5
 8005076:	4638      	mov	r0, r7
 8005078:	47c0      	blx	r8
 800507a:	4306      	orrs	r6, r0
 800507c:	3568      	adds	r5, #104	; 0x68
 800507e:	e7e9      	b.n	8005054 <_fwalk_sglue+0x10>

08005080 <iprintf>:
 8005080:	b40f      	push	{r0, r1, r2, r3}
 8005082:	b507      	push	{r0, r1, r2, lr}
 8005084:	4906      	ldr	r1, [pc, #24]	; (80050a0 <iprintf+0x20>)
 8005086:	ab04      	add	r3, sp, #16
 8005088:	6808      	ldr	r0, [r1, #0]
 800508a:	f853 2b04 	ldr.w	r2, [r3], #4
 800508e:	6881      	ldr	r1, [r0, #8]
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	f000 fc59 	bl	8005948 <_vfiprintf_r>
 8005096:	b003      	add	sp, #12
 8005098:	f85d eb04 	ldr.w	lr, [sp], #4
 800509c:	b004      	add	sp, #16
 800509e:	4770      	bx	lr
 80050a0:	20000064 	.word	0x20000064

080050a4 <_puts_r>:
 80050a4:	6a03      	ldr	r3, [r0, #32]
 80050a6:	b570      	push	{r4, r5, r6, lr}
 80050a8:	4605      	mov	r5, r0
 80050aa:	460e      	mov	r6, r1
 80050ac:	6884      	ldr	r4, [r0, #8]
 80050ae:	b90b      	cbnz	r3, 80050b4 <_puts_r+0x10>
 80050b0:	f7ff ffb0 	bl	8005014 <__sinit>
 80050b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050b6:	07db      	lsls	r3, r3, #31
 80050b8:	d405      	bmi.n	80050c6 <_puts_r+0x22>
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	0598      	lsls	r0, r3, #22
 80050be:	d402      	bmi.n	80050c6 <_puts_r+0x22>
 80050c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050c2:	f000 f9cb 	bl	800545c <__retarget_lock_acquire_recursive>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	0719      	lsls	r1, r3, #28
 80050ca:	d513      	bpl.n	80050f4 <_puts_r+0x50>
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	b18b      	cbz	r3, 80050f4 <_puts_r+0x50>
 80050d0:	3e01      	subs	r6, #1
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050d8:	3b01      	subs	r3, #1
 80050da:	60a3      	str	r3, [r4, #8]
 80050dc:	b9e9      	cbnz	r1, 800511a <_puts_r+0x76>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	da2e      	bge.n	8005140 <_puts_r+0x9c>
 80050e2:	4622      	mov	r2, r4
 80050e4:	210a      	movs	r1, #10
 80050e6:	4628      	mov	r0, r5
 80050e8:	f000 f89b 	bl	8005222 <__swbuf_r>
 80050ec:	3001      	adds	r0, #1
 80050ee:	d007      	beq.n	8005100 <_puts_r+0x5c>
 80050f0:	250a      	movs	r5, #10
 80050f2:	e007      	b.n	8005104 <_puts_r+0x60>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 f8d0 	bl	800529c <__swsetup_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d0e7      	beq.n	80050d0 <_puts_r+0x2c>
 8005100:	f04f 35ff 	mov.w	r5, #4294967295
 8005104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005106:	07da      	lsls	r2, r3, #31
 8005108:	d405      	bmi.n	8005116 <_puts_r+0x72>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	059b      	lsls	r3, r3, #22
 800510e:	d402      	bmi.n	8005116 <_puts_r+0x72>
 8005110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005112:	f000 f9a4 	bl	800545e <__retarget_lock_release_recursive>
 8005116:	4628      	mov	r0, r5
 8005118:	bd70      	pop	{r4, r5, r6, pc}
 800511a:	2b00      	cmp	r3, #0
 800511c:	da04      	bge.n	8005128 <_puts_r+0x84>
 800511e:	69a2      	ldr	r2, [r4, #24]
 8005120:	429a      	cmp	r2, r3
 8005122:	dc06      	bgt.n	8005132 <_puts_r+0x8e>
 8005124:	290a      	cmp	r1, #10
 8005126:	d004      	beq.n	8005132 <_puts_r+0x8e>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	6022      	str	r2, [r4, #0]
 800512e:	7019      	strb	r1, [r3, #0]
 8005130:	e7cf      	b.n	80050d2 <_puts_r+0x2e>
 8005132:	4622      	mov	r2, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 f874 	bl	8005222 <__swbuf_r>
 800513a:	3001      	adds	r0, #1
 800513c:	d1c9      	bne.n	80050d2 <_puts_r+0x2e>
 800513e:	e7df      	b.n	8005100 <_puts_r+0x5c>
 8005140:	250a      	movs	r5, #10
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	6022      	str	r2, [r4, #0]
 8005148:	701d      	strb	r5, [r3, #0]
 800514a:	e7db      	b.n	8005104 <_puts_r+0x60>

0800514c <puts>:
 800514c:	4b02      	ldr	r3, [pc, #8]	; (8005158 <puts+0xc>)
 800514e:	4601      	mov	r1, r0
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	f7ff bfa7 	b.w	80050a4 <_puts_r>
 8005156:	bf00      	nop
 8005158:	20000064 	.word	0x20000064

0800515c <siprintf>:
 800515c:	b40e      	push	{r1, r2, r3}
 800515e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005162:	b500      	push	{lr}
 8005164:	b09c      	sub	sp, #112	; 0x70
 8005166:	ab1d      	add	r3, sp, #116	; 0x74
 8005168:	9002      	str	r0, [sp, #8]
 800516a:	9006      	str	r0, [sp, #24]
 800516c:	9107      	str	r1, [sp, #28]
 800516e:	9104      	str	r1, [sp, #16]
 8005170:	4808      	ldr	r0, [pc, #32]	; (8005194 <siprintf+0x38>)
 8005172:	4909      	ldr	r1, [pc, #36]	; (8005198 <siprintf+0x3c>)
 8005174:	f853 2b04 	ldr.w	r2, [r3], #4
 8005178:	9105      	str	r1, [sp, #20]
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	a902      	add	r1, sp, #8
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	f000 fabc 	bl	80056fc <_svfiprintf_r>
 8005184:	2200      	movs	r2, #0
 8005186:	9b02      	ldr	r3, [sp, #8]
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	b01c      	add	sp, #112	; 0x70
 800518c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005190:	b003      	add	sp, #12
 8005192:	4770      	bx	lr
 8005194:	20000064 	.word	0x20000064
 8005198:	ffff0208 	.word	0xffff0208

0800519c <__sread>:
 800519c:	b510      	push	{r4, lr}
 800519e:	460c      	mov	r4, r1
 80051a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a4:	f000 f912 	bl	80053cc <_read_r>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	bfab      	itete	ge
 80051ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051ae:	89a3      	ldrhlt	r3, [r4, #12]
 80051b0:	181b      	addge	r3, r3, r0
 80051b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051b6:	bfac      	ite	ge
 80051b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80051ba:	81a3      	strhlt	r3, [r4, #12]
 80051bc:	bd10      	pop	{r4, pc}

080051be <__swrite>:
 80051be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c2:	461f      	mov	r7, r3
 80051c4:	898b      	ldrh	r3, [r1, #12]
 80051c6:	4605      	mov	r5, r0
 80051c8:	05db      	lsls	r3, r3, #23
 80051ca:	460c      	mov	r4, r1
 80051cc:	4616      	mov	r6, r2
 80051ce:	d505      	bpl.n	80051dc <__swrite+0x1e>
 80051d0:	2302      	movs	r3, #2
 80051d2:	2200      	movs	r2, #0
 80051d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d8:	f000 f8e6 	bl	80053a8 <_lseek_r>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	4632      	mov	r2, r6
 80051e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	4628      	mov	r0, r5
 80051e8:	463b      	mov	r3, r7
 80051ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f2:	f000 b8fd 	b.w	80053f0 <_write_r>

080051f6 <__sseek>:
 80051f6:	b510      	push	{r4, lr}
 80051f8:	460c      	mov	r4, r1
 80051fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fe:	f000 f8d3 	bl	80053a8 <_lseek_r>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	bf15      	itete	ne
 8005208:	6560      	strne	r0, [r4, #84]	; 0x54
 800520a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800520e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005212:	81a3      	strheq	r3, [r4, #12]
 8005214:	bf18      	it	ne
 8005216:	81a3      	strhne	r3, [r4, #12]
 8005218:	bd10      	pop	{r4, pc}

0800521a <__sclose>:
 800521a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521e:	f000 b8b3 	b.w	8005388 <_close_r>

08005222 <__swbuf_r>:
 8005222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005224:	460e      	mov	r6, r1
 8005226:	4614      	mov	r4, r2
 8005228:	4605      	mov	r5, r0
 800522a:	b118      	cbz	r0, 8005234 <__swbuf_r+0x12>
 800522c:	6a03      	ldr	r3, [r0, #32]
 800522e:	b90b      	cbnz	r3, 8005234 <__swbuf_r+0x12>
 8005230:	f7ff fef0 	bl	8005014 <__sinit>
 8005234:	69a3      	ldr	r3, [r4, #24]
 8005236:	60a3      	str	r3, [r4, #8]
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	071a      	lsls	r2, r3, #28
 800523c:	d525      	bpl.n	800528a <__swbuf_r+0x68>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	b31b      	cbz	r3, 800528a <__swbuf_r+0x68>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	6922      	ldr	r2, [r4, #16]
 8005246:	b2f6      	uxtb	r6, r6
 8005248:	1a98      	subs	r0, r3, r2
 800524a:	6963      	ldr	r3, [r4, #20]
 800524c:	4637      	mov	r7, r6
 800524e:	4283      	cmp	r3, r0
 8005250:	dc04      	bgt.n	800525c <__swbuf_r+0x3a>
 8005252:	4621      	mov	r1, r4
 8005254:	4628      	mov	r0, r5
 8005256:	f000 fea7 	bl	8005fa8 <_fflush_r>
 800525a:	b9e0      	cbnz	r0, 8005296 <__swbuf_r+0x74>
 800525c:	68a3      	ldr	r3, [r4, #8]
 800525e:	3b01      	subs	r3, #1
 8005260:	60a3      	str	r3, [r4, #8]
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	6022      	str	r2, [r4, #0]
 8005268:	701e      	strb	r6, [r3, #0]
 800526a:	6962      	ldr	r2, [r4, #20]
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	429a      	cmp	r2, r3
 8005270:	d004      	beq.n	800527c <__swbuf_r+0x5a>
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	07db      	lsls	r3, r3, #31
 8005276:	d506      	bpl.n	8005286 <__swbuf_r+0x64>
 8005278:	2e0a      	cmp	r6, #10
 800527a:	d104      	bne.n	8005286 <__swbuf_r+0x64>
 800527c:	4621      	mov	r1, r4
 800527e:	4628      	mov	r0, r5
 8005280:	f000 fe92 	bl	8005fa8 <_fflush_r>
 8005284:	b938      	cbnz	r0, 8005296 <__swbuf_r+0x74>
 8005286:	4638      	mov	r0, r7
 8005288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800528a:	4621      	mov	r1, r4
 800528c:	4628      	mov	r0, r5
 800528e:	f000 f805 	bl	800529c <__swsetup_r>
 8005292:	2800      	cmp	r0, #0
 8005294:	d0d5      	beq.n	8005242 <__swbuf_r+0x20>
 8005296:	f04f 37ff 	mov.w	r7, #4294967295
 800529a:	e7f4      	b.n	8005286 <__swbuf_r+0x64>

0800529c <__swsetup_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4b2a      	ldr	r3, [pc, #168]	; (8005348 <__swsetup_r+0xac>)
 80052a0:	4605      	mov	r5, r0
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	460c      	mov	r4, r1
 80052a6:	b118      	cbz	r0, 80052b0 <__swsetup_r+0x14>
 80052a8:	6a03      	ldr	r3, [r0, #32]
 80052aa:	b90b      	cbnz	r3, 80052b0 <__swsetup_r+0x14>
 80052ac:	f7ff feb2 	bl	8005014 <__sinit>
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052b6:	0718      	lsls	r0, r3, #28
 80052b8:	d422      	bmi.n	8005300 <__swsetup_r+0x64>
 80052ba:	06d9      	lsls	r1, r3, #27
 80052bc:	d407      	bmi.n	80052ce <__swsetup_r+0x32>
 80052be:	2309      	movs	r3, #9
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052c6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	e034      	b.n	8005338 <__swsetup_r+0x9c>
 80052ce:	0758      	lsls	r0, r3, #29
 80052d0:	d512      	bpl.n	80052f8 <__swsetup_r+0x5c>
 80052d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052d4:	b141      	cbz	r1, 80052e8 <__swsetup_r+0x4c>
 80052d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052da:	4299      	cmp	r1, r3
 80052dc:	d002      	beq.n	80052e4 <__swsetup_r+0x48>
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 f8be 	bl	8005460 <_free_r>
 80052e4:	2300      	movs	r3, #0
 80052e6:	6363      	str	r3, [r4, #52]	; 0x34
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	2300      	movs	r3, #0
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	f043 0308 	orr.w	r3, r3, #8
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	b94b      	cbnz	r3, 8005318 <__swsetup_r+0x7c>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800530a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530e:	d003      	beq.n	8005318 <__swsetup_r+0x7c>
 8005310:	4621      	mov	r1, r4
 8005312:	4628      	mov	r0, r5
 8005314:	f000 fe95 	bl	8006042 <__smakebuf_r>
 8005318:	89a0      	ldrh	r0, [r4, #12]
 800531a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800531e:	f010 0301 	ands.w	r3, r0, #1
 8005322:	d00a      	beq.n	800533a <__swsetup_r+0x9e>
 8005324:	2300      	movs	r3, #0
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	6963      	ldr	r3, [r4, #20]
 800532a:	425b      	negs	r3, r3
 800532c:	61a3      	str	r3, [r4, #24]
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	b943      	cbnz	r3, 8005344 <__swsetup_r+0xa8>
 8005332:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005336:	d1c4      	bne.n	80052c2 <__swsetup_r+0x26>
 8005338:	bd38      	pop	{r3, r4, r5, pc}
 800533a:	0781      	lsls	r1, r0, #30
 800533c:	bf58      	it	pl
 800533e:	6963      	ldrpl	r3, [r4, #20]
 8005340:	60a3      	str	r3, [r4, #8]
 8005342:	e7f4      	b.n	800532e <__swsetup_r+0x92>
 8005344:	2000      	movs	r0, #0
 8005346:	e7f7      	b.n	8005338 <__swsetup_r+0x9c>
 8005348:	20000064 	.word	0x20000064

0800534c <memset>:
 800534c:	4603      	mov	r3, r0
 800534e:	4402      	add	r2, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <strstr>:
 800535c:	780a      	ldrb	r2, [r1, #0]
 800535e:	b570      	push	{r4, r5, r6, lr}
 8005360:	b96a      	cbnz	r2, 800537e <strstr+0x22>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	429a      	cmp	r2, r3
 8005366:	d109      	bne.n	800537c <strstr+0x20>
 8005368:	460c      	mov	r4, r1
 800536a:	4605      	mov	r5, r0
 800536c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f6      	beq.n	8005362 <strstr+0x6>
 8005374:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005378:	429e      	cmp	r6, r3
 800537a:	d0f7      	beq.n	800536c <strstr+0x10>
 800537c:	3001      	adds	r0, #1
 800537e:	7803      	ldrb	r3, [r0, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ef      	bne.n	8005364 <strstr+0x8>
 8005384:	4618      	mov	r0, r3
 8005386:	e7ec      	b.n	8005362 <strstr+0x6>

08005388 <_close_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	2300      	movs	r3, #0
 800538c:	4d05      	ldr	r5, [pc, #20]	; (80053a4 <_close_r+0x1c>)
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fc ffa3 	bl	80022de <_close>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_close_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_close_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	20000800 	.word	0x20000800

080053a8 <_lseek_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	4611      	mov	r1, r2
 80053b0:	2200      	movs	r2, #0
 80053b2:	4d05      	ldr	r5, [pc, #20]	; (80053c8 <_lseek_r+0x20>)
 80053b4:	602a      	str	r2, [r5, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f7fc ffb5 	bl	8002326 <_lseek>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_lseek_r+0x1e>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_lseek_r+0x1e>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	20000800 	.word	0x20000800

080053cc <_read_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	2200      	movs	r2, #0
 80053d6:	4d05      	ldr	r5, [pc, #20]	; (80053ec <_read_r+0x20>)
 80053d8:	602a      	str	r2, [r5, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	f7fc ff62 	bl	80022a4 <_read>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_read_r+0x1e>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_read_r+0x1e>
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20000800 	.word	0x20000800

080053f0 <_write_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	2200      	movs	r2, #0
 80053fa:	4d05      	ldr	r5, [pc, #20]	; (8005410 <_write_r+0x20>)
 80053fc:	602a      	str	r2, [r5, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	f7fb f85e 	bl	80004c0 <_write>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_write_r+0x1e>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_write_r+0x1e>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20000800 	.word	0x20000800

08005414 <__libc_init_array>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	2600      	movs	r6, #0
 8005418:	4d0c      	ldr	r5, [pc, #48]	; (800544c <__libc_init_array+0x38>)
 800541a:	4c0d      	ldr	r4, [pc, #52]	; (8005450 <__libc_init_array+0x3c>)
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	42a6      	cmp	r6, r4
 8005422:	d109      	bne.n	8005438 <__libc_init_array+0x24>
 8005424:	f000 fef8 	bl	8006218 <_init>
 8005428:	2600      	movs	r6, #0
 800542a:	4d0a      	ldr	r5, [pc, #40]	; (8005454 <__libc_init_array+0x40>)
 800542c:	4c0a      	ldr	r4, [pc, #40]	; (8005458 <__libc_init_array+0x44>)
 800542e:	1b64      	subs	r4, r4, r5
 8005430:	10a4      	asrs	r4, r4, #2
 8005432:	42a6      	cmp	r6, r4
 8005434:	d105      	bne.n	8005442 <__libc_init_array+0x2e>
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	f855 3b04 	ldr.w	r3, [r5], #4
 800543c:	4798      	blx	r3
 800543e:	3601      	adds	r6, #1
 8005440:	e7ee      	b.n	8005420 <__libc_init_array+0xc>
 8005442:	f855 3b04 	ldr.w	r3, [r5], #4
 8005446:	4798      	blx	r3
 8005448:	3601      	adds	r6, #1
 800544a:	e7f2      	b.n	8005432 <__libc_init_array+0x1e>
 800544c:	0800671c 	.word	0x0800671c
 8005450:	0800671c 	.word	0x0800671c
 8005454:	0800671c 	.word	0x0800671c
 8005458:	08006720 	.word	0x08006720

0800545c <__retarget_lock_acquire_recursive>:
 800545c:	4770      	bx	lr

0800545e <__retarget_lock_release_recursive>:
 800545e:	4770      	bx	lr

08005460 <_free_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4605      	mov	r5, r0
 8005464:	2900      	cmp	r1, #0
 8005466:	d040      	beq.n	80054ea <_free_r+0x8a>
 8005468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800546c:	1f0c      	subs	r4, r1, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	bfb8      	it	lt
 8005472:	18e4      	addlt	r4, r4, r3
 8005474:	f000 f8dc 	bl	8005630 <__malloc_lock>
 8005478:	4a1c      	ldr	r2, [pc, #112]	; (80054ec <_free_r+0x8c>)
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	b933      	cbnz	r3, 800548c <_free_r+0x2c>
 800547e:	6063      	str	r3, [r4, #4]
 8005480:	6014      	str	r4, [r2, #0]
 8005482:	4628      	mov	r0, r5
 8005484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005488:	f000 b8d8 	b.w	800563c <__malloc_unlock>
 800548c:	42a3      	cmp	r3, r4
 800548e:	d908      	bls.n	80054a2 <_free_r+0x42>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	1821      	adds	r1, r4, r0
 8005494:	428b      	cmp	r3, r1
 8005496:	bf01      	itttt	eq
 8005498:	6819      	ldreq	r1, [r3, #0]
 800549a:	685b      	ldreq	r3, [r3, #4]
 800549c:	1809      	addeq	r1, r1, r0
 800549e:	6021      	streq	r1, [r4, #0]
 80054a0:	e7ed      	b.n	800547e <_free_r+0x1e>
 80054a2:	461a      	mov	r2, r3
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	b10b      	cbz	r3, 80054ac <_free_r+0x4c>
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	d9fa      	bls.n	80054a2 <_free_r+0x42>
 80054ac:	6811      	ldr	r1, [r2, #0]
 80054ae:	1850      	adds	r0, r2, r1
 80054b0:	42a0      	cmp	r0, r4
 80054b2:	d10b      	bne.n	80054cc <_free_r+0x6c>
 80054b4:	6820      	ldr	r0, [r4, #0]
 80054b6:	4401      	add	r1, r0
 80054b8:	1850      	adds	r0, r2, r1
 80054ba:	4283      	cmp	r3, r0
 80054bc:	6011      	str	r1, [r2, #0]
 80054be:	d1e0      	bne.n	8005482 <_free_r+0x22>
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4408      	add	r0, r1
 80054c6:	6010      	str	r0, [r2, #0]
 80054c8:	6053      	str	r3, [r2, #4]
 80054ca:	e7da      	b.n	8005482 <_free_r+0x22>
 80054cc:	d902      	bls.n	80054d4 <_free_r+0x74>
 80054ce:	230c      	movs	r3, #12
 80054d0:	602b      	str	r3, [r5, #0]
 80054d2:	e7d6      	b.n	8005482 <_free_r+0x22>
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	1821      	adds	r1, r4, r0
 80054d8:	428b      	cmp	r3, r1
 80054da:	bf01      	itttt	eq
 80054dc:	6819      	ldreq	r1, [r3, #0]
 80054de:	685b      	ldreq	r3, [r3, #4]
 80054e0:	1809      	addeq	r1, r1, r0
 80054e2:	6021      	streq	r1, [r4, #0]
 80054e4:	6063      	str	r3, [r4, #4]
 80054e6:	6054      	str	r4, [r2, #4]
 80054e8:	e7cb      	b.n	8005482 <_free_r+0x22>
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	20000808 	.word	0x20000808

080054f0 <sbrk_aligned>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4e0e      	ldr	r6, [pc, #56]	; (800552c <sbrk_aligned+0x3c>)
 80054f4:	460c      	mov	r4, r1
 80054f6:	6831      	ldr	r1, [r6, #0]
 80054f8:	4605      	mov	r5, r0
 80054fa:	b911      	cbnz	r1, 8005502 <sbrk_aligned+0x12>
 80054fc:	f000 fe1a 	bl	8006134 <_sbrk_r>
 8005500:	6030      	str	r0, [r6, #0]
 8005502:	4621      	mov	r1, r4
 8005504:	4628      	mov	r0, r5
 8005506:	f000 fe15 	bl	8006134 <_sbrk_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d00a      	beq.n	8005524 <sbrk_aligned+0x34>
 800550e:	1cc4      	adds	r4, r0, #3
 8005510:	f024 0403 	bic.w	r4, r4, #3
 8005514:	42a0      	cmp	r0, r4
 8005516:	d007      	beq.n	8005528 <sbrk_aligned+0x38>
 8005518:	1a21      	subs	r1, r4, r0
 800551a:	4628      	mov	r0, r5
 800551c:	f000 fe0a 	bl	8006134 <_sbrk_r>
 8005520:	3001      	adds	r0, #1
 8005522:	d101      	bne.n	8005528 <sbrk_aligned+0x38>
 8005524:	f04f 34ff 	mov.w	r4, #4294967295
 8005528:	4620      	mov	r0, r4
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	2000080c 	.word	0x2000080c

08005530 <_malloc_r>:
 8005530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005534:	1ccd      	adds	r5, r1, #3
 8005536:	f025 0503 	bic.w	r5, r5, #3
 800553a:	3508      	adds	r5, #8
 800553c:	2d0c      	cmp	r5, #12
 800553e:	bf38      	it	cc
 8005540:	250c      	movcc	r5, #12
 8005542:	2d00      	cmp	r5, #0
 8005544:	4607      	mov	r7, r0
 8005546:	db01      	blt.n	800554c <_malloc_r+0x1c>
 8005548:	42a9      	cmp	r1, r5
 800554a:	d905      	bls.n	8005558 <_malloc_r+0x28>
 800554c:	230c      	movs	r3, #12
 800554e:	2600      	movs	r6, #0
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4630      	mov	r0, r6
 8005554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005558:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800562c <_malloc_r+0xfc>
 800555c:	f000 f868 	bl	8005630 <__malloc_lock>
 8005560:	f8d8 3000 	ldr.w	r3, [r8]
 8005564:	461c      	mov	r4, r3
 8005566:	bb5c      	cbnz	r4, 80055c0 <_malloc_r+0x90>
 8005568:	4629      	mov	r1, r5
 800556a:	4638      	mov	r0, r7
 800556c:	f7ff ffc0 	bl	80054f0 <sbrk_aligned>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	4604      	mov	r4, r0
 8005574:	d155      	bne.n	8005622 <_malloc_r+0xf2>
 8005576:	f8d8 4000 	ldr.w	r4, [r8]
 800557a:	4626      	mov	r6, r4
 800557c:	2e00      	cmp	r6, #0
 800557e:	d145      	bne.n	800560c <_malloc_r+0xdc>
 8005580:	2c00      	cmp	r4, #0
 8005582:	d048      	beq.n	8005616 <_malloc_r+0xe6>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	4631      	mov	r1, r6
 8005588:	4638      	mov	r0, r7
 800558a:	eb04 0903 	add.w	r9, r4, r3
 800558e:	f000 fdd1 	bl	8006134 <_sbrk_r>
 8005592:	4581      	cmp	r9, r0
 8005594:	d13f      	bne.n	8005616 <_malloc_r+0xe6>
 8005596:	6821      	ldr	r1, [r4, #0]
 8005598:	4638      	mov	r0, r7
 800559a:	1a6d      	subs	r5, r5, r1
 800559c:	4629      	mov	r1, r5
 800559e:	f7ff ffa7 	bl	80054f0 <sbrk_aligned>
 80055a2:	3001      	adds	r0, #1
 80055a4:	d037      	beq.n	8005616 <_malloc_r+0xe6>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	442b      	add	r3, r5
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	f8d8 3000 	ldr.w	r3, [r8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d038      	beq.n	8005626 <_malloc_r+0xf6>
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	42a2      	cmp	r2, r4
 80055b8:	d12b      	bne.n	8005612 <_malloc_r+0xe2>
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	e00f      	b.n	80055e0 <_malloc_r+0xb0>
 80055c0:	6822      	ldr	r2, [r4, #0]
 80055c2:	1b52      	subs	r2, r2, r5
 80055c4:	d41f      	bmi.n	8005606 <_malloc_r+0xd6>
 80055c6:	2a0b      	cmp	r2, #11
 80055c8:	d917      	bls.n	80055fa <_malloc_r+0xca>
 80055ca:	1961      	adds	r1, r4, r5
 80055cc:	42a3      	cmp	r3, r4
 80055ce:	6025      	str	r5, [r4, #0]
 80055d0:	bf18      	it	ne
 80055d2:	6059      	strne	r1, [r3, #4]
 80055d4:	6863      	ldr	r3, [r4, #4]
 80055d6:	bf08      	it	eq
 80055d8:	f8c8 1000 	streq.w	r1, [r8]
 80055dc:	5162      	str	r2, [r4, r5]
 80055de:	604b      	str	r3, [r1, #4]
 80055e0:	4638      	mov	r0, r7
 80055e2:	f104 060b 	add.w	r6, r4, #11
 80055e6:	f000 f829 	bl	800563c <__malloc_unlock>
 80055ea:	f026 0607 	bic.w	r6, r6, #7
 80055ee:	1d23      	adds	r3, r4, #4
 80055f0:	1af2      	subs	r2, r6, r3
 80055f2:	d0ae      	beq.n	8005552 <_malloc_r+0x22>
 80055f4:	1b9b      	subs	r3, r3, r6
 80055f6:	50a3      	str	r3, [r4, r2]
 80055f8:	e7ab      	b.n	8005552 <_malloc_r+0x22>
 80055fa:	42a3      	cmp	r3, r4
 80055fc:	6862      	ldr	r2, [r4, #4]
 80055fe:	d1dd      	bne.n	80055bc <_malloc_r+0x8c>
 8005600:	f8c8 2000 	str.w	r2, [r8]
 8005604:	e7ec      	b.n	80055e0 <_malloc_r+0xb0>
 8005606:	4623      	mov	r3, r4
 8005608:	6864      	ldr	r4, [r4, #4]
 800560a:	e7ac      	b.n	8005566 <_malloc_r+0x36>
 800560c:	4634      	mov	r4, r6
 800560e:	6876      	ldr	r6, [r6, #4]
 8005610:	e7b4      	b.n	800557c <_malloc_r+0x4c>
 8005612:	4613      	mov	r3, r2
 8005614:	e7cc      	b.n	80055b0 <_malloc_r+0x80>
 8005616:	230c      	movs	r3, #12
 8005618:	4638      	mov	r0, r7
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	f000 f80e 	bl	800563c <__malloc_unlock>
 8005620:	e797      	b.n	8005552 <_malloc_r+0x22>
 8005622:	6025      	str	r5, [r4, #0]
 8005624:	e7dc      	b.n	80055e0 <_malloc_r+0xb0>
 8005626:	605b      	str	r3, [r3, #4]
 8005628:	deff      	udf	#255	; 0xff
 800562a:	bf00      	nop
 800562c:	20000808 	.word	0x20000808

08005630 <__malloc_lock>:
 8005630:	4801      	ldr	r0, [pc, #4]	; (8005638 <__malloc_lock+0x8>)
 8005632:	f7ff bf13 	b.w	800545c <__retarget_lock_acquire_recursive>
 8005636:	bf00      	nop
 8005638:	20000804 	.word	0x20000804

0800563c <__malloc_unlock>:
 800563c:	4801      	ldr	r0, [pc, #4]	; (8005644 <__malloc_unlock+0x8>)
 800563e:	f7ff bf0e 	b.w	800545e <__retarget_lock_release_recursive>
 8005642:	bf00      	nop
 8005644:	20000804 	.word	0x20000804

08005648 <__ssputs_r>:
 8005648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800564c:	461f      	mov	r7, r3
 800564e:	688e      	ldr	r6, [r1, #8]
 8005650:	4682      	mov	sl, r0
 8005652:	42be      	cmp	r6, r7
 8005654:	460c      	mov	r4, r1
 8005656:	4690      	mov	r8, r2
 8005658:	680b      	ldr	r3, [r1, #0]
 800565a:	d82c      	bhi.n	80056b6 <__ssputs_r+0x6e>
 800565c:	898a      	ldrh	r2, [r1, #12]
 800565e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005662:	d026      	beq.n	80056b2 <__ssputs_r+0x6a>
 8005664:	6965      	ldr	r5, [r4, #20]
 8005666:	6909      	ldr	r1, [r1, #16]
 8005668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800566c:	eba3 0901 	sub.w	r9, r3, r1
 8005670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005674:	1c7b      	adds	r3, r7, #1
 8005676:	444b      	add	r3, r9
 8005678:	106d      	asrs	r5, r5, #1
 800567a:	429d      	cmp	r5, r3
 800567c:	bf38      	it	cc
 800567e:	461d      	movcc	r5, r3
 8005680:	0553      	lsls	r3, r2, #21
 8005682:	d527      	bpl.n	80056d4 <__ssputs_r+0x8c>
 8005684:	4629      	mov	r1, r5
 8005686:	f7ff ff53 	bl	8005530 <_malloc_r>
 800568a:	4606      	mov	r6, r0
 800568c:	b360      	cbz	r0, 80056e8 <__ssputs_r+0xa0>
 800568e:	464a      	mov	r2, r9
 8005690:	6921      	ldr	r1, [r4, #16]
 8005692:	f000 fd6d 	bl	8006170 <memcpy>
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800569c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	6126      	str	r6, [r4, #16]
 80056a4:	444e      	add	r6, r9
 80056a6:	6026      	str	r6, [r4, #0]
 80056a8:	463e      	mov	r6, r7
 80056aa:	6165      	str	r5, [r4, #20]
 80056ac:	eba5 0509 	sub.w	r5, r5, r9
 80056b0:	60a5      	str	r5, [r4, #8]
 80056b2:	42be      	cmp	r6, r7
 80056b4:	d900      	bls.n	80056b8 <__ssputs_r+0x70>
 80056b6:	463e      	mov	r6, r7
 80056b8:	4632      	mov	r2, r6
 80056ba:	4641      	mov	r1, r8
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	f000 fcfc 	bl	80060ba <memmove>
 80056c2:	2000      	movs	r0, #0
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	1b9b      	subs	r3, r3, r6
 80056c8:	60a3      	str	r3, [r4, #8]
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	4433      	add	r3, r6
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d4:	462a      	mov	r2, r5
 80056d6:	f000 fd59 	bl	800618c <_realloc_r>
 80056da:	4606      	mov	r6, r0
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1e0      	bne.n	80056a2 <__ssputs_r+0x5a>
 80056e0:	4650      	mov	r0, sl
 80056e2:	6921      	ldr	r1, [r4, #16]
 80056e4:	f7ff febc 	bl	8005460 <_free_r>
 80056e8:	230c      	movs	r3, #12
 80056ea:	f8ca 3000 	str.w	r3, [sl]
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	e7e9      	b.n	80056d0 <__ssputs_r+0x88>

080056fc <_svfiprintf_r>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	4698      	mov	r8, r3
 8005702:	898b      	ldrh	r3, [r1, #12]
 8005704:	4607      	mov	r7, r0
 8005706:	061b      	lsls	r3, r3, #24
 8005708:	460d      	mov	r5, r1
 800570a:	4614      	mov	r4, r2
 800570c:	b09d      	sub	sp, #116	; 0x74
 800570e:	d50e      	bpl.n	800572e <_svfiprintf_r+0x32>
 8005710:	690b      	ldr	r3, [r1, #16]
 8005712:	b963      	cbnz	r3, 800572e <_svfiprintf_r+0x32>
 8005714:	2140      	movs	r1, #64	; 0x40
 8005716:	f7ff ff0b 	bl	8005530 <_malloc_r>
 800571a:	6028      	str	r0, [r5, #0]
 800571c:	6128      	str	r0, [r5, #16]
 800571e:	b920      	cbnz	r0, 800572a <_svfiprintf_r+0x2e>
 8005720:	230c      	movs	r3, #12
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	e0d0      	b.n	80058cc <_svfiprintf_r+0x1d0>
 800572a:	2340      	movs	r3, #64	; 0x40
 800572c:	616b      	str	r3, [r5, #20]
 800572e:	2300      	movs	r3, #0
 8005730:	9309      	str	r3, [sp, #36]	; 0x24
 8005732:	2320      	movs	r3, #32
 8005734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005738:	2330      	movs	r3, #48	; 0x30
 800573a:	f04f 0901 	mov.w	r9, #1
 800573e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005742:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80058e4 <_svfiprintf_r+0x1e8>
 8005746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800574a:	4623      	mov	r3, r4
 800574c:	469a      	mov	sl, r3
 800574e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005752:	b10a      	cbz	r2, 8005758 <_svfiprintf_r+0x5c>
 8005754:	2a25      	cmp	r2, #37	; 0x25
 8005756:	d1f9      	bne.n	800574c <_svfiprintf_r+0x50>
 8005758:	ebba 0b04 	subs.w	fp, sl, r4
 800575c:	d00b      	beq.n	8005776 <_svfiprintf_r+0x7a>
 800575e:	465b      	mov	r3, fp
 8005760:	4622      	mov	r2, r4
 8005762:	4629      	mov	r1, r5
 8005764:	4638      	mov	r0, r7
 8005766:	f7ff ff6f 	bl	8005648 <__ssputs_r>
 800576a:	3001      	adds	r0, #1
 800576c:	f000 80a9 	beq.w	80058c2 <_svfiprintf_r+0x1c6>
 8005770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005772:	445a      	add	r2, fp
 8005774:	9209      	str	r2, [sp, #36]	; 0x24
 8005776:	f89a 3000 	ldrb.w	r3, [sl]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80a1 	beq.w	80058c2 <_svfiprintf_r+0x1c6>
 8005780:	2300      	movs	r3, #0
 8005782:	f04f 32ff 	mov.w	r2, #4294967295
 8005786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800578a:	f10a 0a01 	add.w	sl, sl, #1
 800578e:	9304      	str	r3, [sp, #16]
 8005790:	9307      	str	r3, [sp, #28]
 8005792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005796:	931a      	str	r3, [sp, #104]	; 0x68
 8005798:	4654      	mov	r4, sl
 800579a:	2205      	movs	r2, #5
 800579c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a0:	4850      	ldr	r0, [pc, #320]	; (80058e4 <_svfiprintf_r+0x1e8>)
 80057a2:	f000 fcd7 	bl	8006154 <memchr>
 80057a6:	9a04      	ldr	r2, [sp, #16]
 80057a8:	b9d8      	cbnz	r0, 80057e2 <_svfiprintf_r+0xe6>
 80057aa:	06d0      	lsls	r0, r2, #27
 80057ac:	bf44      	itt	mi
 80057ae:	2320      	movmi	r3, #32
 80057b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b4:	0711      	lsls	r1, r2, #28
 80057b6:	bf44      	itt	mi
 80057b8:	232b      	movmi	r3, #43	; 0x2b
 80057ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057be:	f89a 3000 	ldrb.w	r3, [sl]
 80057c2:	2b2a      	cmp	r3, #42	; 0x2a
 80057c4:	d015      	beq.n	80057f2 <_svfiprintf_r+0xf6>
 80057c6:	4654      	mov	r4, sl
 80057c8:	2000      	movs	r0, #0
 80057ca:	f04f 0c0a 	mov.w	ip, #10
 80057ce:	9a07      	ldr	r2, [sp, #28]
 80057d0:	4621      	mov	r1, r4
 80057d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057d6:	3b30      	subs	r3, #48	; 0x30
 80057d8:	2b09      	cmp	r3, #9
 80057da:	d94d      	bls.n	8005878 <_svfiprintf_r+0x17c>
 80057dc:	b1b0      	cbz	r0, 800580c <_svfiprintf_r+0x110>
 80057de:	9207      	str	r2, [sp, #28]
 80057e0:	e014      	b.n	800580c <_svfiprintf_r+0x110>
 80057e2:	eba0 0308 	sub.w	r3, r0, r8
 80057e6:	fa09 f303 	lsl.w	r3, r9, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	46a2      	mov	sl, r4
 80057ee:	9304      	str	r3, [sp, #16]
 80057f0:	e7d2      	b.n	8005798 <_svfiprintf_r+0x9c>
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	1d19      	adds	r1, r3, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	9103      	str	r1, [sp, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfbb      	ittet	lt
 80057fe:	425b      	neglt	r3, r3
 8005800:	f042 0202 	orrlt.w	r2, r2, #2
 8005804:	9307      	strge	r3, [sp, #28]
 8005806:	9307      	strlt	r3, [sp, #28]
 8005808:	bfb8      	it	lt
 800580a:	9204      	strlt	r2, [sp, #16]
 800580c:	7823      	ldrb	r3, [r4, #0]
 800580e:	2b2e      	cmp	r3, #46	; 0x2e
 8005810:	d10c      	bne.n	800582c <_svfiprintf_r+0x130>
 8005812:	7863      	ldrb	r3, [r4, #1]
 8005814:	2b2a      	cmp	r3, #42	; 0x2a
 8005816:	d134      	bne.n	8005882 <_svfiprintf_r+0x186>
 8005818:	9b03      	ldr	r3, [sp, #12]
 800581a:	3402      	adds	r4, #2
 800581c:	1d1a      	adds	r2, r3, #4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	9203      	str	r2, [sp, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	bfb8      	it	lt
 8005826:	f04f 33ff 	movlt.w	r3, #4294967295
 800582a:	9305      	str	r3, [sp, #20]
 800582c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80058e8 <_svfiprintf_r+0x1ec>
 8005830:	2203      	movs	r2, #3
 8005832:	4650      	mov	r0, sl
 8005834:	7821      	ldrb	r1, [r4, #0]
 8005836:	f000 fc8d 	bl	8006154 <memchr>
 800583a:	b138      	cbz	r0, 800584c <_svfiprintf_r+0x150>
 800583c:	2240      	movs	r2, #64	; 0x40
 800583e:	9b04      	ldr	r3, [sp, #16]
 8005840:	eba0 000a 	sub.w	r0, r0, sl
 8005844:	4082      	lsls	r2, r0
 8005846:	4313      	orrs	r3, r2
 8005848:	3401      	adds	r4, #1
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005850:	2206      	movs	r2, #6
 8005852:	4826      	ldr	r0, [pc, #152]	; (80058ec <_svfiprintf_r+0x1f0>)
 8005854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005858:	f000 fc7c 	bl	8006154 <memchr>
 800585c:	2800      	cmp	r0, #0
 800585e:	d038      	beq.n	80058d2 <_svfiprintf_r+0x1d6>
 8005860:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <_svfiprintf_r+0x1f4>)
 8005862:	bb1b      	cbnz	r3, 80058ac <_svfiprintf_r+0x1b0>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	3307      	adds	r3, #7
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	3308      	adds	r3, #8
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005872:	4433      	add	r3, r6
 8005874:	9309      	str	r3, [sp, #36]	; 0x24
 8005876:	e768      	b.n	800574a <_svfiprintf_r+0x4e>
 8005878:	460c      	mov	r4, r1
 800587a:	2001      	movs	r0, #1
 800587c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005880:	e7a6      	b.n	80057d0 <_svfiprintf_r+0xd4>
 8005882:	2300      	movs	r3, #0
 8005884:	f04f 0c0a 	mov.w	ip, #10
 8005888:	4619      	mov	r1, r3
 800588a:	3401      	adds	r4, #1
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	4620      	mov	r0, r4
 8005890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005894:	3a30      	subs	r2, #48	; 0x30
 8005896:	2a09      	cmp	r2, #9
 8005898:	d903      	bls.n	80058a2 <_svfiprintf_r+0x1a6>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c6      	beq.n	800582c <_svfiprintf_r+0x130>
 800589e:	9105      	str	r1, [sp, #20]
 80058a0:	e7c4      	b.n	800582c <_svfiprintf_r+0x130>
 80058a2:	4604      	mov	r4, r0
 80058a4:	2301      	movs	r3, #1
 80058a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058aa:	e7f0      	b.n	800588e <_svfiprintf_r+0x192>
 80058ac:	ab03      	add	r3, sp, #12
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	462a      	mov	r2, r5
 80058b2:	4638      	mov	r0, r7
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <_svfiprintf_r+0x1f8>)
 80058b6:	a904      	add	r1, sp, #16
 80058b8:	f3af 8000 	nop.w
 80058bc:	1c42      	adds	r2, r0, #1
 80058be:	4606      	mov	r6, r0
 80058c0:	d1d6      	bne.n	8005870 <_svfiprintf_r+0x174>
 80058c2:	89ab      	ldrh	r3, [r5, #12]
 80058c4:	065b      	lsls	r3, r3, #25
 80058c6:	f53f af2d 	bmi.w	8005724 <_svfiprintf_r+0x28>
 80058ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058cc:	b01d      	add	sp, #116	; 0x74
 80058ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d2:	ab03      	add	r3, sp, #12
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	462a      	mov	r2, r5
 80058d8:	4638      	mov	r0, r7
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <_svfiprintf_r+0x1f8>)
 80058dc:	a904      	add	r1, sp, #16
 80058de:	f000 f9bf 	bl	8005c60 <_printf_i>
 80058e2:	e7eb      	b.n	80058bc <_svfiprintf_r+0x1c0>
 80058e4:	080066e8 	.word	0x080066e8
 80058e8:	080066ee 	.word	0x080066ee
 80058ec:	080066f2 	.word	0x080066f2
 80058f0:	00000000 	.word	0x00000000
 80058f4:	08005649 	.word	0x08005649

080058f8 <__sfputc_r>:
 80058f8:	6893      	ldr	r3, [r2, #8]
 80058fa:	b410      	push	{r4}
 80058fc:	3b01      	subs	r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	6093      	str	r3, [r2, #8]
 8005902:	da07      	bge.n	8005914 <__sfputc_r+0x1c>
 8005904:	6994      	ldr	r4, [r2, #24]
 8005906:	42a3      	cmp	r3, r4
 8005908:	db01      	blt.n	800590e <__sfputc_r+0x16>
 800590a:	290a      	cmp	r1, #10
 800590c:	d102      	bne.n	8005914 <__sfputc_r+0x1c>
 800590e:	bc10      	pop	{r4}
 8005910:	f7ff bc87 	b.w	8005222 <__swbuf_r>
 8005914:	6813      	ldr	r3, [r2, #0]
 8005916:	1c58      	adds	r0, r3, #1
 8005918:	6010      	str	r0, [r2, #0]
 800591a:	7019      	strb	r1, [r3, #0]
 800591c:	4608      	mov	r0, r1
 800591e:	bc10      	pop	{r4}
 8005920:	4770      	bx	lr

08005922 <__sfputs_r>:
 8005922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005924:	4606      	mov	r6, r0
 8005926:	460f      	mov	r7, r1
 8005928:	4614      	mov	r4, r2
 800592a:	18d5      	adds	r5, r2, r3
 800592c:	42ac      	cmp	r4, r5
 800592e:	d101      	bne.n	8005934 <__sfputs_r+0x12>
 8005930:	2000      	movs	r0, #0
 8005932:	e007      	b.n	8005944 <__sfputs_r+0x22>
 8005934:	463a      	mov	r2, r7
 8005936:	4630      	mov	r0, r6
 8005938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593c:	f7ff ffdc 	bl	80058f8 <__sfputc_r>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d1f3      	bne.n	800592c <__sfputs_r+0xa>
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005948 <_vfiprintf_r>:
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	460d      	mov	r5, r1
 800594e:	4614      	mov	r4, r2
 8005950:	4698      	mov	r8, r3
 8005952:	4606      	mov	r6, r0
 8005954:	b09d      	sub	sp, #116	; 0x74
 8005956:	b118      	cbz	r0, 8005960 <_vfiprintf_r+0x18>
 8005958:	6a03      	ldr	r3, [r0, #32]
 800595a:	b90b      	cbnz	r3, 8005960 <_vfiprintf_r+0x18>
 800595c:	f7ff fb5a 	bl	8005014 <__sinit>
 8005960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005962:	07d9      	lsls	r1, r3, #31
 8005964:	d405      	bmi.n	8005972 <_vfiprintf_r+0x2a>
 8005966:	89ab      	ldrh	r3, [r5, #12]
 8005968:	059a      	lsls	r2, r3, #22
 800596a:	d402      	bmi.n	8005972 <_vfiprintf_r+0x2a>
 800596c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800596e:	f7ff fd75 	bl	800545c <__retarget_lock_acquire_recursive>
 8005972:	89ab      	ldrh	r3, [r5, #12]
 8005974:	071b      	lsls	r3, r3, #28
 8005976:	d501      	bpl.n	800597c <_vfiprintf_r+0x34>
 8005978:	692b      	ldr	r3, [r5, #16]
 800597a:	b99b      	cbnz	r3, 80059a4 <_vfiprintf_r+0x5c>
 800597c:	4629      	mov	r1, r5
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff fc8c 	bl	800529c <__swsetup_r>
 8005984:	b170      	cbz	r0, 80059a4 <_vfiprintf_r+0x5c>
 8005986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005988:	07dc      	lsls	r4, r3, #31
 800598a:	d504      	bpl.n	8005996 <_vfiprintf_r+0x4e>
 800598c:	f04f 30ff 	mov.w	r0, #4294967295
 8005990:	b01d      	add	sp, #116	; 0x74
 8005992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005996:	89ab      	ldrh	r3, [r5, #12]
 8005998:	0598      	lsls	r0, r3, #22
 800599a:	d4f7      	bmi.n	800598c <_vfiprintf_r+0x44>
 800599c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599e:	f7ff fd5e 	bl	800545e <__retarget_lock_release_recursive>
 80059a2:	e7f3      	b.n	800598c <_vfiprintf_r+0x44>
 80059a4:	2300      	movs	r3, #0
 80059a6:	9309      	str	r3, [sp, #36]	; 0x24
 80059a8:	2320      	movs	r3, #32
 80059aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ae:	2330      	movs	r3, #48	; 0x30
 80059b0:	f04f 0901 	mov.w	r9, #1
 80059b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005b68 <_vfiprintf_r+0x220>
 80059bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059c0:	4623      	mov	r3, r4
 80059c2:	469a      	mov	sl, r3
 80059c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059c8:	b10a      	cbz	r2, 80059ce <_vfiprintf_r+0x86>
 80059ca:	2a25      	cmp	r2, #37	; 0x25
 80059cc:	d1f9      	bne.n	80059c2 <_vfiprintf_r+0x7a>
 80059ce:	ebba 0b04 	subs.w	fp, sl, r4
 80059d2:	d00b      	beq.n	80059ec <_vfiprintf_r+0xa4>
 80059d4:	465b      	mov	r3, fp
 80059d6:	4622      	mov	r2, r4
 80059d8:	4629      	mov	r1, r5
 80059da:	4630      	mov	r0, r6
 80059dc:	f7ff ffa1 	bl	8005922 <__sfputs_r>
 80059e0:	3001      	adds	r0, #1
 80059e2:	f000 80a9 	beq.w	8005b38 <_vfiprintf_r+0x1f0>
 80059e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e8:	445a      	add	r2, fp
 80059ea:	9209      	str	r2, [sp, #36]	; 0x24
 80059ec:	f89a 3000 	ldrb.w	r3, [sl]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a1 	beq.w	8005b38 <_vfiprintf_r+0x1f0>
 80059f6:	2300      	movs	r3, #0
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295
 80059fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a00:	f10a 0a01 	add.w	sl, sl, #1
 8005a04:	9304      	str	r3, [sp, #16]
 8005a06:	9307      	str	r3, [sp, #28]
 8005a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a0e:	4654      	mov	r4, sl
 8005a10:	2205      	movs	r2, #5
 8005a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a16:	4854      	ldr	r0, [pc, #336]	; (8005b68 <_vfiprintf_r+0x220>)
 8005a18:	f000 fb9c 	bl	8006154 <memchr>
 8005a1c:	9a04      	ldr	r2, [sp, #16]
 8005a1e:	b9d8      	cbnz	r0, 8005a58 <_vfiprintf_r+0x110>
 8005a20:	06d1      	lsls	r1, r2, #27
 8005a22:	bf44      	itt	mi
 8005a24:	2320      	movmi	r3, #32
 8005a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a2a:	0713      	lsls	r3, r2, #28
 8005a2c:	bf44      	itt	mi
 8005a2e:	232b      	movmi	r3, #43	; 0x2b
 8005a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a34:	f89a 3000 	ldrb.w	r3, [sl]
 8005a38:	2b2a      	cmp	r3, #42	; 0x2a
 8005a3a:	d015      	beq.n	8005a68 <_vfiprintf_r+0x120>
 8005a3c:	4654      	mov	r4, sl
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f04f 0c0a 	mov.w	ip, #10
 8005a44:	9a07      	ldr	r2, [sp, #28]
 8005a46:	4621      	mov	r1, r4
 8005a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a4c:	3b30      	subs	r3, #48	; 0x30
 8005a4e:	2b09      	cmp	r3, #9
 8005a50:	d94d      	bls.n	8005aee <_vfiprintf_r+0x1a6>
 8005a52:	b1b0      	cbz	r0, 8005a82 <_vfiprintf_r+0x13a>
 8005a54:	9207      	str	r2, [sp, #28]
 8005a56:	e014      	b.n	8005a82 <_vfiprintf_r+0x13a>
 8005a58:	eba0 0308 	sub.w	r3, r0, r8
 8005a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a60:	4313      	orrs	r3, r2
 8005a62:	46a2      	mov	sl, r4
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	e7d2      	b.n	8005a0e <_vfiprintf_r+0xc6>
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	1d19      	adds	r1, r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	9103      	str	r1, [sp, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bfbb      	ittet	lt
 8005a74:	425b      	neglt	r3, r3
 8005a76:	f042 0202 	orrlt.w	r2, r2, #2
 8005a7a:	9307      	strge	r3, [sp, #28]
 8005a7c:	9307      	strlt	r3, [sp, #28]
 8005a7e:	bfb8      	it	lt
 8005a80:	9204      	strlt	r2, [sp, #16]
 8005a82:	7823      	ldrb	r3, [r4, #0]
 8005a84:	2b2e      	cmp	r3, #46	; 0x2e
 8005a86:	d10c      	bne.n	8005aa2 <_vfiprintf_r+0x15a>
 8005a88:	7863      	ldrb	r3, [r4, #1]
 8005a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8c:	d134      	bne.n	8005af8 <_vfiprintf_r+0x1b0>
 8005a8e:	9b03      	ldr	r3, [sp, #12]
 8005a90:	3402      	adds	r4, #2
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	9203      	str	r2, [sp, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfb8      	it	lt
 8005a9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aa0:	9305      	str	r3, [sp, #20]
 8005aa2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b6c <_vfiprintf_r+0x224>
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	7821      	ldrb	r1, [r4, #0]
 8005aac:	f000 fb52 	bl	8006154 <memchr>
 8005ab0:	b138      	cbz	r0, 8005ac2 <_vfiprintf_r+0x17a>
 8005ab2:	2240      	movs	r2, #64	; 0x40
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	eba0 000a 	sub.w	r0, r0, sl
 8005aba:	4082      	lsls	r2, r0
 8005abc:	4313      	orrs	r3, r2
 8005abe:	3401      	adds	r4, #1
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac6:	2206      	movs	r2, #6
 8005ac8:	4829      	ldr	r0, [pc, #164]	; (8005b70 <_vfiprintf_r+0x228>)
 8005aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ace:	f000 fb41 	bl	8006154 <memchr>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d03f      	beq.n	8005b56 <_vfiprintf_r+0x20e>
 8005ad6:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <_vfiprintf_r+0x22c>)
 8005ad8:	bb1b      	cbnz	r3, 8005b22 <_vfiprintf_r+0x1da>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	3307      	adds	r3, #7
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	443b      	add	r3, r7
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	e768      	b.n	80059c0 <_vfiprintf_r+0x78>
 8005aee:	460c      	mov	r4, r1
 8005af0:	2001      	movs	r0, #1
 8005af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005af6:	e7a6      	b.n	8005a46 <_vfiprintf_r+0xfe>
 8005af8:	2300      	movs	r3, #0
 8005afa:	f04f 0c0a 	mov.w	ip, #10
 8005afe:	4619      	mov	r1, r3
 8005b00:	3401      	adds	r4, #1
 8005b02:	9305      	str	r3, [sp, #20]
 8005b04:	4620      	mov	r0, r4
 8005b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b0a:	3a30      	subs	r2, #48	; 0x30
 8005b0c:	2a09      	cmp	r2, #9
 8005b0e:	d903      	bls.n	8005b18 <_vfiprintf_r+0x1d0>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0c6      	beq.n	8005aa2 <_vfiprintf_r+0x15a>
 8005b14:	9105      	str	r1, [sp, #20]
 8005b16:	e7c4      	b.n	8005aa2 <_vfiprintf_r+0x15a>
 8005b18:	4604      	mov	r4, r0
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b20:	e7f0      	b.n	8005b04 <_vfiprintf_r+0x1bc>
 8005b22:	ab03      	add	r3, sp, #12
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	462a      	mov	r2, r5
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <_vfiprintf_r+0x230>)
 8005b2c:	a904      	add	r1, sp, #16
 8005b2e:	f3af 8000 	nop.w
 8005b32:	4607      	mov	r7, r0
 8005b34:	1c78      	adds	r0, r7, #1
 8005b36:	d1d6      	bne.n	8005ae6 <_vfiprintf_r+0x19e>
 8005b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b3a:	07d9      	lsls	r1, r3, #31
 8005b3c:	d405      	bmi.n	8005b4a <_vfiprintf_r+0x202>
 8005b3e:	89ab      	ldrh	r3, [r5, #12]
 8005b40:	059a      	lsls	r2, r3, #22
 8005b42:	d402      	bmi.n	8005b4a <_vfiprintf_r+0x202>
 8005b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b46:	f7ff fc8a 	bl	800545e <__retarget_lock_release_recursive>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	065b      	lsls	r3, r3, #25
 8005b4e:	f53f af1d 	bmi.w	800598c <_vfiprintf_r+0x44>
 8005b52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b54:	e71c      	b.n	8005990 <_vfiprintf_r+0x48>
 8005b56:	ab03      	add	r3, sp, #12
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <_vfiprintf_r+0x230>)
 8005b60:	a904      	add	r1, sp, #16
 8005b62:	f000 f87d 	bl	8005c60 <_printf_i>
 8005b66:	e7e4      	b.n	8005b32 <_vfiprintf_r+0x1ea>
 8005b68:	080066e8 	.word	0x080066e8
 8005b6c:	080066ee 	.word	0x080066ee
 8005b70:	080066f2 	.word	0x080066f2
 8005b74:	00000000 	.word	0x00000000
 8005b78:	08005923 	.word	0x08005923

08005b7c <_printf_common>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	4616      	mov	r6, r2
 8005b82:	4699      	mov	r9, r3
 8005b84:	688a      	ldr	r2, [r1, #8]
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	4607      	mov	r7, r0
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	bfb8      	it	lt
 8005b8e:	4613      	movlt	r3, r2
 8005b90:	6033      	str	r3, [r6, #0]
 8005b92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b96:	460c      	mov	r4, r1
 8005b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_printf_common+0x26>
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	0699      	lsls	r1, r3, #26
 8005ba6:	bf42      	ittt	mi
 8005ba8:	6833      	ldrmi	r3, [r6, #0]
 8005baa:	3302      	addmi	r3, #2
 8005bac:	6033      	strmi	r3, [r6, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	f015 0506 	ands.w	r5, r5, #6
 8005bb4:	d106      	bne.n	8005bc4 <_printf_common+0x48>
 8005bb6:	f104 0a19 	add.w	sl, r4, #25
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	6832      	ldr	r2, [r6, #0]
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dc2b      	bgt.n	8005c1c <_printf_common+0xa0>
 8005bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc8:	1e13      	subs	r3, r2, #0
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	bf18      	it	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	0692      	lsls	r2, r2, #26
 8005bd2:	d430      	bmi.n	8005c36 <_printf_common+0xba>
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bdc:	47c0      	blx	r8
 8005bde:	3001      	adds	r0, #1
 8005be0:	d023      	beq.n	8005c2a <_printf_common+0xae>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	6922      	ldr	r2, [r4, #16]
 8005be6:	f003 0306 	and.w	r3, r3, #6
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	bf14      	ite	ne
 8005bee:	2500      	movne	r5, #0
 8005bf0:	6833      	ldreq	r3, [r6, #0]
 8005bf2:	f04f 0600 	mov.w	r6, #0
 8005bf6:	bf08      	it	eq
 8005bf8:	68e5      	ldreq	r5, [r4, #12]
 8005bfa:	f104 041a 	add.w	r4, r4, #26
 8005bfe:	bf08      	it	eq
 8005c00:	1aed      	subeq	r5, r5, r3
 8005c02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c06:	bf08      	it	eq
 8005c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bfc4      	itt	gt
 8005c10:	1a9b      	subgt	r3, r3, r2
 8005c12:	18ed      	addgt	r5, r5, r3
 8005c14:	42b5      	cmp	r5, r6
 8005c16:	d11a      	bne.n	8005c4e <_printf_common+0xd2>
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e008      	b.n	8005c2e <_printf_common+0xb2>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4652      	mov	r2, sl
 8005c20:	4649      	mov	r1, r9
 8005c22:	4638      	mov	r0, r7
 8005c24:	47c0      	blx	r8
 8005c26:	3001      	adds	r0, #1
 8005c28:	d103      	bne.n	8005c32 <_printf_common+0xb6>
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c32:	3501      	adds	r5, #1
 8005c34:	e7c1      	b.n	8005bba <_printf_common+0x3e>
 8005c36:	2030      	movs	r0, #48	; 0x30
 8005c38:	18e1      	adds	r1, r4, r3
 8005c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c44:	4422      	add	r2, r4
 8005c46:	3302      	adds	r3, #2
 8005c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c4c:	e7c2      	b.n	8005bd4 <_printf_common+0x58>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4622      	mov	r2, r4
 8005c52:	4649      	mov	r1, r9
 8005c54:	4638      	mov	r0, r7
 8005c56:	47c0      	blx	r8
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d0e6      	beq.n	8005c2a <_printf_common+0xae>
 8005c5c:	3601      	adds	r6, #1
 8005c5e:	e7d9      	b.n	8005c14 <_printf_common+0x98>

08005c60 <_printf_i>:
 8005c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	7e0f      	ldrb	r7, [r1, #24]
 8005c66:	4691      	mov	r9, r2
 8005c68:	2f78      	cmp	r7, #120	; 0x78
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	469a      	mov	sl, r3
 8005c70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c76:	d807      	bhi.n	8005c88 <_printf_i+0x28>
 8005c78:	2f62      	cmp	r7, #98	; 0x62
 8005c7a:	d80a      	bhi.n	8005c92 <_printf_i+0x32>
 8005c7c:	2f00      	cmp	r7, #0
 8005c7e:	f000 80d5 	beq.w	8005e2c <_printf_i+0x1cc>
 8005c82:	2f58      	cmp	r7, #88	; 0x58
 8005c84:	f000 80c1 	beq.w	8005e0a <_printf_i+0x1aa>
 8005c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c90:	e03a      	b.n	8005d08 <_printf_i+0xa8>
 8005c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c96:	2b15      	cmp	r3, #21
 8005c98:	d8f6      	bhi.n	8005c88 <_printf_i+0x28>
 8005c9a:	a101      	add	r1, pc, #4	; (adr r1, 8005ca0 <_printf_i+0x40>)
 8005c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ca0:	08005cf9 	.word	0x08005cf9
 8005ca4:	08005d0d 	.word	0x08005d0d
 8005ca8:	08005c89 	.word	0x08005c89
 8005cac:	08005c89 	.word	0x08005c89
 8005cb0:	08005c89 	.word	0x08005c89
 8005cb4:	08005c89 	.word	0x08005c89
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005c89 	.word	0x08005c89
 8005cc0:	08005c89 	.word	0x08005c89
 8005cc4:	08005c89 	.word	0x08005c89
 8005cc8:	08005c89 	.word	0x08005c89
 8005ccc:	08005e13 	.word	0x08005e13
 8005cd0:	08005d39 	.word	0x08005d39
 8005cd4:	08005dcd 	.word	0x08005dcd
 8005cd8:	08005c89 	.word	0x08005c89
 8005cdc:	08005c89 	.word	0x08005c89
 8005ce0:	08005e35 	.word	0x08005e35
 8005ce4:	08005c89 	.word	0x08005c89
 8005ce8:	08005d39 	.word	0x08005d39
 8005cec:	08005c89 	.word	0x08005c89
 8005cf0:	08005c89 	.word	0x08005c89
 8005cf4:	08005dd5 	.word	0x08005dd5
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	1d1a      	adds	r2, r3, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	602a      	str	r2, [r5, #0]
 8005d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0a0      	b.n	8005e4e <_printf_i+0x1ee>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	682b      	ldr	r3, [r5, #0]
 8005d10:	0607      	lsls	r7, r0, #24
 8005d12:	f103 0104 	add.w	r1, r3, #4
 8005d16:	6029      	str	r1, [r5, #0]
 8005d18:	d501      	bpl.n	8005d1e <_printf_i+0xbe>
 8005d1a:	681e      	ldr	r6, [r3, #0]
 8005d1c:	e003      	b.n	8005d26 <_printf_i+0xc6>
 8005d1e:	0646      	lsls	r6, r0, #25
 8005d20:	d5fb      	bpl.n	8005d1a <_printf_i+0xba>
 8005d22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	da03      	bge.n	8005d32 <_printf_i+0xd2>
 8005d2a:	232d      	movs	r3, #45	; 0x2d
 8005d2c:	4276      	negs	r6, r6
 8005d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d32:	230a      	movs	r3, #10
 8005d34:	4859      	ldr	r0, [pc, #356]	; (8005e9c <_printf_i+0x23c>)
 8005d36:	e012      	b.n	8005d5e <_printf_i+0xfe>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	6820      	ldr	r0, [r4, #0]
 8005d3c:	1d19      	adds	r1, r3, #4
 8005d3e:	6029      	str	r1, [r5, #0]
 8005d40:	0605      	lsls	r5, r0, #24
 8005d42:	d501      	bpl.n	8005d48 <_printf_i+0xe8>
 8005d44:	681e      	ldr	r6, [r3, #0]
 8005d46:	e002      	b.n	8005d4e <_printf_i+0xee>
 8005d48:	0641      	lsls	r1, r0, #25
 8005d4a:	d5fb      	bpl.n	8005d44 <_printf_i+0xe4>
 8005d4c:	881e      	ldrh	r6, [r3, #0]
 8005d4e:	2f6f      	cmp	r7, #111	; 0x6f
 8005d50:	bf0c      	ite	eq
 8005d52:	2308      	moveq	r3, #8
 8005d54:	230a      	movne	r3, #10
 8005d56:	4851      	ldr	r0, [pc, #324]	; (8005e9c <_printf_i+0x23c>)
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d5e:	6865      	ldr	r5, [r4, #4]
 8005d60:	2d00      	cmp	r5, #0
 8005d62:	bfa8      	it	ge
 8005d64:	6821      	ldrge	r1, [r4, #0]
 8005d66:	60a5      	str	r5, [r4, #8]
 8005d68:	bfa4      	itt	ge
 8005d6a:	f021 0104 	bicge.w	r1, r1, #4
 8005d6e:	6021      	strge	r1, [r4, #0]
 8005d70:	b90e      	cbnz	r6, 8005d76 <_printf_i+0x116>
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	d04b      	beq.n	8005e0e <_printf_i+0x1ae>
 8005d76:	4615      	mov	r5, r2
 8005d78:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d7c:	fb03 6711 	mls	r7, r3, r1, r6
 8005d80:	5dc7      	ldrb	r7, [r0, r7]
 8005d82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d86:	4637      	mov	r7, r6
 8005d88:	42bb      	cmp	r3, r7
 8005d8a:	460e      	mov	r6, r1
 8005d8c:	d9f4      	bls.n	8005d78 <_printf_i+0x118>
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d10b      	bne.n	8005daa <_printf_i+0x14a>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	07de      	lsls	r6, r3, #31
 8005d96:	d508      	bpl.n	8005daa <_printf_i+0x14a>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	6861      	ldr	r1, [r4, #4]
 8005d9c:	4299      	cmp	r1, r3
 8005d9e:	bfde      	ittt	le
 8005da0:	2330      	movle	r3, #48	; 0x30
 8005da2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005da6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005daa:	1b52      	subs	r2, r2, r5
 8005dac:	6122      	str	r2, [r4, #16]
 8005dae:	464b      	mov	r3, r9
 8005db0:	4621      	mov	r1, r4
 8005db2:	4640      	mov	r0, r8
 8005db4:	f8cd a000 	str.w	sl, [sp]
 8005db8:	aa03      	add	r2, sp, #12
 8005dba:	f7ff fedf 	bl	8005b7c <_printf_common>
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d14a      	bne.n	8005e58 <_printf_i+0x1f8>
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc6:	b004      	add	sp, #16
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	f043 0320 	orr.w	r3, r3, #32
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	2778      	movs	r7, #120	; 0x78
 8005dd6:	4832      	ldr	r0, [pc, #200]	; (8005ea0 <_printf_i+0x240>)
 8005dd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	6829      	ldr	r1, [r5, #0]
 8005de0:	061f      	lsls	r7, r3, #24
 8005de2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005de6:	d402      	bmi.n	8005dee <_printf_i+0x18e>
 8005de8:	065f      	lsls	r7, r3, #25
 8005dea:	bf48      	it	mi
 8005dec:	b2b6      	uxthmi	r6, r6
 8005dee:	07df      	lsls	r7, r3, #31
 8005df0:	bf48      	it	mi
 8005df2:	f043 0320 	orrmi.w	r3, r3, #32
 8005df6:	6029      	str	r1, [r5, #0]
 8005df8:	bf48      	it	mi
 8005dfa:	6023      	strmi	r3, [r4, #0]
 8005dfc:	b91e      	cbnz	r6, 8005e06 <_printf_i+0x1a6>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f023 0320 	bic.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2310      	movs	r3, #16
 8005e08:	e7a6      	b.n	8005d58 <_printf_i+0xf8>
 8005e0a:	4824      	ldr	r0, [pc, #144]	; (8005e9c <_printf_i+0x23c>)
 8005e0c:	e7e4      	b.n	8005dd8 <_printf_i+0x178>
 8005e0e:	4615      	mov	r5, r2
 8005e10:	e7bd      	b.n	8005d8e <_printf_i+0x12e>
 8005e12:	682b      	ldr	r3, [r5, #0]
 8005e14:	6826      	ldr	r6, [r4, #0]
 8005e16:	1d18      	adds	r0, r3, #4
 8005e18:	6961      	ldr	r1, [r4, #20]
 8005e1a:	6028      	str	r0, [r5, #0]
 8005e1c:	0635      	lsls	r5, r6, #24
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	d501      	bpl.n	8005e26 <_printf_i+0x1c6>
 8005e22:	6019      	str	r1, [r3, #0]
 8005e24:	e002      	b.n	8005e2c <_printf_i+0x1cc>
 8005e26:	0670      	lsls	r0, r6, #25
 8005e28:	d5fb      	bpl.n	8005e22 <_printf_i+0x1c2>
 8005e2a:	8019      	strh	r1, [r3, #0]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4615      	mov	r5, r2
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	e7bc      	b.n	8005dae <_printf_i+0x14e>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	2100      	movs	r1, #0
 8005e38:	1d1a      	adds	r2, r3, #4
 8005e3a:	602a      	str	r2, [r5, #0]
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	6862      	ldr	r2, [r4, #4]
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 f987 	bl	8006154 <memchr>
 8005e46:	b108      	cbz	r0, 8005e4c <_printf_i+0x1ec>
 8005e48:	1b40      	subs	r0, r0, r5
 8005e4a:	6060      	str	r0, [r4, #4]
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	6123      	str	r3, [r4, #16]
 8005e50:	2300      	movs	r3, #0
 8005e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e56:	e7aa      	b.n	8005dae <_printf_i+0x14e>
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	47d0      	blx	sl
 8005e62:	3001      	adds	r0, #1
 8005e64:	d0ad      	beq.n	8005dc2 <_printf_i+0x162>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	079b      	lsls	r3, r3, #30
 8005e6a:	d413      	bmi.n	8005e94 <_printf_i+0x234>
 8005e6c:	68e0      	ldr	r0, [r4, #12]
 8005e6e:	9b03      	ldr	r3, [sp, #12]
 8005e70:	4298      	cmp	r0, r3
 8005e72:	bfb8      	it	lt
 8005e74:	4618      	movlt	r0, r3
 8005e76:	e7a6      	b.n	8005dc6 <_printf_i+0x166>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	4640      	mov	r0, r8
 8005e80:	47d0      	blx	sl
 8005e82:	3001      	adds	r0, #1
 8005e84:	d09d      	beq.n	8005dc2 <_printf_i+0x162>
 8005e86:	3501      	adds	r5, #1
 8005e88:	68e3      	ldr	r3, [r4, #12]
 8005e8a:	9903      	ldr	r1, [sp, #12]
 8005e8c:	1a5b      	subs	r3, r3, r1
 8005e8e:	42ab      	cmp	r3, r5
 8005e90:	dcf2      	bgt.n	8005e78 <_printf_i+0x218>
 8005e92:	e7eb      	b.n	8005e6c <_printf_i+0x20c>
 8005e94:	2500      	movs	r5, #0
 8005e96:	f104 0619 	add.w	r6, r4, #25
 8005e9a:	e7f5      	b.n	8005e88 <_printf_i+0x228>
 8005e9c:	080066f9 	.word	0x080066f9
 8005ea0:	0800670a 	.word	0x0800670a

08005ea4 <__sflush_r>:
 8005ea4:	898a      	ldrh	r2, [r1, #12]
 8005ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	0710      	lsls	r0, r2, #28
 8005eac:	460c      	mov	r4, r1
 8005eae:	d457      	bmi.n	8005f60 <__sflush_r+0xbc>
 8005eb0:	684b      	ldr	r3, [r1, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dc04      	bgt.n	8005ec0 <__sflush_r+0x1c>
 8005eb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	dc01      	bgt.n	8005ec0 <__sflush_r+0x1c>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	d0fa      	beq.n	8005ebc <__sflush_r+0x18>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ecc:	682f      	ldr	r7, [r5, #0]
 8005ece:	6a21      	ldr	r1, [r4, #32]
 8005ed0:	602b      	str	r3, [r5, #0]
 8005ed2:	d032      	beq.n	8005f3a <__sflush_r+0x96>
 8005ed4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	075a      	lsls	r2, r3, #29
 8005eda:	d505      	bpl.n	8005ee8 <__sflush_r+0x44>
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	1ac0      	subs	r0, r0, r3
 8005ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ee2:	b10b      	cbz	r3, 8005ee8 <__sflush_r+0x44>
 8005ee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ee6:	1ac0      	subs	r0, r0, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4602      	mov	r2, r0
 8005eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eee:	4628      	mov	r0, r5
 8005ef0:	6a21      	ldr	r1, [r4, #32]
 8005ef2:	47b0      	blx	r6
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	d106      	bne.n	8005f08 <__sflush_r+0x64>
 8005efa:	6829      	ldr	r1, [r5, #0]
 8005efc:	291d      	cmp	r1, #29
 8005efe:	d82b      	bhi.n	8005f58 <__sflush_r+0xb4>
 8005f00:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <__sflush_r+0x100>)
 8005f02:	410a      	asrs	r2, r1
 8005f04:	07d6      	lsls	r6, r2, #31
 8005f06:	d427      	bmi.n	8005f58 <__sflush_r+0xb4>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	6062      	str	r2, [r4, #4]
 8005f0c:	6922      	ldr	r2, [r4, #16]
 8005f0e:	04d9      	lsls	r1, r3, #19
 8005f10:	6022      	str	r2, [r4, #0]
 8005f12:	d504      	bpl.n	8005f1e <__sflush_r+0x7a>
 8005f14:	1c42      	adds	r2, r0, #1
 8005f16:	d101      	bne.n	8005f1c <__sflush_r+0x78>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b903      	cbnz	r3, 8005f1e <__sflush_r+0x7a>
 8005f1c:	6560      	str	r0, [r4, #84]	; 0x54
 8005f1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f20:	602f      	str	r7, [r5, #0]
 8005f22:	2900      	cmp	r1, #0
 8005f24:	d0ca      	beq.n	8005ebc <__sflush_r+0x18>
 8005f26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f2a:	4299      	cmp	r1, r3
 8005f2c:	d002      	beq.n	8005f34 <__sflush_r+0x90>
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f7ff fa96 	bl	8005460 <_free_r>
 8005f34:	2000      	movs	r0, #0
 8005f36:	6360      	str	r0, [r4, #52]	; 0x34
 8005f38:	e7c1      	b.n	8005ebe <__sflush_r+0x1a>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	47b0      	blx	r6
 8005f40:	1c41      	adds	r1, r0, #1
 8005f42:	d1c8      	bne.n	8005ed6 <__sflush_r+0x32>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0c5      	beq.n	8005ed6 <__sflush_r+0x32>
 8005f4a:	2b1d      	cmp	r3, #29
 8005f4c:	d001      	beq.n	8005f52 <__sflush_r+0xae>
 8005f4e:	2b16      	cmp	r3, #22
 8005f50:	d101      	bne.n	8005f56 <__sflush_r+0xb2>
 8005f52:	602f      	str	r7, [r5, #0]
 8005f54:	e7b2      	b.n	8005ebc <__sflush_r+0x18>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	e7ae      	b.n	8005ebe <__sflush_r+0x1a>
 8005f60:	690f      	ldr	r7, [r1, #16]
 8005f62:	2f00      	cmp	r7, #0
 8005f64:	d0aa      	beq.n	8005ebc <__sflush_r+0x18>
 8005f66:	0793      	lsls	r3, r2, #30
 8005f68:	bf18      	it	ne
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	680e      	ldr	r6, [r1, #0]
 8005f6e:	bf08      	it	eq
 8005f70:	694b      	ldreq	r3, [r1, #20]
 8005f72:	1bf6      	subs	r6, r6, r7
 8005f74:	600f      	str	r7, [r1, #0]
 8005f76:	608b      	str	r3, [r1, #8]
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	dd9f      	ble.n	8005ebc <__sflush_r+0x18>
 8005f7c:	4633      	mov	r3, r6
 8005f7e:	463a      	mov	r2, r7
 8005f80:	4628      	mov	r0, r5
 8005f82:	6a21      	ldr	r1, [r4, #32]
 8005f84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005f88:	47e0      	blx	ip
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	dc06      	bgt.n	8005f9c <__sflush_r+0xf8>
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f98:	81a3      	strh	r3, [r4, #12]
 8005f9a:	e790      	b.n	8005ebe <__sflush_r+0x1a>
 8005f9c:	4407      	add	r7, r0
 8005f9e:	1a36      	subs	r6, r6, r0
 8005fa0:	e7ea      	b.n	8005f78 <__sflush_r+0xd4>
 8005fa2:	bf00      	nop
 8005fa4:	dfbffffe 	.word	0xdfbffffe

08005fa8 <_fflush_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	690b      	ldr	r3, [r1, #16]
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	b913      	cbnz	r3, 8005fb8 <_fflush_r+0x10>
 8005fb2:	2500      	movs	r5, #0
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	b118      	cbz	r0, 8005fc2 <_fflush_r+0x1a>
 8005fba:	6a03      	ldr	r3, [r0, #32]
 8005fbc:	b90b      	cbnz	r3, 8005fc2 <_fflush_r+0x1a>
 8005fbe:	f7ff f829 	bl	8005014 <__sinit>
 8005fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f3      	beq.n	8005fb2 <_fflush_r+0xa>
 8005fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fcc:	07d0      	lsls	r0, r2, #31
 8005fce:	d404      	bmi.n	8005fda <_fflush_r+0x32>
 8005fd0:	0599      	lsls	r1, r3, #22
 8005fd2:	d402      	bmi.n	8005fda <_fflush_r+0x32>
 8005fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fd6:	f7ff fa41 	bl	800545c <__retarget_lock_acquire_recursive>
 8005fda:	4628      	mov	r0, r5
 8005fdc:	4621      	mov	r1, r4
 8005fde:	f7ff ff61 	bl	8005ea4 <__sflush_r>
 8005fe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	07da      	lsls	r2, r3, #31
 8005fe8:	d4e4      	bmi.n	8005fb4 <_fflush_r+0xc>
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	059b      	lsls	r3, r3, #22
 8005fee:	d4e1      	bmi.n	8005fb4 <_fflush_r+0xc>
 8005ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff2:	f7ff fa34 	bl	800545e <__retarget_lock_release_recursive>
 8005ff6:	e7dd      	b.n	8005fb4 <_fflush_r+0xc>

08005ff8 <__swhatbuf_r>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006000:	4615      	mov	r5, r2
 8006002:	2900      	cmp	r1, #0
 8006004:	461e      	mov	r6, r3
 8006006:	b096      	sub	sp, #88	; 0x58
 8006008:	da0c      	bge.n	8006024 <__swhatbuf_r+0x2c>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	2100      	movs	r1, #0
 800600e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006012:	bf0c      	ite	eq
 8006014:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006018:	2340      	movne	r3, #64	; 0x40
 800601a:	2000      	movs	r0, #0
 800601c:	6031      	str	r1, [r6, #0]
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	b016      	add	sp, #88	; 0x58
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	466a      	mov	r2, sp
 8006026:	f000 f863 	bl	80060f0 <_fstat_r>
 800602a:	2800      	cmp	r0, #0
 800602c:	dbed      	blt.n	800600a <__swhatbuf_r+0x12>
 800602e:	9901      	ldr	r1, [sp, #4]
 8006030:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006034:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006038:	4259      	negs	r1, r3
 800603a:	4159      	adcs	r1, r3
 800603c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006040:	e7eb      	b.n	800601a <__swhatbuf_r+0x22>

08006042 <__smakebuf_r>:
 8006042:	898b      	ldrh	r3, [r1, #12]
 8006044:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006046:	079d      	lsls	r5, r3, #30
 8006048:	4606      	mov	r6, r0
 800604a:	460c      	mov	r4, r1
 800604c:	d507      	bpl.n	800605e <__smakebuf_r+0x1c>
 800604e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	2301      	movs	r3, #1
 8006058:	6163      	str	r3, [r4, #20]
 800605a:	b002      	add	sp, #8
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	466a      	mov	r2, sp
 8006060:	ab01      	add	r3, sp, #4
 8006062:	f7ff ffc9 	bl	8005ff8 <__swhatbuf_r>
 8006066:	9900      	ldr	r1, [sp, #0]
 8006068:	4605      	mov	r5, r0
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff fa60 	bl	8005530 <_malloc_r>
 8006070:	b948      	cbnz	r0, 8006086 <__smakebuf_r+0x44>
 8006072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006076:	059a      	lsls	r2, r3, #22
 8006078:	d4ef      	bmi.n	800605a <__smakebuf_r+0x18>
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	f043 0302 	orr.w	r3, r3, #2
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	e7e3      	b.n	800604e <__smakebuf_r+0xc>
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	6020      	str	r0, [r4, #0]
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	9b00      	ldr	r3, [sp, #0]
 8006092:	6120      	str	r0, [r4, #16]
 8006094:	6163      	str	r3, [r4, #20]
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	b15b      	cbz	r3, 80060b2 <__smakebuf_r+0x70>
 800609a:	4630      	mov	r0, r6
 800609c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060a0:	f000 f838 	bl	8006114 <_isatty_r>
 80060a4:	b128      	cbz	r0, 80060b2 <__smakebuf_r+0x70>
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f023 0303 	bic.w	r3, r3, #3
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	431d      	orrs	r5, r3
 80060b6:	81a5      	strh	r5, [r4, #12]
 80060b8:	e7cf      	b.n	800605a <__smakebuf_r+0x18>

080060ba <memmove>:
 80060ba:	4288      	cmp	r0, r1
 80060bc:	b510      	push	{r4, lr}
 80060be:	eb01 0402 	add.w	r4, r1, r2
 80060c2:	d902      	bls.n	80060ca <memmove+0x10>
 80060c4:	4284      	cmp	r4, r0
 80060c6:	4623      	mov	r3, r4
 80060c8:	d807      	bhi.n	80060da <memmove+0x20>
 80060ca:	1e43      	subs	r3, r0, #1
 80060cc:	42a1      	cmp	r1, r4
 80060ce:	d008      	beq.n	80060e2 <memmove+0x28>
 80060d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060d8:	e7f8      	b.n	80060cc <memmove+0x12>
 80060da:	4601      	mov	r1, r0
 80060dc:	4402      	add	r2, r0
 80060de:	428a      	cmp	r2, r1
 80060e0:	d100      	bne.n	80060e4 <memmove+0x2a>
 80060e2:	bd10      	pop	{r4, pc}
 80060e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ec:	e7f7      	b.n	80060de <memmove+0x24>
	...

080060f0 <_fstat_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	2300      	movs	r3, #0
 80060f4:	4d06      	ldr	r5, [pc, #24]	; (8006110 <_fstat_r+0x20>)
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	4611      	mov	r1, r2
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	f7fc f8f9 	bl	80022f4 <_fstat>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d102      	bne.n	800610c <_fstat_r+0x1c>
 8006106:	682b      	ldr	r3, [r5, #0]
 8006108:	b103      	cbz	r3, 800610c <_fstat_r+0x1c>
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	bd38      	pop	{r3, r4, r5, pc}
 800610e:	bf00      	nop
 8006110:	20000800 	.word	0x20000800

08006114 <_isatty_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	2300      	movs	r3, #0
 8006118:	4d05      	ldr	r5, [pc, #20]	; (8006130 <_isatty_r+0x1c>)
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fc f8f7 	bl	8002312 <_isatty>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_isatty_r+0x1a>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_isatty_r+0x1a>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20000800 	.word	0x20000800

08006134 <_sbrk_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	2300      	movs	r3, #0
 8006138:	4d05      	ldr	r5, [pc, #20]	; (8006150 <_sbrk_r+0x1c>)
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f000 f85c 	bl	80061fc <_sbrk>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_sbrk_r+0x1a>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_sbrk_r+0x1a>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20000800 	.word	0x20000800

08006154 <memchr>:
 8006154:	4603      	mov	r3, r0
 8006156:	b510      	push	{r4, lr}
 8006158:	b2c9      	uxtb	r1, r1
 800615a:	4402      	add	r2, r0
 800615c:	4293      	cmp	r3, r2
 800615e:	4618      	mov	r0, r3
 8006160:	d101      	bne.n	8006166 <memchr+0x12>
 8006162:	2000      	movs	r0, #0
 8006164:	e003      	b.n	800616e <memchr+0x1a>
 8006166:	7804      	ldrb	r4, [r0, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	428c      	cmp	r4, r1
 800616c:	d1f6      	bne.n	800615c <memchr+0x8>
 800616e:	bd10      	pop	{r4, pc}

08006170 <memcpy>:
 8006170:	440a      	add	r2, r1
 8006172:	4291      	cmp	r1, r2
 8006174:	f100 33ff 	add.w	r3, r0, #4294967295
 8006178:	d100      	bne.n	800617c <memcpy+0xc>
 800617a:	4770      	bx	lr
 800617c:	b510      	push	{r4, lr}
 800617e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006182:	4291      	cmp	r1, r2
 8006184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006188:	d1f9      	bne.n	800617e <memcpy+0xe>
 800618a:	bd10      	pop	{r4, pc}

0800618c <_realloc_r>:
 800618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006190:	4680      	mov	r8, r0
 8006192:	4614      	mov	r4, r2
 8006194:	460e      	mov	r6, r1
 8006196:	b921      	cbnz	r1, 80061a2 <_realloc_r+0x16>
 8006198:	4611      	mov	r1, r2
 800619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619e:	f7ff b9c7 	b.w	8005530 <_malloc_r>
 80061a2:	b92a      	cbnz	r2, 80061b0 <_realloc_r+0x24>
 80061a4:	f7ff f95c 	bl	8005460 <_free_r>
 80061a8:	4625      	mov	r5, r4
 80061aa:	4628      	mov	r0, r5
 80061ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b0:	f000 f81b 	bl	80061ea <_malloc_usable_size_r>
 80061b4:	4284      	cmp	r4, r0
 80061b6:	4607      	mov	r7, r0
 80061b8:	d802      	bhi.n	80061c0 <_realloc_r+0x34>
 80061ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061be:	d812      	bhi.n	80061e6 <_realloc_r+0x5a>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4640      	mov	r0, r8
 80061c4:	f7ff f9b4 	bl	8005530 <_malloc_r>
 80061c8:	4605      	mov	r5, r0
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d0ed      	beq.n	80061aa <_realloc_r+0x1e>
 80061ce:	42bc      	cmp	r4, r7
 80061d0:	4622      	mov	r2, r4
 80061d2:	4631      	mov	r1, r6
 80061d4:	bf28      	it	cs
 80061d6:	463a      	movcs	r2, r7
 80061d8:	f7ff ffca 	bl	8006170 <memcpy>
 80061dc:	4631      	mov	r1, r6
 80061de:	4640      	mov	r0, r8
 80061e0:	f7ff f93e 	bl	8005460 <_free_r>
 80061e4:	e7e1      	b.n	80061aa <_realloc_r+0x1e>
 80061e6:	4635      	mov	r5, r6
 80061e8:	e7df      	b.n	80061aa <_realloc_r+0x1e>

080061ea <_malloc_usable_size_r>:
 80061ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ee:	1f18      	subs	r0, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfbc      	itt	lt
 80061f4:	580b      	ldrlt	r3, [r1, r0]
 80061f6:	18c0      	addlt	r0, r0, r3
 80061f8:	4770      	bx	lr
	...

080061fc <_sbrk>:
 80061fc:	4a04      	ldr	r2, [pc, #16]	; (8006210 <_sbrk+0x14>)
 80061fe:	4603      	mov	r3, r0
 8006200:	6811      	ldr	r1, [r2, #0]
 8006202:	b909      	cbnz	r1, 8006208 <_sbrk+0xc>
 8006204:	4903      	ldr	r1, [pc, #12]	; (8006214 <_sbrk+0x18>)
 8006206:	6011      	str	r1, [r2, #0]
 8006208:	6810      	ldr	r0, [r2, #0]
 800620a:	4403      	add	r3, r0
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4770      	bx	lr
 8006210:	20000810 	.word	0x20000810
 8006214:	20000818 	.word	0x20000818

08006218 <_init>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr

08006224 <_fini>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	bf00      	nop
 8006228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622a:	bc08      	pop	{r3}
 800622c:	469e      	mov	lr, r3
 800622e:	4770      	bx	lr
